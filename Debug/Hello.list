
Hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1c4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  0800a3a8  0800a3a8  0001a3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa88  0800aa88  00020218  2**0
                  CONTENTS
  4 .ARM          00000000  0800aa88  0800aa88  00020218  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aa88  0800aa88  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa88  0800aa88  0001aa88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa8c  0800aa8c  0001aa8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800aa90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b74c  20000218  0800aca8  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b964  0800aca8  0002b964  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131c1  00000000  00000000  00020241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032ee  00000000  00000000  00033402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  000366f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  000377b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c71c  00000000  00000000  000386f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f1e  00000000  00000000  00054e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c172  00000000  00000000  00069d32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105ea4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004440  00000000  00000000  00105ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000218 	.word	0x20000218
 8000200:	00000000 	.word	0x00000000
 8000204:	0800a390 	.word	0x0800a390

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000021c 	.word	0x2000021c
 8000220:	0800a390 	.word	0x0800a390

08000224 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b092      	sub	sp, #72	; 0x48
 8000228:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022a:	f001 fc91 	bl	8001b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022e:	f000 faf3 	bl	8000818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000232:	f000 fca3 	bl	8000b7c <MX_GPIO_Init>
  MX_DMA_Init();
 8000236:	f000 fc83 	bl	8000b40 <MX_DMA_Init>
  MX_TIM2_Init();
 800023a:	f000 fbe9 	bl	8000a10 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 800023e:	f009 fcc1 	bl	8009bc4 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000242:	f000 fb45 	bl	80008d0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000246:	f000 fc2f 	bl	8000aa8 <MX_TIM3_Init>
  //***********************************************************************************************************************************************************
  //***********************************************************************************************************************************************************
  //***********************************************************************************************************************************************************
  //***********************************************************************************************************************************************************
  //***********************************************************************************************************************************************************
  HAL_TIM_Base_Start_IT(&htim2);        // 重启定时
 800024a:	4851      	ldr	r0, [pc, #324]	; (8000390 <main+0x16c>)
 800024c:	f004 fd2e 	bl	8004cac <HAL_TIM_Base_Start_IT>
  for (int i = 0; i < MyKeyColNum; i++) // 全部置为0
 8000250:	2300      	movs	r3, #0
 8000252:	627b      	str	r3, [r7, #36]	; 0x24
 8000254:	e00e      	b.n	8000274 <main+0x50>
  {
    MyKeyGPIOResetCol(i);
 8000256:	4a4f      	ldr	r2, [pc, #316]	; (8000394 <main+0x170>)
 8000258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800025a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800025e:	4a4e      	ldr	r2, [pc, #312]	; (8000398 <main+0x174>)
 8000260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000262:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000266:	2200      	movs	r2, #0
 8000268:	4619      	mov	r1, r3
 800026a:	f002 facc 	bl	8002806 <HAL_GPIO_WritePin>
  for (int i = 0; i < MyKeyColNum; i++) // 全部置为0
 800026e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000270:	3301      	adds	r3, #1
 8000272:	627b      	str	r3, [r7, #36]	; 0x24
 8000274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000276:	2b0a      	cmp	r3, #10
 8000278:	dded      	ble.n	8000256 <main+0x32>
  }
  TFT_SyncInit(GPIOB, GPIO_PIN_4,
 800027a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800027e:	9307      	str	r3, [sp, #28]
 8000280:	4b46      	ldr	r3, [pc, #280]	; (800039c <main+0x178>)
 8000282:	9306      	str	r3, [sp, #24]
 8000284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000288:	9305      	str	r3, [sp, #20]
 800028a:	4b44      	ldr	r3, [pc, #272]	; (800039c <main+0x178>)
 800028c:	9304      	str	r3, [sp, #16]
 800028e:	2380      	movs	r3, #128	; 0x80
 8000290:	9303      	str	r3, [sp, #12]
 8000292:	4b42      	ldr	r3, [pc, #264]	; (800039c <main+0x178>)
 8000294:	9302      	str	r3, [sp, #8]
 8000296:	2340      	movs	r3, #64	; 0x40
 8000298:	9301      	str	r3, [sp, #4]
 800029a:	4b40      	ldr	r3, [pc, #256]	; (800039c <main+0x178>)
 800029c:	9300      	str	r3, [sp, #0]
 800029e:	2320      	movs	r3, #32
 80002a0:	4a3e      	ldr	r2, [pc, #248]	; (800039c <main+0x178>)
 80002a2:	2110      	movs	r1, #16
 80002a4:	483d      	ldr	r0, [pc, #244]	; (800039c <main+0x178>)
 80002a6:	f000 feeb 	bl	8001080 <TFT_SyncInit>
               GPIOB, GPIO_PIN_6,
               GPIOB, GPIO_PIN_7,
               GPIOB, GPIO_PIN_8,
               GPIOB, GPIO_PIN_9);

  MyTFT_SyncPrintChar('O', 0xff00);
 80002aa:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80002ae:	204f      	movs	r0, #79	; 0x4f
 80002b0:	f001 fa8a 	bl	80017c8 <MyTFT_SyncPrintChar>
  MyTFT_SyncPrintChar('K', 0x00ff);
 80002b4:	21ff      	movs	r1, #255	; 0xff
 80002b6:	204b      	movs	r0, #75	; 0x4b
 80002b8:	f001 fa86 	bl	80017c8 <MyTFT_SyncPrintChar>
  MyTFT_CloseScreen();
 80002bc:	f001 fad6 	bl	800186c <MyTFT_CloseScreen>

  RGB_SetAllColor32(RGB_Color_BLACK);
 80002c0:	2000      	movs	r0, #0
 80002c2:	f000 fe6d 	bl	8000fa0 <RGB_SetAllColor32>
  RGB_SendLEDData();
 80002c6:	f000 fe59 	bl	8000f7c <RGB_SendLEDData>
    //***********************************************************************************************************************************************************
    //***********************************************************************************************************************************************************
    //***********************************************************************************************************************************************************
    //***********************************************************************************************************************************************************
    //***********************************************************************************************************************************************************
    uint32_t keycode = 0;
 80002ca:	2300      	movs	r3, #0
 80002cc:	623b      	str	r3, [r7, #32]
    uint32_t showCodeNumber = keycode;
 80002ce:	6a3b      	ldr	r3, [r7, #32]
 80002d0:	607b      	str	r3, [r7, #4]
    static uint32_t lastkeycode = 0;
    for (int i = 0; i < sizeof(keyBoardData); i++)
 80002d2:	2300      	movs	r3, #0
 80002d4:	61fb      	str	r3, [r7, #28]
 80002d6:	e007      	b.n	80002e8 <main+0xc4>
    {
      keyBoardData[i] = 0;
 80002d8:	4a31      	ldr	r2, [pc, #196]	; (80003a0 <main+0x17c>)
 80002da:	69fb      	ldr	r3, [r7, #28]
 80002dc:	4413      	add	r3, r2
 80002de:	2200      	movs	r2, #0
 80002e0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < sizeof(keyBoardData); i++)
 80002e2:	69fb      	ldr	r3, [r7, #28]
 80002e4:	3301      	adds	r3, #1
 80002e6:	61fb      	str	r3, [r7, #28]
 80002e8:	69fb      	ldr	r3, [r7, #28]
 80002ea:	2b11      	cmp	r3, #17
 80002ec:	d9f4      	bls.n	80002d8 <main+0xb4>
    }
    int num = 0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	61bb      	str	r3, [r7, #24]
    char fnIsDown = 0;
 80002f2:	2300      	movs	r3, #0
 80002f4:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < MyKeyRowNum; i++)
 80002f6:	2300      	movs	r3, #0
 80002f8:	613b      	str	r3, [r7, #16]
 80002fa:	e0a5      	b.n	8000448 <main+0x224>
    {
      for (int j = 0; j < MyKeyColNum; j++)
 80002fc:	2300      	movs	r3, #0
 80002fe:	60fb      	str	r3, [r7, #12]
 8000300:	e09b      	b.n	800043a <main+0x216>
      {
        if (MyKeysNowState[i][j])
 8000302:	4928      	ldr	r1, [pc, #160]	; (80003a4 <main+0x180>)
 8000304:	693a      	ldr	r2, [r7, #16]
 8000306:	4613      	mov	r3, r2
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	4413      	add	r3, r2
 800030c:	005b      	lsls	r3, r3, #1
 800030e:	4413      	add	r3, r2
 8000310:	18ca      	adds	r2, r1, r3
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	4413      	add	r3, r2
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b00      	cmp	r3, #0
 800031a:	f000 808b 	beq.w	8000434 <main+0x210>
        {
          if ((MyKeysCode_Code[i][j] & 0xf0) == 0xf0)
 800031e:	4922      	ldr	r1, [pc, #136]	; (80003a8 <main+0x184>)
 8000320:	693a      	ldr	r2, [r7, #16]
 8000322:	4613      	mov	r3, r2
 8000324:	009b      	lsls	r3, r3, #2
 8000326:	4413      	add	r3, r2
 8000328:	005b      	lsls	r3, r3, #1
 800032a:	4413      	add	r3, r2
 800032c:	18ca      	adds	r2, r1, r3
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	4413      	add	r3, r2
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000338:	2bf0      	cmp	r3, #240	; 0xf0
 800033a:	d137      	bne.n	80003ac <main+0x188>
          {
            if ((MyKeysCode_Code[i][j] == 0xff))
 800033c:	491a      	ldr	r1, [pc, #104]	; (80003a8 <main+0x184>)
 800033e:	693a      	ldr	r2, [r7, #16]
 8000340:	4613      	mov	r3, r2
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	4413      	add	r3, r2
 8000346:	005b      	lsls	r3, r3, #1
 8000348:	4413      	add	r3, r2
 800034a:	18ca      	adds	r2, r1, r3
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	4413      	add	r3, r2
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	2bff      	cmp	r3, #255	; 0xff
 8000354:	d102      	bne.n	800035c <main+0x138>
            {
              fnIsDown = 1; // fnfnfn
 8000356:	2301      	movs	r3, #1
 8000358:	75fb      	strb	r3, [r7, #23]
 800035a:	e05c      	b.n	8000416 <main+0x1f2>
            }
            else
            {
              keyBoardData[0] |= (1 << (MyKeysCode_Code[i][j] & 0x0f));//特殊按键
 800035c:	4b10      	ldr	r3, [pc, #64]	; (80003a0 <main+0x17c>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	b259      	sxtb	r1, r3
 8000362:	4811      	ldr	r0, [pc, #68]	; (80003a8 <main+0x184>)
 8000364:	693a      	ldr	r2, [r7, #16]
 8000366:	4613      	mov	r3, r2
 8000368:	009b      	lsls	r3, r3, #2
 800036a:	4413      	add	r3, r2
 800036c:	005b      	lsls	r3, r3, #1
 800036e:	4413      	add	r3, r2
 8000370:	18c2      	adds	r2, r0, r3
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	4413      	add	r3, r2
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	f003 030f 	and.w	r3, r3, #15
 800037c:	2201      	movs	r2, #1
 800037e:	fa02 f303 	lsl.w	r3, r2, r3
 8000382:	b25b      	sxtb	r3, r3
 8000384:	430b      	orrs	r3, r1
 8000386:	b25b      	sxtb	r3, r3
 8000388:	b2da      	uxtb	r2, r3
 800038a:	4b05      	ldr	r3, [pc, #20]	; (80003a0 <main+0x17c>)
 800038c:	701a      	strb	r2, [r3, #0]
 800038e:	e042      	b.n	8000416 <main+0x1f2>
 8000390:	2000027c 	.word	0x2000027c
 8000394:	20000000 	.word	0x20000000
 8000398:	2000002c 	.word	0x2000002c
 800039c:	40010c00 	.word	0x40010c00
 80003a0:	20000668 	.word	0x20000668
 80003a4:	200005e4 	.word	0x200005e4
 80003a8:	0800a3f0 	.word	0x0800a3f0
            }
          }
          else
          {
            keyBoardData[(MyKeysCode_Code[i][j] / 8) + 1] |= (1 << (MyKeysCode_Code[i][j] % 8));//普通按键
 80003ac:	49a1      	ldr	r1, [pc, #644]	; (8000634 <main+0x410>)
 80003ae:	693a      	ldr	r2, [r7, #16]
 80003b0:	4613      	mov	r3, r2
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	4413      	add	r3, r2
 80003b6:	005b      	lsls	r3, r3, #1
 80003b8:	4413      	add	r3, r2
 80003ba:	18ca      	adds	r2, r1, r3
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	4413      	add	r3, r2
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	08db      	lsrs	r3, r3, #3
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	3301      	adds	r3, #1
 80003c8:	4a9b      	ldr	r2, [pc, #620]	; (8000638 <main+0x414>)
 80003ca:	5cd3      	ldrb	r3, [r2, r3]
 80003cc:	b259      	sxtb	r1, r3
 80003ce:	4899      	ldr	r0, [pc, #612]	; (8000634 <main+0x410>)
 80003d0:	693a      	ldr	r2, [r7, #16]
 80003d2:	4613      	mov	r3, r2
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	4413      	add	r3, r2
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	4413      	add	r3, r2
 80003dc:	18c2      	adds	r2, r0, r3
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	4413      	add	r3, r2
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	f003 0307 	and.w	r3, r3, #7
 80003e8:	2201      	movs	r2, #1
 80003ea:	fa02 f303 	lsl.w	r3, r2, r3
 80003ee:	b25b      	sxtb	r3, r3
 80003f0:	430b      	orrs	r3, r1
 80003f2:	b258      	sxtb	r0, r3
 80003f4:	498f      	ldr	r1, [pc, #572]	; (8000634 <main+0x410>)
 80003f6:	693a      	ldr	r2, [r7, #16]
 80003f8:	4613      	mov	r3, r2
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	4413      	add	r3, r2
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	4413      	add	r3, r2
 8000402:	18ca      	adds	r2, r1, r3
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	4413      	add	r3, r2
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	08db      	lsrs	r3, r3, #3
 800040c:	b2db      	uxtb	r3, r3
 800040e:	3301      	adds	r3, #1
 8000410:	b2c1      	uxtb	r1, r0
 8000412:	4a89      	ldr	r2, [pc, #548]	; (8000638 <main+0x414>)
 8000414:	54d1      	strb	r1, [r2, r3]
          }
          keycode = MyKeysCode_Code[i][j];
 8000416:	4987      	ldr	r1, [pc, #540]	; (8000634 <main+0x410>)
 8000418:	693a      	ldr	r2, [r7, #16]
 800041a:	4613      	mov	r3, r2
 800041c:	009b      	lsls	r3, r3, #2
 800041e:	4413      	add	r3, r2
 8000420:	005b      	lsls	r3, r3, #1
 8000422:	4413      	add	r3, r2
 8000424:	18ca      	adds	r2, r1, r3
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	4413      	add	r3, r2
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	623b      	str	r3, [r7, #32]
          num++;
 800042e:	69bb      	ldr	r3, [r7, #24]
 8000430:	3301      	adds	r3, #1
 8000432:	61bb      	str	r3, [r7, #24]
      for (int j = 0; j < MyKeyColNum; j++)
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	3301      	adds	r3, #1
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	2b0a      	cmp	r3, #10
 800043e:	f77f af60 	ble.w	8000302 <main+0xde>
    for (int i = 0; i < MyKeyRowNum; i++)
 8000442:	693b      	ldr	r3, [r7, #16]
 8000444:	3301      	adds	r3, #1
 8000446:	613b      	str	r3, [r7, #16]
 8000448:	693b      	ldr	r3, [r7, #16]
 800044a:	2b0b      	cmp	r3, #11
 800044c:	f77f af56 	ble.w	80002fc <main+0xd8>
    static char state = 0;
    static char RCode = 0;
    static char GCode = 0;
    static char BCode = 0;
    static char nowCode = 0;
    if (fnIsDown)
 8000450:	7dfb      	ldrb	r3, [r7, #23]
 8000452:	2b00      	cmp	r3, #0
 8000454:	f000 8131 	beq.w	80006ba <main+0x496>
    {
      nowCode = 0;
 8000458:	4b78      	ldr	r3, [pc, #480]	; (800063c <main+0x418>)
 800045a:	2200      	movs	r2, #0
 800045c:	701a      	strb	r2, [r3, #0]
      if (keyBoardData[(0x52 / 8) + 1] & (1 << (0x52 % 8))) // up
 800045e:	4b76      	ldr	r3, [pc, #472]	; (8000638 <main+0x414>)
 8000460:	7adb      	ldrb	r3, [r3, #11]
 8000462:	f003 0304 	and.w	r3, r3, #4
 8000466:	2b00      	cmp	r3, #0
 8000468:	d002      	beq.n	8000470 <main+0x24c>
      {
        state = 1;
 800046a:	4b75      	ldr	r3, [pc, #468]	; (8000640 <main+0x41c>)
 800046c:	2201      	movs	r2, #1
 800046e:	701a      	strb	r2, [r3, #0]
      }
      if (keyBoardData[(0x51 / 8) + 1] & (1 << (0x51 % 8))) // down
 8000470:	4b71      	ldr	r3, [pc, #452]	; (8000638 <main+0x414>)
 8000472:	7adb      	ldrb	r3, [r3, #11]
 8000474:	f003 0302 	and.w	r3, r3, #2
 8000478:	2b00      	cmp	r3, #0
 800047a:	d002      	beq.n	8000482 <main+0x25e>
      {
        state = 0;
 800047c:	4b70      	ldr	r3, [pc, #448]	; (8000640 <main+0x41c>)
 800047e:	2200      	movs	r2, #0
 8000480:	701a      	strb	r2, [r3, #0]
      }
      if (keyBoardData[(0x50 / 8) + 1] & (1 << (0x50 % 8))) // left
 8000482:	4b6d      	ldr	r3, [pc, #436]	; (8000638 <main+0x414>)
 8000484:	7adb      	ldrb	r3, [r3, #11]
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <main+0x26e>
      {
        MyTFT_CloseScreen();
 800048e:	f001 f9ed 	bl	800186c <MyTFT_CloseScreen>
      }
      if (keyBoardData[(0x4f / 8) + 1] & (1 << (0x4f % 8))) // right
 8000492:	4b69      	ldr	r3, [pc, #420]	; (8000638 <main+0x414>)
 8000494:	7a9b      	ldrb	r3, [r3, #10]
 8000496:	b25b      	sxtb	r3, r3
 8000498:	2b00      	cmp	r3, #0
 800049a:	da01      	bge.n	80004a0 <main+0x27c>
      {
        MyTFT_OpenScreen();
 800049c:	f001 f9d6 	bl	800184c <MyTFT_OpenScreen>

      if (keyBoardData[(0x62 / 8) + 1] & (1 << (0x62 % 8))) //0
      {
        // state = 0;
      }
      if (keyBoardData[(0x59 / 8) + 1] & (1 << (0x59 % 8))) //1
 80004a0:	4b65      	ldr	r3, [pc, #404]	; (8000638 <main+0x414>)
 80004a2:	7b1b      	ldrb	r3, [r3, #12]
 80004a4:	f003 0302 	and.w	r3, r3, #2
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d006      	beq.n	80004ba <main+0x296>
      {
        nowCode|=0x01;
 80004ac:	4b63      	ldr	r3, [pc, #396]	; (800063c <main+0x418>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	f043 0301 	orr.w	r3, r3, #1
 80004b4:	b2da      	uxtb	r2, r3
 80004b6:	4b61      	ldr	r3, [pc, #388]	; (800063c <main+0x418>)
 80004b8:	701a      	strb	r2, [r3, #0]
        // state = 0x59;
      }
      if (keyBoardData[(0x5a / 8) + 1] & (1 << (0x5a % 8))) //2
 80004ba:	4b5f      	ldr	r3, [pc, #380]	; (8000638 <main+0x414>)
 80004bc:	7b1b      	ldrb	r3, [r3, #12]
 80004be:	f003 0304 	and.w	r3, r3, #4
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d006      	beq.n	80004d4 <main+0x2b0>
      {
        nowCode|=0x02;
 80004c6:	4b5d      	ldr	r3, [pc, #372]	; (800063c <main+0x418>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	f043 0302 	orr.w	r3, r3, #2
 80004ce:	b2da      	uxtb	r2, r3
 80004d0:	4b5a      	ldr	r3, [pc, #360]	; (800063c <main+0x418>)
 80004d2:	701a      	strb	r2, [r3, #0]
        // state = 0x5a;
      }
      if (keyBoardData[(0x5b / 8) + 1] & (1 << (0x5b % 8))) //3
 80004d4:	4b58      	ldr	r3, [pc, #352]	; (8000638 <main+0x414>)
 80004d6:	7b1b      	ldrb	r3, [r3, #12]
 80004d8:	f003 0308 	and.w	r3, r3, #8
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d006      	beq.n	80004ee <main+0x2ca>
      {
        nowCode|=0x04;
 80004e0:	4b56      	ldr	r3, [pc, #344]	; (800063c <main+0x418>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	f043 0304 	orr.w	r3, r3, #4
 80004e8:	b2da      	uxtb	r2, r3
 80004ea:	4b54      	ldr	r3, [pc, #336]	; (800063c <main+0x418>)
 80004ec:	701a      	strb	r2, [r3, #0]
        // state = 0x5b;
      }
      if (keyBoardData[(0x5c / 8) + 1] & (1 << (0x5c % 8))) //4
 80004ee:	4b52      	ldr	r3, [pc, #328]	; (8000638 <main+0x414>)
 80004f0:	7b1b      	ldrb	r3, [r3, #12]
 80004f2:	f003 0310 	and.w	r3, r3, #16
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d006      	beq.n	8000508 <main+0x2e4>
      {
        nowCode|=0x08;
 80004fa:	4b50      	ldr	r3, [pc, #320]	; (800063c <main+0x418>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	f043 0308 	orr.w	r3, r3, #8
 8000502:	b2da      	uxtb	r2, r3
 8000504:	4b4d      	ldr	r3, [pc, #308]	; (800063c <main+0x418>)
 8000506:	701a      	strb	r2, [r3, #0]
        // state = 0x5c;
      }
      if (keyBoardData[(0x5d / 8) + 1] & (1 << (0x5d % 8))) //5
 8000508:	4b4b      	ldr	r3, [pc, #300]	; (8000638 <main+0x414>)
 800050a:	7b1b      	ldrb	r3, [r3, #12]
 800050c:	f003 0320 	and.w	r3, r3, #32
 8000510:	2b00      	cmp	r3, #0
 8000512:	d006      	beq.n	8000522 <main+0x2fe>
      {
        nowCode|=0x10;
 8000514:	4b49      	ldr	r3, [pc, #292]	; (800063c <main+0x418>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	f043 0310 	orr.w	r3, r3, #16
 800051c:	b2da      	uxtb	r2, r3
 800051e:	4b47      	ldr	r3, [pc, #284]	; (800063c <main+0x418>)
 8000520:	701a      	strb	r2, [r3, #0]
        // state = 0x5d;
      }
      if (keyBoardData[(0x5e / 8) + 1] & (1 << (0x5e % 8))) //6
 8000522:	4b45      	ldr	r3, [pc, #276]	; (8000638 <main+0x414>)
 8000524:	7b1b      	ldrb	r3, [r3, #12]
 8000526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800052a:	2b00      	cmp	r3, #0
 800052c:	d006      	beq.n	800053c <main+0x318>
      {
        nowCode|=0x20;
 800052e:	4b43      	ldr	r3, [pc, #268]	; (800063c <main+0x418>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	f043 0320 	orr.w	r3, r3, #32
 8000536:	b2da      	uxtb	r2, r3
 8000538:	4b40      	ldr	r3, [pc, #256]	; (800063c <main+0x418>)
 800053a:	701a      	strb	r2, [r3, #0]
        // state = 0x5e;
      }
      if (keyBoardData[(0x5f / 8) + 1] & (1 << (0x5f % 8))) //7
 800053c:	4b3e      	ldr	r3, [pc, #248]	; (8000638 <main+0x414>)
 800053e:	7b1b      	ldrb	r3, [r3, #12]
 8000540:	b25b      	sxtb	r3, r3
 8000542:	2b00      	cmp	r3, #0
 8000544:	da06      	bge.n	8000554 <main+0x330>
      {
        nowCode|=0x40;
 8000546:	4b3d      	ldr	r3, [pc, #244]	; (800063c <main+0x418>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800054e:	b2da      	uxtb	r2, r3
 8000550:	4b3a      	ldr	r3, [pc, #232]	; (800063c <main+0x418>)
 8000552:	701a      	strb	r2, [r3, #0]
        // state = 0x5f;
      }
      if (keyBoardData[(0x60 / 8) + 1] & (1 << (0x60 % 8))) //8
 8000554:	4b38      	ldr	r3, [pc, #224]	; (8000638 <main+0x414>)
 8000556:	7b5b      	ldrb	r3, [r3, #13]
 8000558:	f003 0301 	and.w	r3, r3, #1
 800055c:	2b00      	cmp	r3, #0
 800055e:	d006      	beq.n	800056e <main+0x34a>
      {
        nowCode|=0x80;
 8000560:	4b36      	ldr	r3, [pc, #216]	; (800063c <main+0x418>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4b34      	ldr	r3, [pc, #208]	; (800063c <main+0x418>)
 800056c:	701a      	strb	r2, [r3, #0]
      }
      if (keyBoardData[(0x61 / 8) + 1] & (1 << (0x61 % 8))) //9
      {
        // state = 0x61;
      }
      if (keyBoardData[(0x15 / 8) + 1] & (1 << (0x15 % 8))) //r
 800056e:	4b32      	ldr	r3, [pc, #200]	; (8000638 <main+0x414>)
 8000570:	78db      	ldrb	r3, [r3, #3]
 8000572:	f003 0320 	and.w	r3, r3, #32
 8000576:	2b00      	cmp	r3, #0
 8000578:	d003      	beq.n	8000582 <main+0x35e>
      {
        RCode=nowCode;
 800057a:	4b30      	ldr	r3, [pc, #192]	; (800063c <main+0x418>)
 800057c:	781a      	ldrb	r2, [r3, #0]
 800057e:	4b31      	ldr	r3, [pc, #196]	; (8000644 <main+0x420>)
 8000580:	701a      	strb	r2, [r3, #0]
        // state = 0x61;
      }
      if (keyBoardData[(0x0a / 8) + 1] & (1 << (0x0a % 8))) //g
 8000582:	4b2d      	ldr	r3, [pc, #180]	; (8000638 <main+0x414>)
 8000584:	789b      	ldrb	r3, [r3, #2]
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	2b00      	cmp	r3, #0
 800058c:	d003      	beq.n	8000596 <main+0x372>
      {
        GCode=nowCode;
 800058e:	4b2b      	ldr	r3, [pc, #172]	; (800063c <main+0x418>)
 8000590:	781a      	ldrb	r2, [r3, #0]
 8000592:	4b2d      	ldr	r3, [pc, #180]	; (8000648 <main+0x424>)
 8000594:	701a      	strb	r2, [r3, #0]
        // state = 0x61;
      }
      if (keyBoardData[(0x05 / 8) + 1] & (1 << (0x05 % 8))) //b
 8000596:	4b28      	ldr	r3, [pc, #160]	; (8000638 <main+0x414>)
 8000598:	785b      	ldrb	r3, [r3, #1]
 800059a:	f003 0320 	and.w	r3, r3, #32
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d003      	beq.n	80005aa <main+0x386>
      {
        BCode=nowCode;
 80005a2:	4b26      	ldr	r3, [pc, #152]	; (800063c <main+0x418>)
 80005a4:	781a      	ldrb	r2, [r3, #0]
 80005a6:	4b29      	ldr	r3, [pc, #164]	; (800064c <main+0x428>)
 80005a8:	701a      	strb	r2, [r3, #0]
        // state = 0x61;
      }

      ////////
      if (keyBoardData[(0x3a / 8) + 1] & (1 << (0x3a % 8))) // f1
 80005aa:	4b23      	ldr	r3, [pc, #140]	; (8000638 <main+0x414>)
 80005ac:	7a1b      	ldrb	r3, [r3, #8]
 80005ae:	f003 0304 	and.w	r3, r3, #4
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d002      	beq.n	80005bc <main+0x398>
      {
        keyBoardData[sizeof(keyBoardData) - DataExLen] = 0x80;
 80005b6:	4b20      	ldr	r3, [pc, #128]	; (8000638 <main+0x414>)
 80005b8:	2280      	movs	r2, #128	; 0x80
 80005ba:	741a      	strb	r2, [r3, #16]
      }

      if (keyBoardData[(0x3b / 8) + 1] & (1 << (0x3b % 8))) // f2
 80005bc:	4b1e      	ldr	r3, [pc, #120]	; (8000638 <main+0x414>)
 80005be:	7a1b      	ldrb	r3, [r3, #8]
 80005c0:	f003 0308 	and.w	r3, r3, #8
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d002      	beq.n	80005ce <main+0x3aa>
      {
        keyBoardData[sizeof(keyBoardData) - DataExLen]= 0x81;
 80005c8:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <main+0x414>)
 80005ca:	2281      	movs	r2, #129	; 0x81
 80005cc:	741a      	strb	r2, [r3, #16]
      }
      if (keyBoardData[(0x3c / 8) + 1] & (1 << (0x3c % 8))) // f3
 80005ce:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <main+0x414>)
 80005d0:	7a1b      	ldrb	r3, [r3, #8]
 80005d2:	f003 0310 	and.w	r3, r3, #16
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d002      	beq.n	80005e0 <main+0x3bc>
      {
        keyBoardData[sizeof(keyBoardData) - DataExLen]= 0x82;
 80005da:	4b17      	ldr	r3, [pc, #92]	; (8000638 <main+0x414>)
 80005dc:	2282      	movs	r2, #130	; 0x82
 80005de:	741a      	strb	r2, [r3, #16]
      }
      if (keyBoardData[(0x3d / 8) + 1] & (1 << (0x3d % 8))) // f4
 80005e0:	4b15      	ldr	r3, [pc, #84]	; (8000638 <main+0x414>)
 80005e2:	7a1b      	ldrb	r3, [r3, #8]
 80005e4:	f003 0320 	and.w	r3, r3, #32
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d002      	beq.n	80005f2 <main+0x3ce>
      {
        keyBoardData[sizeof(keyBoardData) - DataExLen]= 0x83;
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <main+0x414>)
 80005ee:	2283      	movs	r2, #131	; 0x83
 80005f0:	741a      	strb	r2, [r3, #16]
      }
      if (keyBoardData[(0x3e / 8) + 1] & (1 << (0x3e % 8))) // f5
 80005f2:	4b11      	ldr	r3, [pc, #68]	; (8000638 <main+0x414>)
 80005f4:	7a1b      	ldrb	r3, [r3, #8]
 80005f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d002      	beq.n	8000604 <main+0x3e0>
      {
        keyBoardData[sizeof(keyBoardData) - DataExLen]= 0x84;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <main+0x414>)
 8000600:	2284      	movs	r2, #132	; 0x84
 8000602:	741a      	strb	r2, [r3, #16]
      }
      if (keyBoardData[(0x3f / 8) + 1] & (1 << (0x3f % 8))) // f6
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <main+0x414>)
 8000606:	7a1b      	ldrb	r3, [r3, #8]
 8000608:	b25b      	sxtb	r3, r3
 800060a:	2b00      	cmp	r3, #0
 800060c:	da02      	bge.n	8000614 <main+0x3f0>
      {
        keyBoardData[sizeof(keyBoardData) - DataExLen]= 0x85;
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <main+0x414>)
 8000610:	2285      	movs	r2, #133	; 0x85
 8000612:	741a      	strb	r2, [r3, #16]
      }
      if (keyBoardData[(0x40 / 8) + 1] & (1 << (0x40 % 8))) // f7
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <main+0x414>)
 8000616:	7a5b      	ldrb	r3, [r3, #9]
 8000618:	f003 0301 	and.w	r3, r3, #1
 800061c:	2b00      	cmp	r3, #0
 800061e:	d002      	beq.n	8000626 <main+0x402>
      {
        keyBoardData[sizeof(keyBoardData) - DataExLen]= 0x86;
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <main+0x414>)
 8000622:	2286      	movs	r2, #134	; 0x86
 8000624:	741a      	strb	r2, [r3, #16]
      }
      if (keyBoardData[(0x41 / 8) + 1] & (1 << (0x41 % 8))) // f8
 8000626:	4b04      	ldr	r3, [pc, #16]	; (8000638 <main+0x414>)
 8000628:	7a5b      	ldrb	r3, [r3, #9]
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	2b00      	cmp	r3, #0
 8000630:	d011      	beq.n	8000656 <main+0x432>
 8000632:	e00d      	b.n	8000650 <main+0x42c>
 8000634:	0800a3f0 	.word	0x0800a3f0
 8000638:	20000668 	.word	0x20000668
 800063c:	20000684 	.word	0x20000684
 8000640:	20000685 	.word	0x20000685
 8000644:	20000686 	.word	0x20000686
 8000648:	20000687 	.word	0x20000687
 800064c:	20000688 	.word	0x20000688
      {
        keyBoardData[sizeof(keyBoardData) - DataExLen]= 0x87;
 8000650:	4b69      	ldr	r3, [pc, #420]	; (80007f8 <main+0x5d4>)
 8000652:	2287      	movs	r2, #135	; 0x87
 8000654:	741a      	strb	r2, [r3, #16]
      }

      
      if (keyBoardData[(0x42 / 8) + 1] & (1 << (0x42 % 8))) // f9
 8000656:	4b68      	ldr	r3, [pc, #416]	; (80007f8 <main+0x5d4>)
 8000658:	7a5b      	ldrb	r3, [r3, #9]
 800065a:	f003 0304 	and.w	r3, r3, #4
 800065e:	2b00      	cmp	r3, #0
 8000660:	d002      	beq.n	8000668 <main+0x444>
      {
        keyBoardData[sizeof(keyBoardData) - DataExLen]= 90; //vol
 8000662:	4b65      	ldr	r3, [pc, #404]	; (80007f8 <main+0x5d4>)
 8000664:	225a      	movs	r2, #90	; 0x5a
 8000666:	741a      	strb	r2, [r3, #16]
      }
      if (keyBoardData[(0x43 / 8) + 1] & (1 << (0x43 % 8))) // f10
 8000668:	4b63      	ldr	r3, [pc, #396]	; (80007f8 <main+0x5d4>)
 800066a:	7a5b      	ldrb	r3, [r3, #9]
 800066c:	f003 0308 	and.w	r3, r3, #8
 8000670:	2b00      	cmp	r3, #0
 8000672:	d002      	beq.n	800067a <main+0x456>
      {
        keyBoardData[sizeof(keyBoardData) - DataExLen]= 100; //vol
 8000674:	4b60      	ldr	r3, [pc, #384]	; (80007f8 <main+0x5d4>)
 8000676:	2264      	movs	r2, #100	; 0x64
 8000678:	741a      	strb	r2, [r3, #16]
      }
      if (keyBoardData[(0x44 / 8) + 1] & (1 << (0x44 % 8))) // f11
 800067a:	4b5f      	ldr	r3, [pc, #380]	; (80007f8 <main+0x5d4>)
 800067c:	7a5b      	ldrb	r3, [r3, #9]
 800067e:	f003 0310 	and.w	r3, r3, #16
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <main+0x468>
      {
        keyBoardData[sizeof(keyBoardData) - DataExLen]= 00; //vol
 8000686:	4b5c      	ldr	r3, [pc, #368]	; (80007f8 <main+0x5d4>)
 8000688:	2200      	movs	r2, #0
 800068a:	741a      	strb	r2, [r3, #16]
      }
      if (keyBoardData[(0x45 / 8) + 1] & (1 << (0x45 % 8))) // f12
 800068c:	4b5a      	ldr	r3, [pc, #360]	; (80007f8 <main+0x5d4>)
 800068e:	7a5b      	ldrb	r3, [r3, #9]
 8000690:	f003 0320 	and.w	r3, r3, #32
 8000694:	2b00      	cmp	r3, #0
 8000696:	d002      	beq.n	800069e <main+0x47a>
      {
        keyBoardData[sizeof(keyBoardData) - DataExLen]= 101; //vol
 8000698:	4b57      	ldr	r3, [pc, #348]	; (80007f8 <main+0x5d4>)
 800069a:	2265      	movs	r2, #101	; 0x65
 800069c:	741a      	strb	r2, [r3, #16]
      }

      for (int i = 0; i < sizeof(keyBoardData) - DataExLen; i++) // fn set zero
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	e007      	b.n	80006b4 <main+0x490>
      {
        keyBoardData[i] = 0;
 80006a4:	4a54      	ldr	r2, [pc, #336]	; (80007f8 <main+0x5d4>)
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	4413      	add	r3, r2
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < sizeof(keyBoardData) - DataExLen; i++) // fn set zero
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	3301      	adds	r3, #1
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	2b0f      	cmp	r3, #15
 80006b8:	d9f4      	bls.n	80006a4 <main+0x480>
      }
    }

    if (counter_01 > 10 * 200)//200ms
 80006ba:	4b50      	ldr	r3, [pc, #320]	; (80007fc <main+0x5d8>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80006c2:	d914      	bls.n	80006ee <main+0x4ca>
    {
      counter_01 = 0;
 80006c4:	4b4d      	ldr	r3, [pc, #308]	; (80007fc <main+0x5d8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
      default:
        state = 0;
        break;
      }*/
      
      RGB_SetAllColor32(RGB_Color(RCode, GCode, BCode));
 80006ca:	4b4d      	ldr	r3, [pc, #308]	; (8000800 <main+0x5dc>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	041a      	lsls	r2, r3, #16
 80006d0:	4b4c      	ldr	r3, [pc, #304]	; (8000804 <main+0x5e0>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	021b      	lsls	r3, r3, #8
 80006d6:	4313      	orrs	r3, r2
 80006d8:	4a4b      	ldr	r2, [pc, #300]	; (8000808 <main+0x5e4>)
 80006da:	7812      	ldrb	r2, [r2, #0]
 80006dc:	4313      	orrs	r3, r2
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 fc5e 	bl	8000fa0 <RGB_SetAllColor32>
      if (fnIsDown)
 80006e4:	7dfb      	ldrb	r3, [r7, #23]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <main+0x4ca>
      {
        RGB_SendLEDData();
 80006ea:	f000 fc47 	bl	8000f7c <RGB_SendLEDData>
      }
    }
    if (lastkeycode != keycode)
 80006ee:	4b47      	ldr	r3, [pc, #284]	; (800080c <main+0x5e8>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	6a3a      	ldr	r2, [r7, #32]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d071      	beq.n	80007dc <main+0x5b8>
    {
      switch (TFTColor)
 80006f8:	4b45      	ldr	r3, [pc, #276]	; (8000810 <main+0x5ec>)
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000700:	4293      	cmp	r3, r2
 8000702:	d02c      	beq.n	800075e <main+0x53a>
 8000704:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000708:	4293      	cmp	r3, r2
 800070a:	dc37      	bgt.n	800077c <main+0x558>
 800070c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000710:	4293      	cmp	r3, r2
 8000712:	d029      	beq.n	8000768 <main+0x544>
 8000714:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000718:	4293      	cmp	r3, r2
 800071a:	dc2f      	bgt.n	800077c <main+0x558>
 800071c:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 8000720:	d00f      	beq.n	8000742 <main+0x51e>
 8000722:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 8000726:	dc29      	bgt.n	800077c <main+0x558>
 8000728:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800072c:	4293      	cmp	r3, r2
 800072e:	d020      	beq.n	8000772 <main+0x54e>
 8000730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000734:	da22      	bge.n	800077c <main+0x558>
 8000736:	2b1f      	cmp	r3, #31
 8000738:	d00c      	beq.n	8000754 <main+0x530>
 800073a:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 800073e:	d005      	beq.n	800074c <main+0x528>
 8000740:	e01c      	b.n	800077c <main+0x558>
      {
      case 0xF800:
        TFTColor = 0x07E0;
 8000742:	4b33      	ldr	r3, [pc, #204]	; (8000810 <main+0x5ec>)
 8000744:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000748:	801a      	strh	r2, [r3, #0]
        break;
 800074a:	e01c      	b.n	8000786 <main+0x562>
      case 0x07E0:
        TFTColor = 0x001F;
 800074c:	4b30      	ldr	r3, [pc, #192]	; (8000810 <main+0x5ec>)
 800074e:	221f      	movs	r2, #31
 8000750:	801a      	strh	r2, [r3, #0]
        break;
 8000752:	e018      	b.n	8000786 <main+0x562>
      case 0x001F:
        TFTColor = 0XFFE0;
 8000754:	4b2e      	ldr	r3, [pc, #184]	; (8000810 <main+0x5ec>)
 8000756:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800075a:	801a      	strh	r2, [r3, #0]
        break;
 800075c:	e013      	b.n	8000786 <main+0x562>
      case 0XFFE0:
        TFTColor = 0XF81F;
 800075e:	4b2c      	ldr	r3, [pc, #176]	; (8000810 <main+0x5ec>)
 8000760:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000764:	801a      	strh	r2, [r3, #0]
        break;
 8000766:	e00e      	b.n	8000786 <main+0x562>
      case 0XF81F:
        TFTColor = 0X07FF;
 8000768:	4b29      	ldr	r3, [pc, #164]	; (8000810 <main+0x5ec>)
 800076a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800076e:	801a      	strh	r2, [r3, #0]
        break;
 8000770:	e009      	b.n	8000786 <main+0x562>
      case 0X07FF:
        TFTColor = 0xF800;
 8000772:	4b27      	ldr	r3, [pc, #156]	; (8000810 <main+0x5ec>)
 8000774:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000778:	801a      	strh	r2, [r3, #0]
        break;
 800077a:	e004      	b.n	8000786 <main+0x562>
      default:
        TFTColor = 0xF800;
 800077c:	4b24      	ldr	r3, [pc, #144]	; (8000810 <main+0x5ec>)
 800077e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000782:	801a      	strh	r2, [r3, #0]
        break;
 8000784:	bf00      	nop
      }
      switch (keycode)
 8000786:	6a3b      	ldr	r3, [r7, #32]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d029      	beq.n	80007e0 <main+0x5bc>
        // MyTFT_SyncPrintChar('8', 0x0000);
        // RGB_SetAllColor32(RGB_Color_BLACK);
        // RGB_SendLEDData();
        break;
      default:
        showCodeNumber = keycode;
 800078c:	6a3b      	ldr	r3, [r7, #32]
 800078e:	607b      	str	r3, [r7, #4]
        if(showCodeNumber>=0x04 && showCodeNumber<=0x1D){
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b03      	cmp	r3, #3
 8000794:	d90e      	bls.n	80007b4 <main+0x590>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2b1d      	cmp	r3, #29
 800079a:	d80b      	bhi.n	80007b4 <main+0x590>
          showCodeNumber += 61;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	333d      	adds	r3, #61	; 0x3d
 80007a0:	607b      	str	r3, [r7, #4]
          MyTFT_SyncPrintChar(showCodeNumber, TFTColor);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	4a1a      	ldr	r2, [pc, #104]	; (8000810 <main+0x5ec>)
 80007a8:	8812      	ldrh	r2, [r2, #0]
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 f80b 	bl	80017c8 <MyTFT_SyncPrintChar>
        
        // MyTFT_SyncPrintChar(num + '0', 0x00ff);
        // RGB_SetAllColor32(RGB_Color(2, 2, 2));
        // RGB_SetColor32(3, RGB_Color_BLUE);
        // RGB_SendLEDData();
        break;
 80007b2:	e017      	b.n	80007e4 <main+0x5c0>
        else if (showCodeNumber == 0x2C)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b2c      	cmp	r3, #44	; 0x2c
 80007b8:	d106      	bne.n	80007c8 <main+0x5a4>
          MyTFT_SyncPrintChar(' ', TFTColor);
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <main+0x5ec>)
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	4619      	mov	r1, r3
 80007c0:	2020      	movs	r0, #32
 80007c2:	f001 f801 	bl	80017c8 <MyTFT_SyncPrintChar>
        break;
 80007c6:	e00d      	b.n	80007e4 <main+0x5c0>
        else if (showCodeNumber == 0x1E)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b1e      	cmp	r3, #30
 80007cc:	d10a      	bne.n	80007e4 <main+0x5c0>
          MyTFT_SyncPrintChar('!', TFTColor);
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <main+0x5ec>)
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	4619      	mov	r1, r3
 80007d4:	2021      	movs	r0, #33	; 0x21
 80007d6:	f000 fff7 	bl	80017c8 <MyTFT_SyncPrintChar>
        break;
 80007da:	e003      	b.n	80007e4 <main+0x5c0>
      }
    }
 80007dc:	bf00      	nop
 80007de:	e002      	b.n	80007e6 <main+0x5c2>
        break;
 80007e0:	bf00      	nop
 80007e2:	e000      	b.n	80007e6 <main+0x5c2>
        break;
 80007e4:	bf00      	nop

    lastkeycode = keycode;
 80007e6:	4a09      	ldr	r2, [pc, #36]	; (800080c <main+0x5e8>)
 80007e8:	6a3b      	ldr	r3, [r7, #32]
 80007ea:	6013      	str	r3, [r2, #0]
    USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&keyBoardData, sizeof(keyBoardData));
 80007ec:	2212      	movs	r2, #18
 80007ee:	4902      	ldr	r1, [pc, #8]	; (80007f8 <main+0x5d4>)
 80007f0:	4808      	ldr	r0, [pc, #32]	; (8000814 <main+0x5f0>)
 80007f2:	f008 f8f7 	bl	80089e4 <USBD_HID_SendReport>
  {
 80007f6:	e568      	b.n	80002ca <main+0xa6>
 80007f8:	20000668 	.word	0x20000668
 80007fc:	2000067c 	.word	0x2000067c
 8000800:	20000687 	.word	0x20000687
 8000804:	20000686 	.word	0x20000686
 8000808:	20000688 	.word	0x20000688
 800080c:	2000068c 	.word	0x2000068c
 8000810:	2000008c 	.word	0x2000008c
 8000814:	2000b19c 	.word	0x2000b19c

08000818 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b096      	sub	sp, #88	; 0x58
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000822:	2228      	movs	r2, #40	; 0x28
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f009 fdaa 	bl	800a380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
 800084a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800084c:	2301      	movs	r3, #1
 800084e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000850:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000854:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800085a:	2301      	movs	r3, #1
 800085c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085e:	2302      	movs	r3, #2
 8000860:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000862:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000866:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000868:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800086c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000872:	4618      	mov	r0, r3
 8000874:	f003 fd36 	bl	80042e4 <HAL_RCC_OscConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800087e:	f000 fb13 	bl	8000ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000882:	230f      	movs	r3, #15
 8000884:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000886:	2302      	movs	r3, #2
 8000888:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800088e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	2102      	movs	r1, #2
 800089e:	4618      	mov	r0, r3
 80008a0:	f003 ffa2 	bl	80047e8 <HAL_RCC_ClockConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008aa:	f000 fafd 	bl	8000ea8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80008ae:	2310      	movs	r3, #16
 80008b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	4618      	mov	r0, r3
 80008ba:	f004 f8f1 	bl	8004aa0 <HAL_RCCEx_PeriphCLKConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80008c4:	f000 faf0 	bl	8000ea8 <Error_Handler>
  }
}
 80008c8:	bf00      	nop
 80008ca:	3758      	adds	r7, #88	; 0x58
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b096      	sub	sp, #88	; 0x58
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]
 80008fe:	615a      	str	r2, [r3, #20]
 8000900:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2220      	movs	r2, #32
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f009 fd39 	bl	800a380 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800090e:	4b3e      	ldr	r3, [pc, #248]	; (8000a08 <MX_TIM1_Init+0x138>)
 8000910:	4a3e      	ldr	r2, [pc, #248]	; (8000a0c <MX_TIM1_Init+0x13c>)
 8000912:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000914:	4b3c      	ldr	r3, [pc, #240]	; (8000a08 <MX_TIM1_Init+0x138>)
 8000916:	2200      	movs	r2, #0
 8000918:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091a:	4b3b      	ldr	r3, [pc, #236]	; (8000a08 <MX_TIM1_Init+0x138>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 89;
 8000920:	4b39      	ldr	r3, [pc, #228]	; (8000a08 <MX_TIM1_Init+0x138>)
 8000922:	2259      	movs	r2, #89	; 0x59
 8000924:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000926:	4b38      	ldr	r3, [pc, #224]	; (8000a08 <MX_TIM1_Init+0x138>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800092c:	4b36      	ldr	r3, [pc, #216]	; (8000a08 <MX_TIM1_Init+0x138>)
 800092e:	2200      	movs	r2, #0
 8000930:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000932:	4b35      	ldr	r3, [pc, #212]	; (8000a08 <MX_TIM1_Init+0x138>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000938:	4833      	ldr	r0, [pc, #204]	; (8000a08 <MX_TIM1_Init+0x138>)
 800093a:	f004 f967 	bl	8004c0c <HAL_TIM_Base_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000944:	f000 fab0 	bl	8000ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800094e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000952:	4619      	mov	r1, r3
 8000954:	482c      	ldr	r0, [pc, #176]	; (8000a08 <MX_TIM1_Init+0x138>)
 8000956:	f004 fde5 	bl	8005524 <HAL_TIM_ConfigClockSource>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000960:	f000 faa2 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000964:	4828      	ldr	r0, [pc, #160]	; (8000a08 <MX_TIM1_Init+0x138>)
 8000966:	f004 fa01 	bl	8004d6c <HAL_TIM_PWM_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000970:	f000 fa9a 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000974:	2300      	movs	r3, #0
 8000976:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800097c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000980:	4619      	mov	r1, r3
 8000982:	4821      	ldr	r0, [pc, #132]	; (8000a08 <MX_TIM1_Init+0x138>)
 8000984:	f005 fa7c 	bl	8005e80 <HAL_TIMEx_MasterConfigSynchronization>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800098e:	f000 fa8b 	bl	8000ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000992:	2360      	movs	r3, #96	; 0x60
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800099a:	2300      	movs	r3, #0
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800099e:	2300      	movs	r3, #0
 80009a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009aa:	2300      	movs	r3, #0
 80009ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b2:	2204      	movs	r2, #4
 80009b4:	4619      	mov	r1, r3
 80009b6:	4814      	ldr	r0, [pc, #80]	; (8000a08 <MX_TIM1_Init+0x138>)
 80009b8:	f004 fcf2 	bl	80053a0 <HAL_TIM_PWM_ConfigChannel>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80009c2:	f000 fa71 	bl	8000ea8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	4619      	mov	r1, r3
 80009e8:	4807      	ldr	r0, [pc, #28]	; (8000a08 <MX_TIM1_Init+0x138>)
 80009ea:	f005 fab5 	bl	8005f58 <HAL_TIMEx_ConfigBreakDeadTime>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80009f4:	f000 fa58 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009f8:	4803      	ldr	r0, [pc, #12]	; (8000a08 <MX_TIM1_Init+0x138>)
 80009fa:	f000 fff9 	bl	80019f0 <HAL_TIM_MspPostInit>
}
 80009fe:	bf00      	nop
 8000a00:	3758      	adds	r7, #88	; 0x58
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000234 	.word	0x20000234
 8000a0c:	40012c00 	.word	0x40012c00

08000a10 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a16:	f107 0308 	add.w	r3, r7, #8
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a24:	463b      	mov	r3, r7
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <MX_TIM2_Init+0x94>)
 8000a2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72 - 1;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <MX_TIM2_Init+0x94>)
 8000a36:	2247      	movs	r2, #71	; 0x47
 8000a38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_TIM2_Init+0x94>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100 - 1;
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_TIM2_Init+0x94>)
 8000a42:	2263      	movs	r2, #99	; 0x63
 8000a44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <MX_TIM2_Init+0x94>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <MX_TIM2_Init+0x94>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a52:	4814      	ldr	r0, [pc, #80]	; (8000aa4 <MX_TIM2_Init+0x94>)
 8000a54:	f004 f8da 	bl	8004c0c <HAL_TIM_Base_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000a5e:	f000 fa23 	bl	8000ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <MX_TIM2_Init+0x94>)
 8000a70:	f004 fd58 	bl	8005524 <HAL_TIM_ConfigClockSource>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000a7a:	f000 fa15 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a86:	463b      	mov	r3, r7
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <MX_TIM2_Init+0x94>)
 8000a8c:	f005 f9f8 	bl	8005e80 <HAL_TIMEx_MasterConfigSynchronization>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000a96:	f000 fa07 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3718      	adds	r7, #24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2000027c 	.word	0x2000027c

08000aa8 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000abc:	463b      	mov	r3, r7
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ac4:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <MX_TIM3_Init+0x90>)
 8000ac6:	4a1d      	ldr	r2, [pc, #116]	; (8000b3c <MX_TIM3_Init+0x94>)
 8000ac8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000aca:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <MX_TIM3_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad0:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <MX_TIM3_Init+0x90>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 71;
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_TIM3_Init+0x90>)
 8000ad8:	2247      	movs	r2, #71	; 0x47
 8000ada:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <MX_TIM3_Init+0x90>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <MX_TIM3_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ae8:	4813      	ldr	r0, [pc, #76]	; (8000b38 <MX_TIM3_Init+0x90>)
 8000aea:	f004 f88f 	bl	8004c0c <HAL_TIM_Base_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000af4:	f000 f9d8 	bl	8000ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000afe:	f107 0308 	add.w	r3, r7, #8
 8000b02:	4619      	mov	r1, r3
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <MX_TIM3_Init+0x90>)
 8000b06:	f004 fd0d 	bl	8005524 <HAL_TIM_ConfigClockSource>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000b10:	f000 f9ca 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b14:	2300      	movs	r3, #0
 8000b16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_TIM3_Init+0x90>)
 8000b22:	f005 f9ad 	bl	8005e80 <HAL_TIMEx_MasterConfigSynchronization>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000b2c:	f000 f9bc 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 8000b30:	bf00      	nop
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	200002c4 	.word	0x200002c4
 8000b3c:	40000400 	.word	0x40000400

08000b40 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_DMA_Init+0x38>)
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <MX_DMA_Init+0x38>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6153      	str	r3, [r2, #20]
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_DMA_Init+0x38>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2100      	movs	r1, #0
 8000b62:	200d      	movs	r0, #13
 8000b64:	f001 f92d 	bl	8001dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000b68:	200d      	movs	r0, #13
 8000b6a:	f001 f946 	bl	8001dfa <HAL_NVIC_EnableIRQ>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000

08000b7c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	f107 0310 	add.w	r3, r7, #16
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b90:	4b45      	ldr	r3, [pc, #276]	; (8000ca8 <MX_GPIO_Init+0x12c>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a44      	ldr	r2, [pc, #272]	; (8000ca8 <MX_GPIO_Init+0x12c>)
 8000b96:	f043 0320 	orr.w	r3, r3, #32
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b42      	ldr	r3, [pc, #264]	; (8000ca8 <MX_GPIO_Init+0x12c>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0320 	and.w	r3, r3, #32
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	4b3f      	ldr	r3, [pc, #252]	; (8000ca8 <MX_GPIO_Init+0x12c>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	4a3e      	ldr	r2, [pc, #248]	; (8000ca8 <MX_GPIO_Init+0x12c>)
 8000bae:	f043 0304 	orr.w	r3, r3, #4
 8000bb2:	6193      	str	r3, [r2, #24]
 8000bb4:	4b3c      	ldr	r3, [pc, #240]	; (8000ca8 <MX_GPIO_Init+0x12c>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	f003 0304 	and.w	r3, r3, #4
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc0:	4b39      	ldr	r3, [pc, #228]	; (8000ca8 <MX_GPIO_Init+0x12c>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a38      	ldr	r2, [pc, #224]	; (8000ca8 <MX_GPIO_Init+0x12c>)
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b36      	ldr	r3, [pc, #216]	; (8000ca8 <MX_GPIO_Init+0x12c>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0310 	and.w	r3, r3, #16
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd8:	4b33      	ldr	r3, [pc, #204]	; (8000ca8 <MX_GPIO_Init+0x12c>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	4a32      	ldr	r2, [pc, #200]	; (8000ca8 <MX_GPIO_Init+0x12c>)
 8000bde:	f043 0308 	orr.w	r3, r3, #8
 8000be2:	6193      	str	r3, [r2, #24]
 8000be4:	4b30      	ldr	r3, [pc, #192]	; (8000ca8 <MX_GPIO_Init+0x12c>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	f003 0308 	and.w	r3, r3, #8
 8000bec:	603b      	str	r3, [r7, #0]
 8000bee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8000bf6:	482d      	ldr	r0, [pc, #180]	; (8000cac <MX_GPIO_Init+0x130>)
 8000bf8:	f001 fe05 	bl	8002806 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2130      	movs	r1, #48	; 0x30
 8000c00:	482b      	ldr	r0, [pc, #172]	; (8000cb0 <MX_GPIO_Init+0x134>)
 8000c02:	f001 fe00 	bl	8002806 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f240 31f3 	movw	r1, #1011	; 0x3f3
 8000c0c:	4829      	ldr	r0, [pc, #164]	; (8000cb4 <MX_GPIO_Init+0x138>)
 8000c0e:	f001 fdfa 	bl	8002806 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 8000c12:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8000c16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2302      	movs	r3, #2
 8000c22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0310 	add.w	r3, r7, #16
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4820      	ldr	r0, [pc, #128]	; (8000cac <MX_GPIO_Init+0x130>)
 8000c2c:	f001 fc40 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8000c30:	2330      	movs	r3, #48	; 0x30
 8000c32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	4619      	mov	r1, r3
 8000c46:	481a      	ldr	r0, [pc, #104]	; (8000cb0 <MX_GPIO_Init+0x134>)
 8000c48:	f001 fc32 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8000c4c:	f240 33f3 	movw	r3, #1011	; 0x3f3
 8000c50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5e:	f107 0310 	add.w	r3, r7, #16
 8000c62:	4619      	mov	r1, r3
 8000c64:	4813      	ldr	r0, [pc, #76]	; (8000cb4 <MX_GPIO_Init+0x138>)
 8000c66:	f001 fc23 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000c6a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000c6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c74:	2302      	movs	r3, #2
 8000c76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <MX_GPIO_Init+0x138>)
 8000c80:	f001 fc16 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
 8000c84:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 8000c88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c92:	f107 0310 	add.w	r3, r7, #16
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_GPIO_Init+0x134>)
 8000c9a:	f001 fc09 	bl	80024b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c9e:	bf00      	nop
 8000ca0:	3720      	adds	r7, #32
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40010800 	.word	0x40010800
 8000cb0:	40011000 	.word	0x40011000
 8000cb4:	40010c00 	.word	0x40010c00

08000cb8 <HAL_TIM_PeriodElapsedCallback>:
//***********************************************************************************************************************************************************
//***********************************************************************************************************************************************************
int myNowCol = 0; // 当前1的列
// int num = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) // 0.1ms 每次中断，换个列进行扫描，大0.1ms
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cc8:	f040 80d5 	bne.w	8000e76 <HAL_TIM_PeriodElapsedCallback+0x1be>
  {
    counter_01++;
 8000ccc:	4b6c      	ldr	r3, [pc, #432]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	4a6b      	ldr	r2, [pc, #428]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000cd4:	6013      	str	r3, [r2, #0]
    MyTFT_SyncCore();
 8000cd6:	f000 fb61 	bl	800139c <MyTFT_SyncCore>
    for (int i = 0; i < MyKeyRowNum; i++) // 读取有的
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	e095      	b.n	8000e0c <HAL_TIM_PeriodElapsedCallback+0x154>
    {
      if (MyKeysCount[i][myNowCol] > 0) //
 8000ce0:	4b68      	ldr	r3, [pc, #416]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000ce2:	6819      	ldr	r1, [r3, #0]
 8000ce4:	4868      	ldr	r0, [pc, #416]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	4413      	add	r3, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	dd1a      	ble.n	8000d32 <HAL_TIM_PeriodElapsedCallback+0x7a>
      {
        MyKeysCount[i][myNowCol] -= MyKeyColNum;
 8000cfc:	4b61      	ldr	r3, [pc, #388]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000cfe:	6819      	ldr	r1, [r3, #0]
 8000d00:	4861      	ldr	r0, [pc, #388]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	4613      	mov	r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4413      	add	r3, r2
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	4413      	add	r3, r2
 8000d0e:	440b      	add	r3, r1
 8000d10:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000d14:	4a5b      	ldr	r2, [pc, #364]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000d16:	6810      	ldr	r0, [r2, #0]
 8000d18:	f1a3 010b 	sub.w	r1, r3, #11
 8000d1c:	4c5a      	ldr	r4, [pc, #360]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	4613      	mov	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	4413      	add	r3, r2
 8000d2a:	4403      	add	r3, r0
 8000d2c:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8000d30:	e069      	b.n	8000e06 <HAL_TIM_PeriodElapsedCallback+0x14e>
      }
      else //
      {
        if (MyKeyGPIOReadRow(i) == GPIO_PIN_SET) // 如果当前的行读取1
 8000d32:	4a56      	ldr	r2, [pc, #344]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d3a:	4955      	ldr	r1, [pc, #340]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d42:	4619      	mov	r1, r3
 8000d44:	4610      	mov	r0, r2
 8000d46:	f001 fd47 	bl	80027d8 <HAL_GPIO_ReadPin>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d10d      	bne.n	8000d6c <HAL_TIM_PeriodElapsedCallback+0xb4>
        {
          MyKeysNowState[i][myNowCol] = 1;
 8000d50:	4b4c      	ldr	r3, [pc, #304]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000d52:	6819      	ldr	r1, [r3, #0]
 8000d54:	484f      	ldr	r0, [pc, #316]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4413      	add	r3, r2
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	4413      	add	r3, r2
 8000d62:	4403      	add	r3, r0
 8000d64:	440b      	add	r3, r1
 8000d66:	2201      	movs	r2, #1
 8000d68:	701a      	strb	r2, [r3, #0]
 8000d6a:	e00c      	b.n	8000d86 <HAL_TIM_PeriodElapsedCallback+0xce>
        }
        else
        {
          MyKeysNowState[i][myNowCol] = 0;
 8000d6c:	4b45      	ldr	r3, [pc, #276]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000d6e:	6819      	ldr	r1, [r3, #0]
 8000d70:	4848      	ldr	r0, [pc, #288]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	4613      	mov	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	4413      	add	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4403      	add	r3, r0
 8000d80:	440b      	add	r3, r1
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
        }
        if (MyKeysLastState[i][myNowCol] != MyKeysNowState[i][myNowCol]) // 按键相比于之前发生了变化，进入冷
 8000d86:	4b3f      	ldr	r3, [pc, #252]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000d88:	6819      	ldr	r1, [r3, #0]
 8000d8a:	4843      	ldr	r0, [pc, #268]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000d8c:	68fa      	ldr	r2, [r7, #12]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	4413      	add	r3, r2
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	4413      	add	r3, r2
 8000d98:	4403      	add	r3, r0
 8000d9a:	440b      	add	r3, r1
 8000d9c:	7819      	ldrb	r1, [r3, #0]
 8000d9e:	4b39      	ldr	r3, [pc, #228]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000da0:	6818      	ldr	r0, [r3, #0]
 8000da2:	4c3c      	ldr	r4, [pc, #240]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000da4:	68fa      	ldr	r2, [r7, #12]
 8000da6:	4613      	mov	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	4413      	add	r3, r2
 8000db0:	4423      	add	r3, r4
 8000db2:	4403      	add	r3, r0
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	4299      	cmp	r1, r3
 8000db8:	d025      	beq.n	8000e06 <HAL_TIM_PeriodElapsedCallback+0x14e>
        {
          MyKeysCount[i][myNowCol] = MyKeyCountMax;
 8000dba:	4b32      	ldr	r3, [pc, #200]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000dbc:	6819      	ldr	r1, [r3, #0]
 8000dbe:	4832      	ldr	r0, [pc, #200]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000dc0:	68fa      	ldr	r2, [r7, #12]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	4413      	add	r3, r2
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	4413      	add	r3, r2
 8000dcc:	440b      	add	r3, r1
 8000dce:	22c8      	movs	r2, #200	; 0xc8
 8000dd0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          MyKeysLastState[i][myNowCol] = MyKeysNowState[i][myNowCol];
 8000dd4:	4b2b      	ldr	r3, [pc, #172]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000dd6:	6818      	ldr	r0, [r3, #0]
 8000dd8:	4b2a      	ldr	r3, [pc, #168]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000dda:	6819      	ldr	r1, [r3, #0]
 8000ddc:	4c2d      	ldr	r4, [pc, #180]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	4613      	mov	r3, r2
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	4413      	add	r3, r2
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	4413      	add	r3, r2
 8000dea:	4423      	add	r3, r4
 8000dec:	4403      	add	r3, r0
 8000dee:	781c      	ldrb	r4, [r3, #0]
 8000df0:	4829      	ldr	r0, [pc, #164]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	4613      	mov	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	4413      	add	r3, r2
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4403      	add	r3, r0
 8000e00:	440b      	add	r3, r1
 8000e02:	4622      	mov	r2, r4
 8000e04:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MyKeyRowNum; i++) // 读取有的
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2b0b      	cmp	r3, #11
 8000e10:	f77f af66 	ble.w	8000ce0 <HAL_TIM_PeriodElapsedCallback+0x28>
        }
      }
    }
    // 换到下一个引
    MyKeyGPIOResetCol(myNowCol);
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a20      	ldr	r2, [pc, #128]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000e1a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e1e:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a1f      	ldr	r2, [pc, #124]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f001 fceb 	bl	8002806 <HAL_GPIO_WritePin>
    myNowCol++;
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	3301      	adds	r3, #1
 8000e36:	4a13      	ldr	r2, [pc, #76]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000e38:	6013      	str	r3, [r2, #0]
    myNowCol %= MyKeyColNum;
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000e3c:	6819      	ldr	r1, [r3, #0]
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000e40:	fb83 2301 	smull	r2, r3, r3, r1
 8000e44:	105a      	asrs	r2, r3, #1
 8000e46:	17cb      	asrs	r3, r1, #31
 8000e48:	1ad2      	subs	r2, r2, r3
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	4413      	add	r3, r2
 8000e54:	1aca      	subs	r2, r1, r3
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000e58:	601a      	str	r2, [r3, #0]
    MyKeyGPIOSetCol(myNowCol);
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a0f      	ldr	r2, [pc, #60]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000e60:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0d      	ldr	r2, [pc, #52]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000e6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4619      	mov	r1, r3
 8000e72:	f001 fcc8 	bl	8002806 <HAL_GPIO_WritePin>
  }
}
 8000e76:	bf00      	nop
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd90      	pop	{r4, r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	2000067c 	.word	0x2000067c
 8000e84:	20000680 	.word	0x20000680
 8000e88:	20000350 	.word	0x20000350
 8000e8c:	20000044 	.word	0x20000044
 8000e90:	20000074 	.word	0x20000074
 8000e94:	200005e4 	.word	0x200005e4
 8000e98:	20000560 	.word	0x20000560
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	2000002c 	.word	0x2000002c
 8000ea4:	2e8ba2e9 	.word	0x2e8ba2e9

08000ea8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eac:	b672      	cpsid	i
}
 8000eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <Error_Handler+0x8>
	...

08000eb4 <RGB_SetColor32>:
/*
功能：设定单个RGB LED的颜色，把结构体中RGB的24BIT转换为0码和1码
参数：LedId为LED序号，Color：定义的颜色结构体
*/
void RGB_SetColor32(int LedId, uint32_t agrb)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
    if (LedId > LED_NUM)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b68      	cmp	r3, #104	; 0x68
 8000ec2:	dc27      	bgt.n	8000f14 <RGB_SetColor32+0x60>
        return; // avoid overflow 防止写入ID大于LED总数
    Color_Buf[LedId] = agrb;
 8000ec4:	4916      	ldr	r1, [pc, #88]	; (8000f20 <RGB_SetColor32+0x6c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 24; i++)
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	e01b      	b.n	8000f0c <RGB_SetColor32+0x58>
    {
        LED_Buf[ZeroHead + LedId * 24 + i] = ((agrb & (0x800000 >> i)) ? (CODE_1) : CODE_0);
 8000ed4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	fa42 f303 	asr.w	r3, r2, r3
 8000ede:	461a      	mov	r2, r3
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <RGB_SetColor32+0x38>
 8000ee8:	213c      	movs	r1, #60	; 0x3c
 8000eea:	e000      	b.n	8000eee <RGB_SetColor32+0x3a>
 8000eec:	2117      	movs	r1, #23
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	4413      	add	r3, r2
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a08      	ldr	r2, [pc, #32]	; (8000f24 <RGB_SetColor32+0x70>)
 8000f02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < 24; i++)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2b17      	cmp	r3, #23
 8000f10:	dde0      	ble.n	8000ed4 <RGB_SetColor32+0x20>
 8000f12:	e000      	b.n	8000f16 <RGB_SetColor32+0x62>
        return; // avoid overflow 防止写入ID大于LED总数
 8000f14:	bf00      	nop
    }
}
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20002eb8 	.word	0x20002eb8
 8000f24:	20000690 	.word	0x20000690

08000f28 <Reset_Load>:
}
/*
功能：最后一行装在24个0，输出24个周期占空比为0的PWM波，作为最后reset延时，这里总时长为24*1.2=30us > 24us(要求大于24us)
*/
void Reset_Load()
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
    uint8_t i;
    for (i = 0; i < ZeroHead; i++)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	71fb      	strb	r3, [r7, #7]
 8000f32:	e007      	b.n	8000f44 <Reset_Load+0x1c>
    {
        LED_Buf[i] = 0;
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	4a10      	ldr	r2, [pc, #64]	; (8000f78 <Reset_Load+0x50>)
 8000f38:	2100      	movs	r1, #0
 8000f3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0; i < ZeroHead; i++)
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	3301      	adds	r3, #1
 8000f42:	71fb      	strb	r3, [r7, #7]
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	2b31      	cmp	r3, #49	; 0x31
 8000f48:	d9f4      	bls.n	8000f34 <Reset_Load+0xc>
    }
    for (i = 0; i < 24; i++)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	71fb      	strb	r3, [r7, #7]
 8000f4e:	e009      	b.n	8000f64 <Reset_Load+0x3c>
    {
        LED_Buf[ZeroHead + LED_NUM * 24 + i] = 0;
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	f603 13f2 	addw	r3, r3, #2546	; 0x9f2
 8000f56:	4a08      	ldr	r2, [pc, #32]	; (8000f78 <Reset_Load+0x50>)
 8000f58:	2100      	movs	r1, #0
 8000f5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0; i < 24; i++)
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	3301      	adds	r3, #1
 8000f62:	71fb      	strb	r3, [r7, #7]
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	2b17      	cmp	r3, #23
 8000f68:	d9f2      	bls.n	8000f50 <Reset_Load+0x28>
    }
}
 8000f6a:	bf00      	nop
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000690 	.word	0x20000690

08000f7c <RGB_SendLEDData>:
功能：发送数组
参数：(&htim1)定时器1，(TIM_CHANNEL_1)通道1，((uint32_t *)Pixel_Buf)待发送数组，
            (Pixel_NUM+1)*24)发送个数，数组行列相乘
*/
void RGB_SendLEDData()
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
    Reset_Load();
 8000f80:	f7ff ffd2 	bl	8000f28 <Reset_Load>
    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t *)LED_Buf, BufLen);
 8000f84:	f640 230a 	movw	r3, #2570	; 0xa0a
 8000f88:	4a03      	ldr	r2, [pc, #12]	; (8000f98 <RGB_SendLEDData+0x1c>)
 8000f8a:	2104      	movs	r1, #4
 8000f8c:	4803      	ldr	r0, [pc, #12]	; (8000f9c <RGB_SendLEDData+0x20>)
 8000f8e:	f003 ff45 	bl	8004e1c <HAL_TIM_PWM_Start_DMA>
    // HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)Pixel_Buf, (Pixel_NUM + 1) * 24);
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000690 	.word	0x20000690
 8000f9c:	20000234 	.word	0x20000234

08000fa0 <RGB_SetAllColor32>:

void RGB_SetAllColor32(uint32_t color)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < LED_NUM; i++)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	e006      	b.n	8000fbc <RGB_SetAllColor32+0x1c>
    {
        RGB_SetColor32(i, color);
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f7ff ff7f 	bl	8000eb4 <RGB_SetColor32>
    for (int i = 0; i < LED_NUM; i++)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2b67      	cmp	r3, #103	; 0x67
 8000fc0:	ddf5      	ble.n	8000fae <RGB_SetAllColor32+0xe>
    }
}
 8000fc2:	bf00      	nop
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <__AddData>:
int syncNowIndex = 0;					  // 当前待传输的数据索引
uint8_t syncNowBit = 0x80;				  // 当前在传的位
int syncTotalLast = 0;					  // 剩余待传输的数据数量
// 增加一个待传输的数据0指令1数据2重置2重置结束
void __AddData(uint8_t dataType, uint8_t data)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	460a      	mov	r2, r1
 8000fd6:	71fb      	strb	r3, [r7, #7]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	71bb      	strb	r3, [r7, #6]
	int newIndex = (syncNowIndex + syncTotalLast) % SYNC_BUF_LEN;
 8000fdc:	4b10      	ldr	r3, [pc, #64]	; (8001020 <__AddData+0x54>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b10      	ldr	r3, [pc, #64]	; (8001024 <__AddData+0x58>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	425a      	negs	r2, r3
 8000fe8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000fec:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8000ff0:	bf58      	it	pl
 8000ff2:	4253      	negpl	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
	syncDataTypeBuffer[newIndex] = dataType;
 8000ff6:	4a0c      	ldr	r2, [pc, #48]	; (8001028 <__AddData+0x5c>)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	79fa      	ldrb	r2, [r7, #7]
 8000ffe:	701a      	strb	r2, [r3, #0]
	syncDataBuffer[newIndex] = data;
 8001000:	4a0a      	ldr	r2, [pc, #40]	; (800102c <__AddData+0x60>)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4413      	add	r3, r2
 8001006:	79ba      	ldrb	r2, [r7, #6]
 8001008:	701a      	strb	r2, [r3, #0]
	syncTotalLast++;
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <__AddData+0x58>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	3301      	adds	r3, #1
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <__AddData+0x58>)
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	2000b08c 	.word	0x2000b08c
 8001024:	2000b090 	.word	0x2000b090
 8001028:	20007088 	.word	0x20007088
 800102c:	20003088 	.word	0x20003088

08001030 <NextData>:
	__AddData(1, (d16))
#define AddData8(d8) __AddData(1, (d8))
#define AddCommand(d8) __AddData(0, (d8))
// 进行下一个数据的传输
void NextData()
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
	if (syncTotalLast)
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <NextData+0x44>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d017      	beq.n	800106c <NextData+0x3c>
	{
		syncNowIndex++;
 800103c:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <NextData+0x48>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	3301      	adds	r3, #1
 8001042:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <NextData+0x48>)
 8001044:	6013      	str	r3, [r2, #0]
		syncNowIndex %= SYNC_BUF_LEN;
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <NextData+0x48>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	425a      	negs	r2, r3
 800104c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001050:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8001054:	bf58      	it	pl
 8001056:	4253      	negpl	r3, r2
 8001058:	4a07      	ldr	r2, [pc, #28]	; (8001078 <NextData+0x48>)
 800105a:	6013      	str	r3, [r2, #0]
		syncPerBitNowState = 0;
 800105c:	4b07      	ldr	r3, [pc, #28]	; (800107c <NextData+0x4c>)
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
		syncTotalLast--;
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <NextData+0x44>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	3b01      	subs	r3, #1
 8001068:	4a02      	ldr	r2, [pc, #8]	; (8001074 <NextData+0x44>)
 800106a:	6013      	str	r3, [r2, #0]
	}
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	2000b090 	.word	0x2000b090
 8001078:	2000b08c 	.word	0x2000b08c
 800107c:	2000b088 	.word	0x2000b088

08001080 <TFT_SyncInit>:
				  GPIO_TypeDef *type_SDA, uint16_t pin_SDA,
				  GPIO_TypeDef *type_RST, uint16_t pin_RST,
				  GPIO_TypeDef *type_DC, uint16_t pin_DC,
				  GPIO_TypeDef *type_CS, uint16_t pin_CS,
				  GPIO_TypeDef *type_BLK, uint16_t pin_BLK)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	461a      	mov	r2, r3
 800108c:	460b      	mov	r3, r1
 800108e:	817b      	strh	r3, [r7, #10]
 8001090:	4613      	mov	r3, r2
 8001092:	813b      	strh	r3, [r7, #8]
	GPIOx_SCL_nowUsing = type_SCL;
 8001094:	4ab5      	ldr	r2, [pc, #724]	; (800136c <TFT_SyncInit+0x2ec>)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	6013      	str	r3, [r2, #0]
	GPIO_Pin_SCL_nowUsing = pin_SCL;
 800109a:	4ab5      	ldr	r2, [pc, #724]	; (8001370 <TFT_SyncInit+0x2f0>)
 800109c:	897b      	ldrh	r3, [r7, #10]
 800109e:	8013      	strh	r3, [r2, #0]
	IO_SCLK_CLR0;
 80010a0:	4bb2      	ldr	r3, [pc, #712]	; (800136c <TFT_SyncInit+0x2ec>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4ab2      	ldr	r2, [pc, #712]	; (8001370 <TFT_SyncInit+0x2f0>)
 80010a6:	8811      	ldrh	r1, [r2, #0]
 80010a8:	2200      	movs	r2, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 fbab 	bl	8002806 <HAL_GPIO_WritePin>
	GPIOx_SDA_nowUsing = type_SDA;
 80010b0:	4ab0      	ldr	r2, [pc, #704]	; (8001374 <TFT_SyncInit+0x2f4>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
	GPIO_Pin_SDA_nowUsing = pin_SDA;
 80010b6:	4ab0      	ldr	r2, [pc, #704]	; (8001378 <TFT_SyncInit+0x2f8>)
 80010b8:	893b      	ldrh	r3, [r7, #8]
 80010ba:	8013      	strh	r3, [r2, #0]
	IO_SDAT_SET1;
 80010bc:	4bad      	ldr	r3, [pc, #692]	; (8001374 <TFT_SyncInit+0x2f4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4aad      	ldr	r2, [pc, #692]	; (8001378 <TFT_SyncInit+0x2f8>)
 80010c2:	8811      	ldrh	r1, [r2, #0]
 80010c4:	2201      	movs	r2, #1
 80010c6:	4618      	mov	r0, r3
 80010c8:	f001 fb9d 	bl	8002806 <HAL_GPIO_WritePin>
	GPIOx_DC_nowUsing = type_DC;
 80010cc:	4aab      	ldr	r2, [pc, #684]	; (800137c <TFT_SyncInit+0x2fc>)
 80010ce:	6a3b      	ldr	r3, [r7, #32]
 80010d0:	6013      	str	r3, [r2, #0]
	GPIO_Pin_DC_nowUsing = pin_DC;
 80010d2:	4aab      	ldr	r2, [pc, #684]	; (8001380 <TFT_SyncInit+0x300>)
 80010d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010d6:	8013      	strh	r3, [r2, #0]
	IO_DC_DAT1;
 80010d8:	4ba8      	ldr	r3, [pc, #672]	; (800137c <TFT_SyncInit+0x2fc>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4aa8      	ldr	r2, [pc, #672]	; (8001380 <TFT_SyncInit+0x300>)
 80010de:	8811      	ldrh	r1, [r2, #0]
 80010e0:	2201      	movs	r2, #1
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 fb8f 	bl	8002806 <HAL_GPIO_WritePin>
	GPIOx_CS_nowUsing = type_CS;
 80010e8:	4aa6      	ldr	r2, [pc, #664]	; (8001384 <TFT_SyncInit+0x304>)
 80010ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ec:	6013      	str	r3, [r2, #0]
	GPIO_Pin_CS_nowUsing = pin_CS;
 80010ee:	4aa6      	ldr	r2, [pc, #664]	; (8001388 <TFT_SyncInit+0x308>)
 80010f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80010f2:	8013      	strh	r3, [r2, #0]
	IO_CS1_End;
 80010f4:	4ba3      	ldr	r3, [pc, #652]	; (8001384 <TFT_SyncInit+0x304>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4aa3      	ldr	r2, [pc, #652]	; (8001388 <TFT_SyncInit+0x308>)
 80010fa:	8811      	ldrh	r1, [r2, #0]
 80010fc:	2201      	movs	r2, #1
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 fb81 	bl	8002806 <HAL_GPIO_WritePin>
	GPIOx_BLK_nowUsing = type_BLK;
 8001104:	4aa1      	ldr	r2, [pc, #644]	; (800138c <TFT_SyncInit+0x30c>)
 8001106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001108:	6013      	str	r3, [r2, #0]
	GPIO_Pin_BLK_nowUsing = pin_BLK;
 800110a:	4aa1      	ldr	r2, [pc, #644]	; (8001390 <TFT_SyncInit+0x310>)
 800110c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800110e:	8013      	strh	r3, [r2, #0]
	IO_BLK1_Open;
 8001110:	4b9e      	ldr	r3, [pc, #632]	; (800138c <TFT_SyncInit+0x30c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a9e      	ldr	r2, [pc, #632]	; (8001390 <TFT_SyncInit+0x310>)
 8001116:	8811      	ldrh	r1, [r2, #0]
 8001118:	2201      	movs	r2, #1
 800111a:	4618      	mov	r0, r3
 800111c:	f001 fb73 	bl	8002806 <HAL_GPIO_WritePin>
	GPIOx_RST_nowUsing = type_RST;
 8001120:	4a9c      	ldr	r2, [pc, #624]	; (8001394 <TFT_SyncInit+0x314>)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	6013      	str	r3, [r2, #0]
	GPIO_Pin_RST_nowUsing = pin_RST;
 8001126:	4a9c      	ldr	r2, [pc, #624]	; (8001398 <TFT_SyncInit+0x318>)
 8001128:	8bbb      	ldrh	r3, [r7, #28]
 800112a:	8013      	strh	r3, [r2, #0]
	IO_RST0_StartRST;
 800112c:	4b99      	ldr	r3, [pc, #612]	; (8001394 <TFT_SyncInit+0x314>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a99      	ldr	r2, [pc, #612]	; (8001398 <TFT_SyncInit+0x318>)
 8001132:	8811      	ldrh	r1, [r2, #0]
 8001134:	2200      	movs	r2, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f001 fb65 	bl	8002806 <HAL_GPIO_WritePin>

	AddReset;
 800113c:	21fa      	movs	r1, #250	; 0xfa
 800113e:	2002      	movs	r0, #2
 8001140:	f7ff ff44 	bl	8000fcc <__AddData>
 8001144:	21fa      	movs	r1, #250	; 0xfa
 8001146:	2002      	movs	r0, #2
 8001148:	f7ff ff40 	bl	8000fcc <__AddData>
 800114c:	21fa      	movs	r1, #250	; 0xfa
 800114e:	2002      	movs	r0, #2
 8001150:	f7ff ff3c 	bl	8000fcc <__AddData>
 8001154:	21fa      	movs	r1, #250	; 0xfa
 8001156:	2002      	movs	r0, #2
 8001158:	f7ff ff38 	bl	8000fcc <__AddData>
 800115c:	21fa      	movs	r1, #250	; 0xfa
 800115e:	2003      	movs	r0, #3
 8001160:	f7ff ff34 	bl	8000fcc <__AddData>
	AddCommand(0x11);
 8001164:	2111      	movs	r1, #17
 8001166:	2000      	movs	r0, #0
 8001168:	f7ff ff30 	bl	8000fcc <__AddData>
	AddDelay;
 800116c:	21fa      	movs	r1, #250	; 0xfa
 800116e:	2004      	movs	r0, #4
 8001170:	f7ff ff2c 	bl	8000fcc <__AddData>
 8001174:	21fa      	movs	r1, #250	; 0xfa
 8001176:	2004      	movs	r0, #4
 8001178:	f7ff ff28 	bl	8000fcc <__AddData>
 800117c:	21fa      	movs	r1, #250	; 0xfa
 800117e:	2004      	movs	r0, #4
 8001180:	f7ff ff24 	bl	8000fcc <__AddData>
 8001184:	21fa      	movs	r1, #250	; 0xfa
 8001186:	2004      	movs	r0, #4
 8001188:	f7ff ff20 	bl	8000fcc <__AddData>
 800118c:	21fa      	movs	r1, #250	; 0xfa
 800118e:	2004      	movs	r0, #4
 8001190:	f7ff ff1c 	bl	8000fcc <__AddData>
	AddCommand(0x36); // 设置内存扫描方向，0X00正常扫描，从上往下，从左往右，RGB方式
 8001194:	2136      	movs	r1, #54	; 0x36
 8001196:	2000      	movs	r0, #0
 8001198:	f7ff ff18 	bl	8000fcc <__AddData>
	else if (USE_HORIZONTAL == 1)
		AddData8(0xC0);
	else if (USE_HORIZONTAL == 2)
		AddData8(0x70);
	else
		AddData8(0xA0);
 800119c:	21a0      	movs	r1, #160	; 0xa0
 800119e:	2001      	movs	r0, #1
 80011a0:	f7ff ff14 	bl	8000fcc <__AddData>

	AddCommand(0x3A); // 数据格式，65K色,565
 80011a4:	213a      	movs	r1, #58	; 0x3a
 80011a6:	2000      	movs	r0, #0
 80011a8:	f7ff ff10 	bl	8000fcc <__AddData>
	AddData8(0x05);
 80011ac:	2105      	movs	r1, #5
 80011ae:	2001      	movs	r0, #1
 80011b0:	f7ff ff0c 	bl	8000fcc <__AddData>

	AddCommand(0xB2); // 帧频设置
 80011b4:	21b2      	movs	r1, #178	; 0xb2
 80011b6:	2000      	movs	r0, #0
 80011b8:	f7ff ff08 	bl	8000fcc <__AddData>
	AddData8(0x0C);
 80011bc:	210c      	movs	r1, #12
 80011be:	2001      	movs	r0, #1
 80011c0:	f7ff ff04 	bl	8000fcc <__AddData>
	AddData8(0x0C);
 80011c4:	210c      	movs	r1, #12
 80011c6:	2001      	movs	r0, #1
 80011c8:	f7ff ff00 	bl	8000fcc <__AddData>
	AddData8(0x00);
 80011cc:	2100      	movs	r1, #0
 80011ce:	2001      	movs	r0, #1
 80011d0:	f7ff fefc 	bl	8000fcc <__AddData>
	AddData8(0x33);
 80011d4:	2133      	movs	r1, #51	; 0x33
 80011d6:	2001      	movs	r0, #1
 80011d8:	f7ff fef8 	bl	8000fcc <__AddData>
	AddData8(0x33);
 80011dc:	2133      	movs	r1, #51	; 0x33
 80011de:	2001      	movs	r0, #1
 80011e0:	f7ff fef4 	bl	8000fcc <__AddData>

	AddCommand(0xB7); // GATE 设置
 80011e4:	21b7      	movs	r1, #183	; 0xb7
 80011e6:	2000      	movs	r0, #0
 80011e8:	f7ff fef0 	bl	8000fcc <__AddData>
	AddData8(0x35);
 80011ec:	2135      	movs	r1, #53	; 0x35
 80011ee:	2001      	movs	r0, #1
 80011f0:	f7ff feec 	bl	8000fcc <__AddData>

	AddCommand(0xBB); // VCOM设置
 80011f4:	21bb      	movs	r1, #187	; 0xbb
 80011f6:	2000      	movs	r0, #0
 80011f8:	f7ff fee8 	bl	8000fcc <__AddData>
	AddData8(0x19);
 80011fc:	2119      	movs	r1, #25
 80011fe:	2001      	movs	r0, #1
 8001200:	f7ff fee4 	bl	8000fcc <__AddData>

	AddCommand(0xC0); // LCM设置,默认0x2c
 8001204:	21c0      	movs	r1, #192	; 0xc0
 8001206:	2000      	movs	r0, #0
 8001208:	f7ff fee0 	bl	8000fcc <__AddData>
	AddData8(0x2C);
 800120c:	212c      	movs	r1, #44	; 0x2c
 800120e:	2001      	movs	r0, #1
 8001210:	f7ff fedc 	bl	8000fcc <__AddData>

	AddCommand(0xC2); // VDV&VRH SET ,默认0x01
 8001214:	21c2      	movs	r1, #194	; 0xc2
 8001216:	2000      	movs	r0, #0
 8001218:	f7ff fed8 	bl	8000fcc <__AddData>
	AddData8(0x01);
 800121c:	2101      	movs	r1, #1
 800121e:	2001      	movs	r0, #1
 8001220:	f7ff fed4 	bl	8000fcc <__AddData>

	AddCommand(0xC3); // VRHS SET，默认0x0b
 8001224:	21c3      	movs	r1, #195	; 0xc3
 8001226:	2000      	movs	r0, #0
 8001228:	f7ff fed0 	bl	8000fcc <__AddData>
	AddData8(0x12);	  // 此处根据实际情况修正
 800122c:	2112      	movs	r1, #18
 800122e:	2001      	movs	r0, #1
 8001230:	f7ff fecc 	bl	8000fcc <__AddData>

	AddCommand(0xC4); // VDV SET，默认0x20
 8001234:	21c4      	movs	r1, #196	; 0xc4
 8001236:	2000      	movs	r0, #0
 8001238:	f7ff fec8 	bl	8000fcc <__AddData>
	AddData8(0x20);
 800123c:	2120      	movs	r1, #32
 800123e:	2001      	movs	r0, #1
 8001240:	f7ff fec4 	bl	8000fcc <__AddData>

	AddCommand(0xC6); // FR SET, 默认0x0F
 8001244:	21c6      	movs	r1, #198	; 0xc6
 8001246:	2000      	movs	r0, #0
 8001248:	f7ff fec0 	bl	8000fcc <__AddData>
	AddData8(0x0F);
 800124c:	210f      	movs	r1, #15
 800124e:	2001      	movs	r0, #1
 8001250:	f7ff febc 	bl	8000fcc <__AddData>

	AddCommand(0xD0); // 电源控制1
 8001254:	21d0      	movs	r1, #208	; 0xd0
 8001256:	2000      	movs	r0, #0
 8001258:	f7ff feb8 	bl	8000fcc <__AddData>
	AddData8(0xA4);	  // 该参数不变
 800125c:	21a4      	movs	r1, #164	; 0xa4
 800125e:	2001      	movs	r0, #1
 8001260:	f7ff feb4 	bl	8000fcc <__AddData>
	AddData8(0xA1);	  // 此处根据实际情况修改
 8001264:	21a1      	movs	r1, #161	; 0xa1
 8001266:	2001      	movs	r0, #1
 8001268:	f7ff feb0 	bl	8000fcc <__AddData>

	AddCommand(0xE0); // 正极性GAMMA调整
 800126c:	21e0      	movs	r1, #224	; 0xe0
 800126e:	2000      	movs	r0, #0
 8001270:	f7ff feac 	bl	8000fcc <__AddData>
	AddData8(0xD0);
 8001274:	21d0      	movs	r1, #208	; 0xd0
 8001276:	2001      	movs	r0, #1
 8001278:	f7ff fea8 	bl	8000fcc <__AddData>
	AddData8(0x04);
 800127c:	2104      	movs	r1, #4
 800127e:	2001      	movs	r0, #1
 8001280:	f7ff fea4 	bl	8000fcc <__AddData>
	AddData8(0x0D);
 8001284:	210d      	movs	r1, #13
 8001286:	2001      	movs	r0, #1
 8001288:	f7ff fea0 	bl	8000fcc <__AddData>
	AddData8(0x11);
 800128c:	2111      	movs	r1, #17
 800128e:	2001      	movs	r0, #1
 8001290:	f7ff fe9c 	bl	8000fcc <__AddData>
	AddData8(0x13);
 8001294:	2113      	movs	r1, #19
 8001296:	2001      	movs	r0, #1
 8001298:	f7ff fe98 	bl	8000fcc <__AddData>
	AddData8(0x2B);
 800129c:	212b      	movs	r1, #43	; 0x2b
 800129e:	2001      	movs	r0, #1
 80012a0:	f7ff fe94 	bl	8000fcc <__AddData>
	AddData8(0x3F);
 80012a4:	213f      	movs	r1, #63	; 0x3f
 80012a6:	2001      	movs	r0, #1
 80012a8:	f7ff fe90 	bl	8000fcc <__AddData>
	AddData8(0x54);
 80012ac:	2154      	movs	r1, #84	; 0x54
 80012ae:	2001      	movs	r0, #1
 80012b0:	f7ff fe8c 	bl	8000fcc <__AddData>
	AddData8(0x4C);
 80012b4:	214c      	movs	r1, #76	; 0x4c
 80012b6:	2001      	movs	r0, #1
 80012b8:	f7ff fe88 	bl	8000fcc <__AddData>
	AddData8(0x18);
 80012bc:	2118      	movs	r1, #24
 80012be:	2001      	movs	r0, #1
 80012c0:	f7ff fe84 	bl	8000fcc <__AddData>
	AddData8(0x0D);
 80012c4:	210d      	movs	r1, #13
 80012c6:	2001      	movs	r0, #1
 80012c8:	f7ff fe80 	bl	8000fcc <__AddData>
	AddData8(0x0B);
 80012cc:	210b      	movs	r1, #11
 80012ce:	2001      	movs	r0, #1
 80012d0:	f7ff fe7c 	bl	8000fcc <__AddData>
	AddData8(0x1F);
 80012d4:	211f      	movs	r1, #31
 80012d6:	2001      	movs	r0, #1
 80012d8:	f7ff fe78 	bl	8000fcc <__AddData>
	AddData8(0x23);
 80012dc:	2123      	movs	r1, #35	; 0x23
 80012de:	2001      	movs	r0, #1
 80012e0:	f7ff fe74 	bl	8000fcc <__AddData>

	AddCommand(0xE1); // 负极性GAMMA调整
 80012e4:	21e1      	movs	r1, #225	; 0xe1
 80012e6:	2000      	movs	r0, #0
 80012e8:	f7ff fe70 	bl	8000fcc <__AddData>
	AddData8(0xD0);
 80012ec:	21d0      	movs	r1, #208	; 0xd0
 80012ee:	2001      	movs	r0, #1
 80012f0:	f7ff fe6c 	bl	8000fcc <__AddData>
	AddData8(0x04);
 80012f4:	2104      	movs	r1, #4
 80012f6:	2001      	movs	r0, #1
 80012f8:	f7ff fe68 	bl	8000fcc <__AddData>
	AddData8(0x0C);
 80012fc:	210c      	movs	r1, #12
 80012fe:	2001      	movs	r0, #1
 8001300:	f7ff fe64 	bl	8000fcc <__AddData>
	AddData8(0x11);
 8001304:	2111      	movs	r1, #17
 8001306:	2001      	movs	r0, #1
 8001308:	f7ff fe60 	bl	8000fcc <__AddData>
	AddData8(0x13);
 800130c:	2113      	movs	r1, #19
 800130e:	2001      	movs	r0, #1
 8001310:	f7ff fe5c 	bl	8000fcc <__AddData>
	AddData8(0x2C);
 8001314:	212c      	movs	r1, #44	; 0x2c
 8001316:	2001      	movs	r0, #1
 8001318:	f7ff fe58 	bl	8000fcc <__AddData>
	AddData8(0x3F);
 800131c:	213f      	movs	r1, #63	; 0x3f
 800131e:	2001      	movs	r0, #1
 8001320:	f7ff fe54 	bl	8000fcc <__AddData>
	AddData8(0x44);
 8001324:	2144      	movs	r1, #68	; 0x44
 8001326:	2001      	movs	r0, #1
 8001328:	f7ff fe50 	bl	8000fcc <__AddData>
	AddData8(0x51);
 800132c:	2151      	movs	r1, #81	; 0x51
 800132e:	2001      	movs	r0, #1
 8001330:	f7ff fe4c 	bl	8000fcc <__AddData>
	AddData8(0x2F);
 8001334:	212f      	movs	r1, #47	; 0x2f
 8001336:	2001      	movs	r0, #1
 8001338:	f7ff fe48 	bl	8000fcc <__AddData>
	AddData8(0x1F);
 800133c:	211f      	movs	r1, #31
 800133e:	2001      	movs	r0, #1
 8001340:	f7ff fe44 	bl	8000fcc <__AddData>
	AddData8(0x1F);
 8001344:	211f      	movs	r1, #31
 8001346:	2001      	movs	r0, #1
 8001348:	f7ff fe40 	bl	8000fcc <__AddData>
	AddData8(0x20);
 800134c:	2120      	movs	r1, #32
 800134e:	2001      	movs	r0, #1
 8001350:	f7ff fe3c 	bl	8000fcc <__AddData>
	AddData8(0x23);
 8001354:	2123      	movs	r1, #35	; 0x23
 8001356:	2001      	movs	r0, #1
 8001358:	f7ff fe38 	bl	8000fcc <__AddData>

	// AddCommand(0x21); // 反显开，默认是0X20，正常模式

	AddCommand(0x29);
 800135c:	2129      	movs	r1, #41	; 0x29
 800135e:	2000      	movs	r0, #0
 8001360:	f7ff fe34 	bl	8000fcc <__AddData>
}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20003058 	.word	0x20003058
 8001370:	2000305c 	.word	0x2000305c
 8001374:	20003060 	.word	0x20003060
 8001378:	20003064 	.word	0x20003064
 800137c:	20003070 	.word	0x20003070
 8001380:	20003074 	.word	0x20003074
 8001384:	20003078 	.word	0x20003078
 8001388:	2000307c 	.word	0x2000307c
 800138c:	20003080 	.word	0x20003080
 8001390:	20003084 	.word	0x20003084
 8001394:	20003068 	.word	0x20003068
 8001398:	2000306c 	.word	0x2000306c

0800139c <MyTFT_SyncCore>:
void MyTFT_SyncCore()
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	if (syncTotalLast > 0)
 80013a0:	4b7f      	ldr	r3, [pc, #508]	; (80015a0 <MyTFT_SyncCore+0x204>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f340 80f9 	ble.w	800159c <MyTFT_SyncCore+0x200>
	{
		switch (syncPerBitNowState)
 80013aa:	4b7e      	ldr	r3, [pc, #504]	; (80015a4 <MyTFT_SyncCore+0x208>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	f200 80f1 	bhi.w	8001596 <MyTFT_SyncCore+0x1fa>
 80013b4:	a201      	add	r2, pc, #4	; (adr r2, 80013bc <MyTFT_SyncCore+0x20>)
 80013b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ba:	bf00      	nop
 80013bc:	080013cd 	.word	0x080013cd
 80013c0:	080014ff 	.word	0x080014ff
 80013c4:	08001567 	.word	0x08001567
 80013c8:	0800157f 	.word	0x0800157f
		{
		case 0: // 未解析

			switch (syncDataTypeBuffer[syncNowIndex]) // 进行解析
 80013cc:	4b76      	ldr	r3, [pc, #472]	; (80015a8 <MyTFT_SyncCore+0x20c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a76      	ldr	r2, [pc, #472]	; (80015ac <MyTFT_SyncCore+0x210>)
 80013d2:	5cd3      	ldrb	r3, [r2, r3]
 80013d4:	2b04      	cmp	r3, #4
 80013d6:	f200 80e0 	bhi.w	800159a <MyTFT_SyncCore+0x1fe>
 80013da:	a201      	add	r2, pc, #4	; (adr r2, 80013e0 <MyTFT_SyncCore+0x44>)
 80013dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e0:	080013f5 	.word	0x080013f5
 80013e4:	08001433 	.word	0x08001433
 80013e8:	08001471 	.word	0x08001471
 80013ec:	080014a5 	.word	0x080014a5
 80013f0:	080014d9 	.word	0x080014d9
			{
			case 0: // 指令
				IO_DC_CMD0;
 80013f4:	4b6e      	ldr	r3, [pc, #440]	; (80015b0 <MyTFT_SyncCore+0x214>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a6e      	ldr	r2, [pc, #440]	; (80015b4 <MyTFT_SyncCore+0x218>)
 80013fa:	8811      	ldrh	r1, [r2, #0]
 80013fc:	2200      	movs	r2, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f001 fa01 	bl	8002806 <HAL_GPIO_WritePin>
				IO_RST1_EndRST;
 8001404:	4b6c      	ldr	r3, [pc, #432]	; (80015b8 <MyTFT_SyncCore+0x21c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a6c      	ldr	r2, [pc, #432]	; (80015bc <MyTFT_SyncCore+0x220>)
 800140a:	8811      	ldrh	r1, [r2, #0]
 800140c:	2201      	movs	r2, #1
 800140e:	4618      	mov	r0, r3
 8001410:	f001 f9f9 	bl	8002806 <HAL_GPIO_WritePin>
				IO_CS0_Start;
 8001414:	4b6a      	ldr	r3, [pc, #424]	; (80015c0 <MyTFT_SyncCore+0x224>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a6a      	ldr	r2, [pc, #424]	; (80015c4 <MyTFT_SyncCore+0x228>)
 800141a:	8811      	ldrh	r1, [r2, #0]
 800141c:	2200      	movs	r2, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f001 f9f1 	bl	8002806 <HAL_GPIO_WritePin>
				syncNowBit = 0x80;
 8001424:	4b68      	ldr	r3, [pc, #416]	; (80015c8 <MyTFT_SyncCore+0x22c>)
 8001426:	2280      	movs	r2, #128	; 0x80
 8001428:	701a      	strb	r2, [r3, #0]
				syncPerBitNowState = 1;
 800142a:	4b5e      	ldr	r3, [pc, #376]	; (80015a4 <MyTFT_SyncCore+0x208>)
 800142c:	2201      	movs	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]
				break;
 8001430:	e064      	b.n	80014fc <MyTFT_SyncCore+0x160>
			case 1: // 数据
				IO_DC_DAT1;
 8001432:	4b5f      	ldr	r3, [pc, #380]	; (80015b0 <MyTFT_SyncCore+0x214>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a5f      	ldr	r2, [pc, #380]	; (80015b4 <MyTFT_SyncCore+0x218>)
 8001438:	8811      	ldrh	r1, [r2, #0]
 800143a:	2201      	movs	r2, #1
 800143c:	4618      	mov	r0, r3
 800143e:	f001 f9e2 	bl	8002806 <HAL_GPIO_WritePin>
				IO_RST1_EndRST;
 8001442:	4b5d      	ldr	r3, [pc, #372]	; (80015b8 <MyTFT_SyncCore+0x21c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a5d      	ldr	r2, [pc, #372]	; (80015bc <MyTFT_SyncCore+0x220>)
 8001448:	8811      	ldrh	r1, [r2, #0]
 800144a:	2201      	movs	r2, #1
 800144c:	4618      	mov	r0, r3
 800144e:	f001 f9da 	bl	8002806 <HAL_GPIO_WritePin>
				IO_CS0_Start;
 8001452:	4b5b      	ldr	r3, [pc, #364]	; (80015c0 <MyTFT_SyncCore+0x224>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a5b      	ldr	r2, [pc, #364]	; (80015c4 <MyTFT_SyncCore+0x228>)
 8001458:	8811      	ldrh	r1, [r2, #0]
 800145a:	2200      	movs	r2, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f001 f9d2 	bl	8002806 <HAL_GPIO_WritePin>
				syncNowBit = 0x80;
 8001462:	4b59      	ldr	r3, [pc, #356]	; (80015c8 <MyTFT_SyncCore+0x22c>)
 8001464:	2280      	movs	r2, #128	; 0x80
 8001466:	701a      	strb	r2, [r3, #0]
				syncPerBitNowState = 1;
 8001468:	4b4e      	ldr	r3, [pc, #312]	; (80015a4 <MyTFT_SyncCore+0x208>)
 800146a:	2201      	movs	r2, #1
 800146c:	701a      	strb	r2, [r3, #0]
				break;
 800146e:	e045      	b.n	80014fc <MyTFT_SyncCore+0x160>
			case 2: // 延时并进行Reset
				IO_RST0_StartRST;
 8001470:	4b51      	ldr	r3, [pc, #324]	; (80015b8 <MyTFT_SyncCore+0x21c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a51      	ldr	r2, [pc, #324]	; (80015bc <MyTFT_SyncCore+0x220>)
 8001476:	8811      	ldrh	r1, [r2, #0]
 8001478:	2200      	movs	r2, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f001 f9c3 	bl	8002806 <HAL_GPIO_WritePin>
				if (syncDataBuffer[syncNowIndex])
 8001480:	4b49      	ldr	r3, [pc, #292]	; (80015a8 <MyTFT_SyncCore+0x20c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a51      	ldr	r2, [pc, #324]	; (80015cc <MyTFT_SyncCore+0x230>)
 8001486:	5cd3      	ldrb	r3, [r2, r3]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d008      	beq.n	800149e <MyTFT_SyncCore+0x102>
				{
					syncDataBuffer[syncNowIndex]--;
 800148c:	4b46      	ldr	r3, [pc, #280]	; (80015a8 <MyTFT_SyncCore+0x20c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a4e      	ldr	r2, [pc, #312]	; (80015cc <MyTFT_SyncCore+0x230>)
 8001492:	5cd2      	ldrb	r2, [r2, r3]
 8001494:	3a01      	subs	r2, #1
 8001496:	b2d1      	uxtb	r1, r2
 8001498:	4a4c      	ldr	r2, [pc, #304]	; (80015cc <MyTFT_SyncCore+0x230>)
 800149a:	54d1      	strb	r1, [r2, r3]
				else
				{
					NextData();
					return;
				}
				break;
 800149c:	e02e      	b.n	80014fc <MyTFT_SyncCore+0x160>
					NextData();
 800149e:	f7ff fdc7 	bl	8001030 <NextData>
					return;
 80014a2:	e07b      	b.n	800159c <MyTFT_SyncCore+0x200>
			case 3: // 延时并重置Reset
				if (syncDataBuffer[syncNowIndex])
 80014a4:	4b40      	ldr	r3, [pc, #256]	; (80015a8 <MyTFT_SyncCore+0x20c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a48      	ldr	r2, [pc, #288]	; (80015cc <MyTFT_SyncCore+0x230>)
 80014aa:	5cd3      	ldrb	r3, [r2, r3]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d008      	beq.n	80014c2 <MyTFT_SyncCore+0x126>
				{
					syncDataBuffer[syncNowIndex]--;
 80014b0:	4b3d      	ldr	r3, [pc, #244]	; (80015a8 <MyTFT_SyncCore+0x20c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a45      	ldr	r2, [pc, #276]	; (80015cc <MyTFT_SyncCore+0x230>)
 80014b6:	5cd2      	ldrb	r2, [r2, r3]
 80014b8:	3a01      	subs	r2, #1
 80014ba:	b2d1      	uxtb	r1, r2
 80014bc:	4a43      	ldr	r2, [pc, #268]	; (80015cc <MyTFT_SyncCore+0x230>)
 80014be:	54d1      	strb	r1, [r2, r3]
				{
					IO_RST1_EndRST;
					NextData();
					return;
				}
				return;
 80014c0:	e06c      	b.n	800159c <MyTFT_SyncCore+0x200>
					IO_RST1_EndRST;
 80014c2:	4b3d      	ldr	r3, [pc, #244]	; (80015b8 <MyTFT_SyncCore+0x21c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a3d      	ldr	r2, [pc, #244]	; (80015bc <MyTFT_SyncCore+0x220>)
 80014c8:	8811      	ldrh	r1, [r2, #0]
 80014ca:	2201      	movs	r2, #1
 80014cc:	4618      	mov	r0, r3
 80014ce:	f001 f99a 	bl	8002806 <HAL_GPIO_WritePin>
					NextData();
 80014d2:	f7ff fdad 	bl	8001030 <NextData>
					return;
 80014d6:	e061      	b.n	800159c <MyTFT_SyncCore+0x200>
				break;
			case 4: // 单纯延时
				if (syncDataBuffer[syncNowIndex])
 80014d8:	4b33      	ldr	r3, [pc, #204]	; (80015a8 <MyTFT_SyncCore+0x20c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a3b      	ldr	r2, [pc, #236]	; (80015cc <MyTFT_SyncCore+0x230>)
 80014de:	5cd3      	ldrb	r3, [r2, r3]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d008      	beq.n	80014f6 <MyTFT_SyncCore+0x15a>
				{
					syncDataBuffer[syncNowIndex]--;
 80014e4:	4b30      	ldr	r3, [pc, #192]	; (80015a8 <MyTFT_SyncCore+0x20c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a38      	ldr	r2, [pc, #224]	; (80015cc <MyTFT_SyncCore+0x230>)
 80014ea:	5cd2      	ldrb	r2, [r2, r3]
 80014ec:	3a01      	subs	r2, #1
 80014ee:	b2d1      	uxtb	r1, r2
 80014f0:	4a36      	ldr	r2, [pc, #216]	; (80015cc <MyTFT_SyncCore+0x230>)
 80014f2:	54d1      	strb	r1, [r2, r3]
				else
				{
					NextData();
					return;
				}
				break;
 80014f4:	e002      	b.n	80014fc <MyTFT_SyncCore+0x160>
					NextData();
 80014f6:	f7ff fd9b 	bl	8001030 <NextData>
					return;
 80014fa:	e04f      	b.n	800159c <MyTFT_SyncCore+0x200>
			}
			break;
 80014fc:	e04d      	b.n	800159a <MyTFT_SyncCore+0x1fe>

		case 1: // 设置电平

			if (syncNowBit) // 还有要传的数据
 80014fe:	4b32      	ldr	r3, [pc, #200]	; (80015c8 <MyTFT_SyncCore+0x22c>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d024      	beq.n	8001550 <MyTFT_SyncCore+0x1b4>
			{
				syncPerBitNowState = 2;
 8001506:	4b27      	ldr	r3, [pc, #156]	; (80015a4 <MyTFT_SyncCore+0x208>)
 8001508:	2202      	movs	r2, #2
 800150a:	701a      	strb	r2, [r3, #0]
				if (syncDataBuffer[syncNowIndex] & syncNowBit)
 800150c:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <MyTFT_SyncCore+0x20c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a2e      	ldr	r2, [pc, #184]	; (80015cc <MyTFT_SyncCore+0x230>)
 8001512:	5cd2      	ldrb	r2, [r2, r3]
 8001514:	4b2c      	ldr	r3, [pc, #176]	; (80015c8 <MyTFT_SyncCore+0x22c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4013      	ands	r3, r2
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d008      	beq.n	8001532 <MyTFT_SyncCore+0x196>
				{
					IO_SDAT_SET1;
 8001520:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <MyTFT_SyncCore+0x234>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a2b      	ldr	r2, [pc, #172]	; (80015d4 <MyTFT_SyncCore+0x238>)
 8001526:	8811      	ldrh	r1, [r2, #0]
 8001528:	2201      	movs	r2, #1
 800152a:	4618      	mov	r0, r3
 800152c:	f001 f96b 	bl	8002806 <HAL_GPIO_WritePin>
 8001530:	e007      	b.n	8001542 <MyTFT_SyncCore+0x1a6>
				}
				else
				{
					IO_SDAT_CLR0;
 8001532:	4b27      	ldr	r3, [pc, #156]	; (80015d0 <MyTFT_SyncCore+0x234>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a27      	ldr	r2, [pc, #156]	; (80015d4 <MyTFT_SyncCore+0x238>)
 8001538:	8811      	ldrh	r1, [r2, #0]
 800153a:	2200      	movs	r2, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f001 f962 	bl	8002806 <HAL_GPIO_WritePin>
				}
				syncNowBit >>= 1;
 8001542:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <MyTFT_SyncCore+0x22c>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	085b      	lsrs	r3, r3, #1
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4b1f      	ldr	r3, [pc, #124]	; (80015c8 <MyTFT_SyncCore+0x22c>)
 800154c:	701a      	strb	r2, [r3, #0]
			{
				IO_CS1_End; // 片选结束
				NextData();
				return;
			}
			break;
 800154e:	e025      	b.n	800159c <MyTFT_SyncCore+0x200>
				IO_CS1_End; // 片选结束
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <MyTFT_SyncCore+0x224>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a1b      	ldr	r2, [pc, #108]	; (80015c4 <MyTFT_SyncCore+0x228>)
 8001556:	8811      	ldrh	r1, [r2, #0]
 8001558:	2201      	movs	r2, #1
 800155a:	4618      	mov	r0, r3
 800155c:	f001 f953 	bl	8002806 <HAL_GPIO_WritePin>
				NextData();
 8001560:	f7ff fd66 	bl	8001030 <NextData>
				return;
 8001564:	e01a      	b.n	800159c <MyTFT_SyncCore+0x200>

		case 2: // 时钟上升
			syncPerBitNowState = 3;
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <MyTFT_SyncCore+0x208>)
 8001568:	2203      	movs	r2, #3
 800156a:	701a      	strb	r2, [r3, #0]
			IO_SCLK_SET1;
 800156c:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <MyTFT_SyncCore+0x23c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a1a      	ldr	r2, [pc, #104]	; (80015dc <MyTFT_SyncCore+0x240>)
 8001572:	8811      	ldrh	r1, [r2, #0]
 8001574:	2201      	movs	r2, #1
 8001576:	4618      	mov	r0, r3
 8001578:	f001 f945 	bl	8002806 <HAL_GPIO_WritePin>
			break;
 800157c:	e00e      	b.n	800159c <MyTFT_SyncCore+0x200>
		case 3: // 时钟下降
			syncPerBitNowState = 1;
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <MyTFT_SyncCore+0x208>)
 8001580:	2201      	movs	r2, #1
 8001582:	701a      	strb	r2, [r3, #0]
			IO_SCLK_CLR0;
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <MyTFT_SyncCore+0x23c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a14      	ldr	r2, [pc, #80]	; (80015dc <MyTFT_SyncCore+0x240>)
 800158a:	8811      	ldrh	r1, [r2, #0]
 800158c:	2200      	movs	r2, #0
 800158e:	4618      	mov	r0, r3
 8001590:	f001 f939 	bl	8002806 <HAL_GPIO_WritePin>
			break;
 8001594:	e002      	b.n	800159c <MyTFT_SyncCore+0x200>

		default:
			break;
 8001596:	bf00      	nop
 8001598:	e000      	b.n	800159c <MyTFT_SyncCore+0x200>
			break;
 800159a:	bf00      	nop
		}
	}
}
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	2000b090 	.word	0x2000b090
 80015a4:	2000b088 	.word	0x2000b088
 80015a8:	2000b08c 	.word	0x2000b08c
 80015ac:	20007088 	.word	0x20007088
 80015b0:	20003070 	.word	0x20003070
 80015b4:	20003074 	.word	0x20003074
 80015b8:	20003068 	.word	0x20003068
 80015bc:	2000306c 	.word	0x2000306c
 80015c0:	20003078 	.word	0x20003078
 80015c4:	2000307c 	.word	0x2000307c
 80015c8:	20000098 	.word	0x20000098
 80015cc:	20003088 	.word	0x20003088
 80015d0:	20003060 	.word	0x20003060
 80015d4:	20003064 	.word	0x20003064
 80015d8:	20003058 	.word	0x20003058
 80015dc:	2000305c 	.word	0x2000305c

080015e0 <MyTFT_SyncWriteData>:

void MyTFT_SyncWriteData(int x, int y, int len, int wid, uint16_t *colors)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	603b      	str	r3, [r7, #0]
	int startX = 0, startY = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
	len--;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	607b      	str	r3, [r7, #4]
	wid--;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	3b01      	subs	r3, #1
 8001600:	603b      	str	r3, [r7, #0]
		startX = 40;
		startY = 53;
	}
	else
	{
		startX = 40;
 8001602:	2328      	movs	r3, #40	; 0x28
 8001604:	61bb      	str	r3, [r7, #24]
		startY = 50;
 8001606:	2332      	movs	r3, #50	; 0x32
 8001608:	617b      	str	r3, [r7, #20]
	}
	startX = 0, startY = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
	AddCommand(0x2a); // 列地址设置
 8001612:	212a      	movs	r1, #42	; 0x2a
 8001614:	2000      	movs	r0, #0
 8001616:	f7ff fcd9 	bl	8000fcc <__AddData>
	AddData16(x + startX);
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	4413      	add	r3, r2
 8001620:	121b      	asrs	r3, r3, #8
 8001622:	b2db      	uxtb	r3, r3
 8001624:	4619      	mov	r1, r3
 8001626:	2001      	movs	r0, #1
 8001628:	f7ff fcd0 	bl	8000fcc <__AddData>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	b2da      	uxtb	r2, r3
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	b2db      	uxtb	r3, r3
 8001634:	4413      	add	r3, r2
 8001636:	b2db      	uxtb	r3, r3
 8001638:	4619      	mov	r1, r3
 800163a:	2001      	movs	r0, #1
 800163c:	f7ff fcc6 	bl	8000fcc <__AddData>
	AddData16(x + len + startX);
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	441a      	add	r2, r3
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	4413      	add	r3, r2
 800164a:	121b      	asrs	r3, r3, #8
 800164c:	b2db      	uxtb	r3, r3
 800164e:	4619      	mov	r1, r3
 8001650:	2001      	movs	r0, #1
 8001652:	f7ff fcbb 	bl	8000fcc <__AddData>
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	b2da      	uxtb	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	4413      	add	r3, r2
 8001660:	b2da      	uxtb	r2, r3
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	4413      	add	r3, r2
 8001668:	b2db      	uxtb	r3, r3
 800166a:	4619      	mov	r1, r3
 800166c:	2001      	movs	r0, #1
 800166e:	f7ff fcad 	bl	8000fcc <__AddData>
	AddCommand(0x2b); // 行地址设置
 8001672:	212b      	movs	r1, #43	; 0x2b
 8001674:	2000      	movs	r0, #0
 8001676:	f7ff fca9 	bl	8000fcc <__AddData>
	AddData16(y + startY);
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	4413      	add	r3, r2
 8001680:	121b      	asrs	r3, r3, #8
 8001682:	b2db      	uxtb	r3, r3
 8001684:	4619      	mov	r1, r3
 8001686:	2001      	movs	r0, #1
 8001688:	f7ff fca0 	bl	8000fcc <__AddData>
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	b2da      	uxtb	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	4413      	add	r3, r2
 8001696:	b2db      	uxtb	r3, r3
 8001698:	4619      	mov	r1, r3
 800169a:	2001      	movs	r0, #1
 800169c:	f7ff fc96 	bl	8000fcc <__AddData>
	AddData16(y + wid + startY);
 80016a0:	68ba      	ldr	r2, [r7, #8]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	441a      	add	r2, r3
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	4413      	add	r3, r2
 80016aa:	121b      	asrs	r3, r3, #8
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	4619      	mov	r1, r3
 80016b0:	2001      	movs	r0, #1
 80016b2:	f7ff fc8b 	bl	8000fcc <__AddData>
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	4413      	add	r3, r2
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	4413      	add	r3, r2
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	4619      	mov	r1, r3
 80016cc:	2001      	movs	r0, #1
 80016ce:	f7ff fc7d 	bl	8000fcc <__AddData>
	AddCommand(0x2c); // 储存器写
 80016d2:	212c      	movs	r1, #44	; 0x2c
 80016d4:	2000      	movs	r0, #0
 80016d6:	f7ff fc79 	bl	8000fcc <__AddData>
	for (int i = 0; i < len * wid; i++)
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
 80016de:	e018      	b.n	8001712 <MyTFT_SyncWriteData+0x132>
	{
		AddData16(colors[i]);
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016e6:	4413      	add	r3, r2
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	0a1b      	lsrs	r3, r3, #8
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	4619      	mov	r1, r3
 80016f2:	2001      	movs	r0, #1
 80016f4:	f7ff fc6a 	bl	8000fcc <__AddData>
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016fe:	4413      	add	r3, r2
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	4619      	mov	r1, r3
 8001706:	2001      	movs	r0, #1
 8001708:	f7ff fc60 	bl	8000fcc <__AddData>
	for (int i = 0; i < len * wid; i++)
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	3301      	adds	r3, #1
 8001710:	61fb      	str	r3, [r7, #28]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	fb02 f303 	mul.w	r3, r2, r3
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	429a      	cmp	r2, r3
 800171e:	dbdf      	blt.n	80016e0 <MyTFT_SyncWriteData+0x100>
	}
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3720      	adds	r7, #32
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <MyTFT_SyncWriteASCII>:
uint16_t datas[128];
void MyTFT_SyncWriteASCII(int x, int y, uint8_t ascii, uint16_t color, uint16_t bgcolor)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af02      	add	r7, sp, #8
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	4611      	mov	r1, r2
 8001738:	461a      	mov	r2, r3
 800173a:	460b      	mov	r3, r1
 800173c:	71fb      	strb	r3, [r7, #7]
 800173e:	4613      	mov	r3, r2
 8001740:	80bb      	strh	r3, [r7, #4]
	for (int i = 0; i < 16; i++)
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	e02c      	b.n	80017a2 <MyTFT_SyncWriteASCII+0x76>
	{
		for (int j = 0; j < 8; j++)
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	e023      	b.n	8001796 <MyTFT_SyncWriteASCII+0x6a>
		{
			if (ascii_1608[ascii - 0x20][i] & (1 << j))
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	3b20      	subs	r3, #32
 8001752:	4a1b      	ldr	r2, [pc, #108]	; (80017c0 <MyTFT_SyncWriteASCII+0x94>)
 8001754:	011b      	lsls	r3, r3, #4
 8001756:	441a      	add	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	4413      	add	r3, r2
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	fa42 f303 	asr.w	r3, r2, r3
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d008      	beq.n	8001780 <MyTFT_SyncWriteASCII+0x54>
			{
				datas[i * 8 + j] = color;
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	00da      	lsls	r2, r3, #3
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	4413      	add	r3, r2
 8001776:	4913      	ldr	r1, [pc, #76]	; (80017c4 <MyTFT_SyncWriteASCII+0x98>)
 8001778:	88ba      	ldrh	r2, [r7, #4]
 800177a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 800177e:	e007      	b.n	8001790 <MyTFT_SyncWriteASCII+0x64>
			}
			else
				datas[i * 8 + j] = bgcolor;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	00da      	lsls	r2, r3, #3
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4413      	add	r3, r2
 8001788:	490e      	ldr	r1, [pc, #56]	; (80017c4 <MyTFT_SyncWriteASCII+0x98>)
 800178a:	8c3a      	ldrh	r2, [r7, #32]
 800178c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int j = 0; j < 8; j++)
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	3301      	adds	r3, #1
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	2b07      	cmp	r3, #7
 800179a:	ddd8      	ble.n	800174e <MyTFT_SyncWriteASCII+0x22>
	for (int i = 0; i < 16; i++)
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	3301      	adds	r3, #1
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	2b0f      	cmp	r3, #15
 80017a6:	ddcf      	ble.n	8001748 <MyTFT_SyncWriteASCII+0x1c>
		}
	}
	MyTFT_SyncWriteData(x, y, 8, 16, datas);
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <MyTFT_SyncWriteASCII+0x98>)
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	2310      	movs	r3, #16
 80017ae:	2208      	movs	r2, #8
 80017b0:	68b9      	ldr	r1, [r7, #8]
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f7ff ff14 	bl	80015e0 <MyTFT_SyncWriteData>
}
 80017b8:	bf00      	nop
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	0800a474 	.word	0x0800a474
 80017c4:	2000b094 	.word	0x2000b094

080017c8 <MyTFT_SyncPrintChar>:
void MyTFT_SyncPrintChar(char code, uint16_t color)
{
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af02      	add	r7, sp, #8
 80017ce:	4603      	mov	r3, r0
 80017d0:	460a      	mov	r2, r1
 80017d2:	71fb      	strb	r3, [r7, #7]
 80017d4:	4613      	mov	r3, r2
 80017d6:	80bb      	strh	r3, [r7, #4]
	MyTFT_SyncWriteASCII(mytft_nowx, mytft_nowy, code, color, ~color);
 80017d8:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <MyTFT_SyncPrintChar+0x7c>)
 80017da:	6818      	ldr	r0, [r3, #0]
 80017dc:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <MyTFT_SyncPrintChar+0x80>)
 80017de:	6819      	ldr	r1, [r3, #0]
 80017e0:	88bb      	ldrh	r3, [r7, #4]
 80017e2:	43db      	mvns	r3, r3
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	88bc      	ldrh	r4, [r7, #4]
 80017e8:	79fa      	ldrb	r2, [r7, #7]
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	4623      	mov	r3, r4
 80017ee:	f7ff ff9d 	bl	800172c <MyTFT_SyncWriteASCII>
	mytft_nowx += MyTFTDeltax;
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <MyTFT_SyncPrintChar+0x7c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	3308      	adds	r3, #8
 80017f8:	4a12      	ldr	r2, [pc, #72]	; (8001844 <MyTFT_SyncPrintChar+0x7c>)
 80017fa:	6013      	str	r3, [r2, #0]
	if (mytft_nowx > MyTFTMaxW)
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <MyTFT_SyncPrintChar+0x7c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b80      	cmp	r3, #128	; 0x80
 8001802:	dd0e      	ble.n	8001822 <MyTFT_SyncPrintChar+0x5a>
	{
		mytft_nowx = MyTFTOrigW;
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <MyTFT_SyncPrintChar+0x7c>)
 8001806:	2204      	movs	r2, #4
 8001808:	601a      	str	r2, [r3, #0]
		mytft_nowy += MyTFTDeltay;
 800180a:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <MyTFT_SyncPrintChar+0x80>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	3310      	adds	r3, #16
 8001810:	4a0d      	ldr	r2, [pc, #52]	; (8001848 <MyTFT_SyncPrintChar+0x80>)
 8001812:	6013      	str	r3, [r2, #0]
		if (mytft_nowy > MyTFTMaxH)
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <MyTFT_SyncPrintChar+0x80>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b80      	cmp	r3, #128	; 0x80
 800181a:	dd02      	ble.n	8001822 <MyTFT_SyncPrintChar+0x5a>
		{
			mytft_nowy = MyTFTOrigH;
 800181c:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <MyTFT_SyncPrintChar+0x80>)
 800181e:	2204      	movs	r2, #4
 8001820:	601a      	str	r2, [r3, #0]
		}
	}
	MyTFT_SyncWriteASCII(mytft_nowx, mytft_nowy, '#', color, ~color);
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <MyTFT_SyncPrintChar+0x7c>)
 8001824:	6818      	ldr	r0, [r3, #0]
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <MyTFT_SyncPrintChar+0x80>)
 8001828:	6819      	ldr	r1, [r3, #0]
 800182a:	88bb      	ldrh	r3, [r7, #4]
 800182c:	43db      	mvns	r3, r3
 800182e:	b29b      	uxth	r3, r3
 8001830:	88ba      	ldrh	r2, [r7, #4]
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	4613      	mov	r3, r2
 8001836:	2223      	movs	r2, #35	; 0x23
 8001838:	f7ff ff78 	bl	800172c <MyTFT_SyncWriteASCII>
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bd90      	pop	{r4, r7, pc}
 8001844:	20000090 	.word	0x20000090
 8001848:	20000094 	.word	0x20000094

0800184c <MyTFT_OpenScreen>:
	SendCommand(0x29);
}
#endif

void MyTFT_OpenScreen()
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	IO_BLK1_Open;
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <MyTFT_OpenScreen+0x18>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a04      	ldr	r2, [pc, #16]	; (8001868 <MyTFT_OpenScreen+0x1c>)
 8001856:	8811      	ldrh	r1, [r2, #0]
 8001858:	2201      	movs	r2, #1
 800185a:	4618      	mov	r0, r3
 800185c:	f000 ffd3 	bl	8002806 <HAL_GPIO_WritePin>
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20003080 	.word	0x20003080
 8001868:	20003084 	.word	0x20003084

0800186c <MyTFT_CloseScreen>:
void MyTFT_CloseScreen()
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	IO_BLK0_CLose;
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <MyTFT_CloseScreen+0x18>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a04      	ldr	r2, [pc, #16]	; (8001888 <MyTFT_CloseScreen+0x1c>)
 8001876:	8811      	ldrh	r1, [r2, #0]
 8001878:	2200      	movs	r2, #0
 800187a:	4618      	mov	r0, r3
 800187c:	f000 ffc3 	bl	8002806 <HAL_GPIO_WritePin>
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20003080 	.word	0x20003080
 8001888:	20003084 	.word	0x20003084

0800188c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <HAL_MspInit+0x5c>)
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	4a14      	ldr	r2, [pc, #80]	; (80018e8 <HAL_MspInit+0x5c>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6193      	str	r3, [r2, #24]
 800189e:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_MspInit+0x5c>)
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <HAL_MspInit+0x5c>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	4a0e      	ldr	r2, [pc, #56]	; (80018e8 <HAL_MspInit+0x5c>)
 80018b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b4:	61d3      	str	r3, [r2, #28]
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <HAL_MspInit+0x5c>)
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018c2:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <HAL_MspInit+0x60>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	4a04      	ldr	r2, [pc, #16]	; (80018ec <HAL_MspInit+0x60>)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018de:	bf00      	nop
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40010000 	.word	0x40010000

080018f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a37      	ldr	r2, [pc, #220]	; (80019dc <HAL_TIM_Base_MspInit+0xec>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d135      	bne.n	800196e <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001902:	4b37      	ldr	r3, [pc, #220]	; (80019e0 <HAL_TIM_Base_MspInit+0xf0>)
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	4a36      	ldr	r2, [pc, #216]	; (80019e0 <HAL_TIM_Base_MspInit+0xf0>)
 8001908:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800190c:	6193      	str	r3, [r2, #24]
 800190e:	4b34      	ldr	r3, [pc, #208]	; (80019e0 <HAL_TIM_Base_MspInit+0xf0>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 800191a:	4b32      	ldr	r3, [pc, #200]	; (80019e4 <HAL_TIM_Base_MspInit+0xf4>)
 800191c:	4a32      	ldr	r2, [pc, #200]	; (80019e8 <HAL_TIM_Base_MspInit+0xf8>)
 800191e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001920:	4b30      	ldr	r3, [pc, #192]	; (80019e4 <HAL_TIM_Base_MspInit+0xf4>)
 8001922:	2210      	movs	r2, #16
 8001924:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001926:	4b2f      	ldr	r3, [pc, #188]	; (80019e4 <HAL_TIM_Base_MspInit+0xf4>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800192c:	4b2d      	ldr	r3, [pc, #180]	; (80019e4 <HAL_TIM_Base_MspInit+0xf4>)
 800192e:	2280      	movs	r2, #128	; 0x80
 8001930:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001932:	4b2c      	ldr	r3, [pc, #176]	; (80019e4 <HAL_TIM_Base_MspInit+0xf4>)
 8001934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001938:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800193a:	4b2a      	ldr	r3, [pc, #168]	; (80019e4 <HAL_TIM_Base_MspInit+0xf4>)
 800193c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001940:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8001942:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <HAL_TIM_Base_MspInit+0xf4>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001948:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <HAL_TIM_Base_MspInit+0xf4>)
 800194a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800194e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8001950:	4824      	ldr	r0, [pc, #144]	; (80019e4 <HAL_TIM_Base_MspInit+0xf4>)
 8001952:	f000 fa6d 	bl	8001e30 <HAL_DMA_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 800195c:	f7ff faa4 	bl	8000ea8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a20      	ldr	r2, [pc, #128]	; (80019e4 <HAL_TIM_Base_MspInit+0xf4>)
 8001964:	629a      	str	r2, [r3, #40]	; 0x28
 8001966:	4a1f      	ldr	r2, [pc, #124]	; (80019e4 <HAL_TIM_Base_MspInit+0xf4>)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800196c:	e032      	b.n	80019d4 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001976:	d114      	bne.n	80019a2 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001978:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <HAL_TIM_Base_MspInit+0xf0>)
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	4a18      	ldr	r2, [pc, #96]	; (80019e0 <HAL_TIM_Base_MspInit+0xf0>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	61d3      	str	r3, [r2, #28]
 8001984:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <HAL_TIM_Base_MspInit+0xf0>)
 8001986:	69db      	ldr	r3, [r3, #28]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001990:	2200      	movs	r2, #0
 8001992:	2100      	movs	r1, #0
 8001994:	201c      	movs	r0, #28
 8001996:	f000 fa14 	bl	8001dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800199a:	201c      	movs	r0, #28
 800199c:	f000 fa2d 	bl	8001dfa <HAL_NVIC_EnableIRQ>
}
 80019a0:	e018      	b.n	80019d4 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a11      	ldr	r2, [pc, #68]	; (80019ec <HAL_TIM_Base_MspInit+0xfc>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d113      	bne.n	80019d4 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <HAL_TIM_Base_MspInit+0xf0>)
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <HAL_TIM_Base_MspInit+0xf0>)
 80019b2:	f043 0302 	orr.w	r3, r3, #2
 80019b6:	61d3      	str	r3, [r2, #28]
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_TIM_Base_MspInit+0xf0>)
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2100      	movs	r1, #0
 80019c8:	201d      	movs	r0, #29
 80019ca:	f000 f9fa 	bl	8001dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019ce:	201d      	movs	r0, #29
 80019d0:	f000 fa13 	bl	8001dfa <HAL_NVIC_EnableIRQ>
}
 80019d4:	bf00      	nop
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40012c00 	.word	0x40012c00
 80019e0:	40021000 	.word	0x40021000
 80019e4:	2000030c 	.word	0x2000030c
 80019e8:	40020030 	.word	0x40020030
 80019ec:	40000400 	.word	0x40000400

080019f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0310 	add.w	r3, r7, #16
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <HAL_TIM_MspPostInit+0x5c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d118      	bne.n	8001a42 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a10:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <HAL_TIM_MspPostInit+0x60>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	4a0e      	ldr	r2, [pc, #56]	; (8001a50 <HAL_TIM_MspPostInit+0x60>)
 8001a16:	f043 0304 	orr.w	r3, r3, #4
 8001a1a:	6193      	str	r3, [r2, #24]
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <HAL_TIM_MspPostInit+0x60>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2302      	movs	r3, #2
 8001a34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a36:	f107 0310 	add.w	r3, r7, #16
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4805      	ldr	r0, [pc, #20]	; (8001a54 <HAL_TIM_MspPostInit+0x64>)
 8001a3e:	f000 fd37 	bl	80024b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a42:	bf00      	nop
 8001a44:	3720      	adds	r7, #32
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40012c00 	.word	0x40012c00
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40010800 	.word	0x40010800

08001a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <NMI_Handler+0x4>

08001a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <HardFault_Handler+0x4>

08001a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <MemManage_Handler+0x4>

08001a6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <BusFault_Handler+0x4>

08001a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <UsageFault_Handler+0x4>

08001a76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr

08001a82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr

08001a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr

08001a9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a9e:	f000 f89d 	bl	8001bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <DMA1_Channel3_IRQHandler+0x10>)
 8001aae:	f000 fa95 	bl	8001fdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	2000030c 	.word	0x2000030c

08001abc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001ac2:	f000 ffdd 	bl	8002a80 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	2000b660 	.word	0x2000b660

08001ad0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ad4:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <TIM2_IRQHandler+0x10>)
 8001ad6:	f003 fb5b 	bl	8005190 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	2000027c 	.word	0x2000027c

08001ae4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <TIM3_IRQHandler+0x10>)
 8001aea:	f003 fb51 	bl	8005190 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200002c4 	.word	0x200002c4

08001af8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b04:	f7ff fff8 	bl	8001af8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b08:	480b      	ldr	r0, [pc, #44]	; (8001b38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b0a:	490c      	ldr	r1, [pc, #48]	; (8001b3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b0c:	4a0c      	ldr	r2, [pc, #48]	; (8001b40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b10:	e002      	b.n	8001b18 <LoopCopyDataInit>

08001b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b16:	3304      	adds	r3, #4

08001b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b1c:	d3f9      	bcc.n	8001b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1e:	4a09      	ldr	r2, [pc, #36]	; (8001b44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b20:	4c09      	ldr	r4, [pc, #36]	; (8001b48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b24:	e001      	b.n	8001b2a <LoopFillZerobss>

08001b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b28:	3204      	adds	r2, #4

08001b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b2c:	d3fb      	bcc.n	8001b26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b2e:	f008 fc03 	bl	800a338 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b32:	f7fe fb77 	bl	8000224 <main>
  bx lr
 8001b36:	4770      	bx	lr
  ldr r0, =_sdata
 8001b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b3c:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8001b40:	0800aa90 	.word	0x0800aa90
  ldr r2, =_sbss
 8001b44:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8001b48:	2000b964 	.word	0x2000b964

08001b4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b4c:	e7fe      	b.n	8001b4c <ADC1_2_IRQHandler>
	...

08001b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b54:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <HAL_Init+0x28>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a07      	ldr	r2, [pc, #28]	; (8001b78 <HAL_Init+0x28>)
 8001b5a:	f043 0310 	orr.w	r3, r3, #16
 8001b5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b60:	2003      	movs	r0, #3
 8001b62:	f000 f923 	bl	8001dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b66:	200f      	movs	r0, #15
 8001b68:	f000 f808 	bl	8001b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b6c:	f7ff fe8e 	bl	800188c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40022000 	.word	0x40022000

08001b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_InitTick+0x54>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <HAL_InitTick+0x58>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 f93b 	bl	8001e16 <HAL_SYSTICK_Config>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e00e      	b.n	8001bc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b0f      	cmp	r3, #15
 8001bae:	d80a      	bhi.n	8001bc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb8:	f000 f903 	bl	8001dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bbc:	4a06      	ldr	r2, [pc, #24]	; (8001bd8 <HAL_InitTick+0x5c>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	e000      	b.n	8001bc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	2000009c 	.word	0x2000009c
 8001bd4:	200000a4 	.word	0x200000a4
 8001bd8:	200000a0 	.word	0x200000a0

08001bdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_IncTick+0x1c>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	461a      	mov	r2, r3
 8001be6:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <HAL_IncTick+0x20>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4413      	add	r3, r2
 8001bec:	4a03      	ldr	r2, [pc, #12]	; (8001bfc <HAL_IncTick+0x20>)
 8001bee:	6013      	str	r3, [r2, #0]
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr
 8001bf8:	200000a4 	.word	0x200000a4
 8001bfc:	2000b194 	.word	0x2000b194

08001c00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return uwTick;
 8001c04:	4b02      	ldr	r3, [pc, #8]	; (8001c10 <HAL_GetTick+0x10>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	2000b194 	.word	0x2000b194

08001c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <__NVIC_SetPriorityGrouping+0x44>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c30:	4013      	ands	r3, r2
 8001c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c46:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <__NVIC_SetPriorityGrouping+0x44>)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	60d3      	str	r3, [r2, #12]
}
 8001c4c:	bf00      	nop
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <__NVIC_GetPriorityGrouping+0x18>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	0a1b      	lsrs	r3, r3, #8
 8001c66:	f003 0307 	and.w	r3, r3, #7
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	db0b      	blt.n	8001ca2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	f003 021f 	and.w	r2, r3, #31
 8001c90:	4906      	ldr	r1, [pc, #24]	; (8001cac <__NVIC_EnableIRQ+0x34>)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	095b      	lsrs	r3, r3, #5
 8001c98:	2001      	movs	r0, #1
 8001c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	e000e100 	.word	0xe000e100

08001cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	6039      	str	r1, [r7, #0]
 8001cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	db0a      	blt.n	8001cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	490c      	ldr	r1, [pc, #48]	; (8001cfc <__NVIC_SetPriority+0x4c>)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	0112      	lsls	r2, r2, #4
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd8:	e00a      	b.n	8001cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4908      	ldr	r1, [pc, #32]	; (8001d00 <__NVIC_SetPriority+0x50>)
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	3b04      	subs	r3, #4
 8001ce8:	0112      	lsls	r2, r2, #4
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	440b      	add	r3, r1
 8001cee:	761a      	strb	r2, [r3, #24]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000e100 	.word	0xe000e100
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b089      	sub	sp, #36	; 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f1c3 0307 	rsb	r3, r3, #7
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	bf28      	it	cs
 8001d22:	2304      	movcs	r3, #4
 8001d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d902      	bls.n	8001d34 <NVIC_EncodePriority+0x30>
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3b03      	subs	r3, #3
 8001d32:	e000      	b.n	8001d36 <NVIC_EncodePriority+0x32>
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	f04f 32ff 	mov.w	r2, #4294967295
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43da      	mvns	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	401a      	ands	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	fa01 f303 	lsl.w	r3, r1, r3
 8001d56:	43d9      	mvns	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	4313      	orrs	r3, r2
         );
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3724      	adds	r7, #36	; 0x24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d78:	d301      	bcc.n	8001d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00f      	b.n	8001d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <SysTick_Config+0x40>)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d86:	210f      	movs	r1, #15
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	f7ff ff90 	bl	8001cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <SysTick_Config+0x40>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d96:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <SysTick_Config+0x40>)
 8001d98:	2207      	movs	r2, #7
 8001d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	e000e010 	.word	0xe000e010

08001dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff ff2d 	bl	8001c14 <__NVIC_SetPriorityGrouping>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b086      	sub	sp, #24
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
 8001dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd4:	f7ff ff42 	bl	8001c5c <__NVIC_GetPriorityGrouping>
 8001dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68b9      	ldr	r1, [r7, #8]
 8001dde:	6978      	ldr	r0, [r7, #20]
 8001de0:	f7ff ff90 	bl	8001d04 <NVIC_EncodePriority>
 8001de4:	4602      	mov	r2, r0
 8001de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff5f 	bl	8001cb0 <__NVIC_SetPriority>
}
 8001df2:	bf00      	nop
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4603      	mov	r3, r0
 8001e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ff35 	bl	8001c78 <__NVIC_EnableIRQ>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff ffa2 	bl	8001d68 <SysTick_Config>
 8001e24:	4603      	mov	r3, r0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e059      	b.n	8001efa <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <HAL_DMA_Init+0xd4>)
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d80f      	bhi.n	8001e72 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	4b2b      	ldr	r3, [pc, #172]	; (8001f08 <HAL_DMA_Init+0xd8>)
 8001e5a:	4413      	add	r3, r2
 8001e5c:	4a2b      	ldr	r2, [pc, #172]	; (8001f0c <HAL_DMA_Init+0xdc>)
 8001e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e62:	091b      	lsrs	r3, r3, #4
 8001e64:	009a      	lsls	r2, r3, #2
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a28      	ldr	r2, [pc, #160]	; (8001f10 <HAL_DMA_Init+0xe0>)
 8001e6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e70:	e00e      	b.n	8001e90 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	4b26      	ldr	r3, [pc, #152]	; (8001f14 <HAL_DMA_Init+0xe4>)
 8001e7a:	4413      	add	r3, r2
 8001e7c:	4a23      	ldr	r2, [pc, #140]	; (8001f0c <HAL_DMA_Init+0xdc>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	091b      	lsrs	r3, r3, #4
 8001e84:	009a      	lsls	r2, r3, #2
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a22      	ldr	r2, [pc, #136]	; (8001f18 <HAL_DMA_Init+0xe8>)
 8001e8e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ea6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001eaa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ecc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr
 8001f04:	40020407 	.word	0x40020407
 8001f08:	bffdfff8 	.word	0xbffdfff8
 8001f0c:	cccccccd 	.word	0xcccccccd
 8001f10:	40020000 	.word	0x40020000
 8001f14:	bffdfbf8 	.word	0xbffdfbf8
 8001f18:	40020400 	.word	0x40020400

08001f1c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_DMA_Start_IT+0x20>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e04b      	b.n	8001fd4 <HAL_DMA_Start_IT+0xb8>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d13a      	bne.n	8001fc6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2202      	movs	r2, #2
 8001f54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0201 	bic.w	r2, r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	68b9      	ldr	r1, [r7, #8]
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f000 fa6d 	bl	8002454 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d008      	beq.n	8001f94 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 020e 	orr.w	r2, r2, #14
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	e00f      	b.n	8001fb4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0204 	bic.w	r2, r2, #4
 8001fa2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 020a 	orr.w	r2, r2, #10
 8001fb2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0201 	orr.w	r2, r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	e005      	b.n	8001fd2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 80f1 	beq.w	80021e8 <HAL_DMA_IRQHandler+0x20c>
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 80eb 	beq.w	80021e8 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0320 	and.w	r3, r3, #32
 800201c:	2b00      	cmp	r3, #0
 800201e:	d107      	bne.n	8002030 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0204 	bic.w	r2, r2, #4
 800202e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	461a      	mov	r2, r3
 8002036:	4b5f      	ldr	r3, [pc, #380]	; (80021b4 <HAL_DMA_IRQHandler+0x1d8>)
 8002038:	429a      	cmp	r2, r3
 800203a:	d958      	bls.n	80020ee <HAL_DMA_IRQHandler+0x112>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a5d      	ldr	r2, [pc, #372]	; (80021b8 <HAL_DMA_IRQHandler+0x1dc>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d04f      	beq.n	80020e6 <HAL_DMA_IRQHandler+0x10a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a5c      	ldr	r2, [pc, #368]	; (80021bc <HAL_DMA_IRQHandler+0x1e0>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d048      	beq.n	80020e2 <HAL_DMA_IRQHandler+0x106>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a5a      	ldr	r2, [pc, #360]	; (80021c0 <HAL_DMA_IRQHandler+0x1e4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d040      	beq.n	80020dc <HAL_DMA_IRQHandler+0x100>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a59      	ldr	r2, [pc, #356]	; (80021c4 <HAL_DMA_IRQHandler+0x1e8>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d038      	beq.n	80020d6 <HAL_DMA_IRQHandler+0xfa>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a57      	ldr	r2, [pc, #348]	; (80021c8 <HAL_DMA_IRQHandler+0x1ec>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d030      	beq.n	80020d0 <HAL_DMA_IRQHandler+0xf4>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a56      	ldr	r2, [pc, #344]	; (80021cc <HAL_DMA_IRQHandler+0x1f0>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d028      	beq.n	80020ca <HAL_DMA_IRQHandler+0xee>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a4d      	ldr	r2, [pc, #308]	; (80021b4 <HAL_DMA_IRQHandler+0x1d8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d020      	beq.n	80020c4 <HAL_DMA_IRQHandler+0xe8>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a52      	ldr	r2, [pc, #328]	; (80021d0 <HAL_DMA_IRQHandler+0x1f4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d019      	beq.n	80020c0 <HAL_DMA_IRQHandler+0xe4>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a50      	ldr	r2, [pc, #320]	; (80021d4 <HAL_DMA_IRQHandler+0x1f8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d012      	beq.n	80020bc <HAL_DMA_IRQHandler+0xe0>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a4f      	ldr	r2, [pc, #316]	; (80021d8 <HAL_DMA_IRQHandler+0x1fc>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d00a      	beq.n	80020b6 <HAL_DMA_IRQHandler+0xda>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a4d      	ldr	r2, [pc, #308]	; (80021dc <HAL_DMA_IRQHandler+0x200>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d102      	bne.n	80020b0 <HAL_DMA_IRQHandler+0xd4>
 80020aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020ae:	e01b      	b.n	80020e8 <HAL_DMA_IRQHandler+0x10c>
 80020b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80020b4:	e018      	b.n	80020e8 <HAL_DMA_IRQHandler+0x10c>
 80020b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ba:	e015      	b.n	80020e8 <HAL_DMA_IRQHandler+0x10c>
 80020bc:	2340      	movs	r3, #64	; 0x40
 80020be:	e013      	b.n	80020e8 <HAL_DMA_IRQHandler+0x10c>
 80020c0:	2304      	movs	r3, #4
 80020c2:	e011      	b.n	80020e8 <HAL_DMA_IRQHandler+0x10c>
 80020c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80020c8:	e00e      	b.n	80020e8 <HAL_DMA_IRQHandler+0x10c>
 80020ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020ce:	e00b      	b.n	80020e8 <HAL_DMA_IRQHandler+0x10c>
 80020d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80020d4:	e008      	b.n	80020e8 <HAL_DMA_IRQHandler+0x10c>
 80020d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020da:	e005      	b.n	80020e8 <HAL_DMA_IRQHandler+0x10c>
 80020dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020e0:	e002      	b.n	80020e8 <HAL_DMA_IRQHandler+0x10c>
 80020e2:	2340      	movs	r3, #64	; 0x40
 80020e4:	e000      	b.n	80020e8 <HAL_DMA_IRQHandler+0x10c>
 80020e6:	2304      	movs	r3, #4
 80020e8:	4a3d      	ldr	r2, [pc, #244]	; (80021e0 <HAL_DMA_IRQHandler+0x204>)
 80020ea:	6053      	str	r3, [r2, #4]
 80020ec:	e057      	b.n	800219e <HAL_DMA_IRQHandler+0x1c2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a31      	ldr	r2, [pc, #196]	; (80021b8 <HAL_DMA_IRQHandler+0x1dc>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d04f      	beq.n	8002198 <HAL_DMA_IRQHandler+0x1bc>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a2f      	ldr	r2, [pc, #188]	; (80021bc <HAL_DMA_IRQHandler+0x1e0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d048      	beq.n	8002194 <HAL_DMA_IRQHandler+0x1b8>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a2e      	ldr	r2, [pc, #184]	; (80021c0 <HAL_DMA_IRQHandler+0x1e4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d040      	beq.n	800218e <HAL_DMA_IRQHandler+0x1b2>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a2c      	ldr	r2, [pc, #176]	; (80021c4 <HAL_DMA_IRQHandler+0x1e8>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d038      	beq.n	8002188 <HAL_DMA_IRQHandler+0x1ac>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a2b      	ldr	r2, [pc, #172]	; (80021c8 <HAL_DMA_IRQHandler+0x1ec>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d030      	beq.n	8002182 <HAL_DMA_IRQHandler+0x1a6>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a29      	ldr	r2, [pc, #164]	; (80021cc <HAL_DMA_IRQHandler+0x1f0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d028      	beq.n	800217c <HAL_DMA_IRQHandler+0x1a0>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a21      	ldr	r2, [pc, #132]	; (80021b4 <HAL_DMA_IRQHandler+0x1d8>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d020      	beq.n	8002176 <HAL_DMA_IRQHandler+0x19a>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a25      	ldr	r2, [pc, #148]	; (80021d0 <HAL_DMA_IRQHandler+0x1f4>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d019      	beq.n	8002172 <HAL_DMA_IRQHandler+0x196>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a24      	ldr	r2, [pc, #144]	; (80021d4 <HAL_DMA_IRQHandler+0x1f8>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d012      	beq.n	800216e <HAL_DMA_IRQHandler+0x192>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a22      	ldr	r2, [pc, #136]	; (80021d8 <HAL_DMA_IRQHandler+0x1fc>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d00a      	beq.n	8002168 <HAL_DMA_IRQHandler+0x18c>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a21      	ldr	r2, [pc, #132]	; (80021dc <HAL_DMA_IRQHandler+0x200>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d102      	bne.n	8002162 <HAL_DMA_IRQHandler+0x186>
 800215c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002160:	e01b      	b.n	800219a <HAL_DMA_IRQHandler+0x1be>
 8002162:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002166:	e018      	b.n	800219a <HAL_DMA_IRQHandler+0x1be>
 8002168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800216c:	e015      	b.n	800219a <HAL_DMA_IRQHandler+0x1be>
 800216e:	2340      	movs	r3, #64	; 0x40
 8002170:	e013      	b.n	800219a <HAL_DMA_IRQHandler+0x1be>
 8002172:	2304      	movs	r3, #4
 8002174:	e011      	b.n	800219a <HAL_DMA_IRQHandler+0x1be>
 8002176:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800217a:	e00e      	b.n	800219a <HAL_DMA_IRQHandler+0x1be>
 800217c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002180:	e00b      	b.n	800219a <HAL_DMA_IRQHandler+0x1be>
 8002182:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002186:	e008      	b.n	800219a <HAL_DMA_IRQHandler+0x1be>
 8002188:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800218c:	e005      	b.n	800219a <HAL_DMA_IRQHandler+0x1be>
 800218e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002192:	e002      	b.n	800219a <HAL_DMA_IRQHandler+0x1be>
 8002194:	2340      	movs	r3, #64	; 0x40
 8002196:	e000      	b.n	800219a <HAL_DMA_IRQHandler+0x1be>
 8002198:	2304      	movs	r3, #4
 800219a:	4a12      	ldr	r2, [pc, #72]	; (80021e4 <HAL_DMA_IRQHandler+0x208>)
 800219c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 8136 	beq.w	8002414 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80021b0:	e130      	b.n	8002414 <HAL_DMA_IRQHandler+0x438>
 80021b2:	bf00      	nop
 80021b4:	40020080 	.word	0x40020080
 80021b8:	40020008 	.word	0x40020008
 80021bc:	4002001c 	.word	0x4002001c
 80021c0:	40020030 	.word	0x40020030
 80021c4:	40020044 	.word	0x40020044
 80021c8:	40020058 	.word	0x40020058
 80021cc:	4002006c 	.word	0x4002006c
 80021d0:	40020408 	.word	0x40020408
 80021d4:	4002041c 	.word	0x4002041c
 80021d8:	40020430 	.word	0x40020430
 80021dc:	40020444 	.word	0x40020444
 80021e0:	40020400 	.word	0x40020400
 80021e4:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	2202      	movs	r2, #2
 80021ee:	409a      	lsls	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80dd 	beq.w	80023b4 <HAL_DMA_IRQHandler+0x3d8>
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 80d7 	beq.w	80023b4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0320 	and.w	r3, r3, #32
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10b      	bne.n	800222c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 020a 	bic.w	r2, r2, #10
 8002222:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	4b7b      	ldr	r3, [pc, #492]	; (8002420 <HAL_DMA_IRQHandler+0x444>)
 8002234:	429a      	cmp	r2, r3
 8002236:	d958      	bls.n	80022ea <HAL_DMA_IRQHandler+0x30e>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a79      	ldr	r2, [pc, #484]	; (8002424 <HAL_DMA_IRQHandler+0x448>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d04f      	beq.n	80022e2 <HAL_DMA_IRQHandler+0x306>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a78      	ldr	r2, [pc, #480]	; (8002428 <HAL_DMA_IRQHandler+0x44c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d048      	beq.n	80022de <HAL_DMA_IRQHandler+0x302>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a76      	ldr	r2, [pc, #472]	; (800242c <HAL_DMA_IRQHandler+0x450>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d040      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x2fc>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a75      	ldr	r2, [pc, #468]	; (8002430 <HAL_DMA_IRQHandler+0x454>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d038      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x2f6>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a73      	ldr	r2, [pc, #460]	; (8002434 <HAL_DMA_IRQHandler+0x458>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d030      	beq.n	80022cc <HAL_DMA_IRQHandler+0x2f0>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a72      	ldr	r2, [pc, #456]	; (8002438 <HAL_DMA_IRQHandler+0x45c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d028      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x2ea>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a69      	ldr	r2, [pc, #420]	; (8002420 <HAL_DMA_IRQHandler+0x444>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d020      	beq.n	80022c0 <HAL_DMA_IRQHandler+0x2e4>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a6e      	ldr	r2, [pc, #440]	; (800243c <HAL_DMA_IRQHandler+0x460>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d019      	beq.n	80022bc <HAL_DMA_IRQHandler+0x2e0>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a6c      	ldr	r2, [pc, #432]	; (8002440 <HAL_DMA_IRQHandler+0x464>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d012      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x2dc>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a6b      	ldr	r2, [pc, #428]	; (8002444 <HAL_DMA_IRQHandler+0x468>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d00a      	beq.n	80022b2 <HAL_DMA_IRQHandler+0x2d6>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a69      	ldr	r2, [pc, #420]	; (8002448 <HAL_DMA_IRQHandler+0x46c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d102      	bne.n	80022ac <HAL_DMA_IRQHandler+0x2d0>
 80022a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022aa:	e01b      	b.n	80022e4 <HAL_DMA_IRQHandler+0x308>
 80022ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022b0:	e018      	b.n	80022e4 <HAL_DMA_IRQHandler+0x308>
 80022b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022b6:	e015      	b.n	80022e4 <HAL_DMA_IRQHandler+0x308>
 80022b8:	2320      	movs	r3, #32
 80022ba:	e013      	b.n	80022e4 <HAL_DMA_IRQHandler+0x308>
 80022bc:	2302      	movs	r3, #2
 80022be:	e011      	b.n	80022e4 <HAL_DMA_IRQHandler+0x308>
 80022c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022c4:	e00e      	b.n	80022e4 <HAL_DMA_IRQHandler+0x308>
 80022c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022ca:	e00b      	b.n	80022e4 <HAL_DMA_IRQHandler+0x308>
 80022cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022d0:	e008      	b.n	80022e4 <HAL_DMA_IRQHandler+0x308>
 80022d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022d6:	e005      	b.n	80022e4 <HAL_DMA_IRQHandler+0x308>
 80022d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022dc:	e002      	b.n	80022e4 <HAL_DMA_IRQHandler+0x308>
 80022de:	2320      	movs	r3, #32
 80022e0:	e000      	b.n	80022e4 <HAL_DMA_IRQHandler+0x308>
 80022e2:	2302      	movs	r3, #2
 80022e4:	4a59      	ldr	r2, [pc, #356]	; (800244c <HAL_DMA_IRQHandler+0x470>)
 80022e6:	6053      	str	r3, [r2, #4]
 80022e8:	e057      	b.n	800239a <HAL_DMA_IRQHandler+0x3be>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a4d      	ldr	r2, [pc, #308]	; (8002424 <HAL_DMA_IRQHandler+0x448>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d04f      	beq.n	8002394 <HAL_DMA_IRQHandler+0x3b8>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a4b      	ldr	r2, [pc, #300]	; (8002428 <HAL_DMA_IRQHandler+0x44c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d048      	beq.n	8002390 <HAL_DMA_IRQHandler+0x3b4>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a4a      	ldr	r2, [pc, #296]	; (800242c <HAL_DMA_IRQHandler+0x450>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d040      	beq.n	800238a <HAL_DMA_IRQHandler+0x3ae>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a48      	ldr	r2, [pc, #288]	; (8002430 <HAL_DMA_IRQHandler+0x454>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d038      	beq.n	8002384 <HAL_DMA_IRQHandler+0x3a8>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a47      	ldr	r2, [pc, #284]	; (8002434 <HAL_DMA_IRQHandler+0x458>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d030      	beq.n	800237e <HAL_DMA_IRQHandler+0x3a2>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a45      	ldr	r2, [pc, #276]	; (8002438 <HAL_DMA_IRQHandler+0x45c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d028      	beq.n	8002378 <HAL_DMA_IRQHandler+0x39c>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a3d      	ldr	r2, [pc, #244]	; (8002420 <HAL_DMA_IRQHandler+0x444>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d020      	beq.n	8002372 <HAL_DMA_IRQHandler+0x396>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a41      	ldr	r2, [pc, #260]	; (800243c <HAL_DMA_IRQHandler+0x460>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d019      	beq.n	800236e <HAL_DMA_IRQHandler+0x392>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a40      	ldr	r2, [pc, #256]	; (8002440 <HAL_DMA_IRQHandler+0x464>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d012      	beq.n	800236a <HAL_DMA_IRQHandler+0x38e>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a3e      	ldr	r2, [pc, #248]	; (8002444 <HAL_DMA_IRQHandler+0x468>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d00a      	beq.n	8002364 <HAL_DMA_IRQHandler+0x388>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a3d      	ldr	r2, [pc, #244]	; (8002448 <HAL_DMA_IRQHandler+0x46c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d102      	bne.n	800235e <HAL_DMA_IRQHandler+0x382>
 8002358:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800235c:	e01b      	b.n	8002396 <HAL_DMA_IRQHandler+0x3ba>
 800235e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002362:	e018      	b.n	8002396 <HAL_DMA_IRQHandler+0x3ba>
 8002364:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002368:	e015      	b.n	8002396 <HAL_DMA_IRQHandler+0x3ba>
 800236a:	2320      	movs	r3, #32
 800236c:	e013      	b.n	8002396 <HAL_DMA_IRQHandler+0x3ba>
 800236e:	2302      	movs	r3, #2
 8002370:	e011      	b.n	8002396 <HAL_DMA_IRQHandler+0x3ba>
 8002372:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002376:	e00e      	b.n	8002396 <HAL_DMA_IRQHandler+0x3ba>
 8002378:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800237c:	e00b      	b.n	8002396 <HAL_DMA_IRQHandler+0x3ba>
 800237e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002382:	e008      	b.n	8002396 <HAL_DMA_IRQHandler+0x3ba>
 8002384:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002388:	e005      	b.n	8002396 <HAL_DMA_IRQHandler+0x3ba>
 800238a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800238e:	e002      	b.n	8002396 <HAL_DMA_IRQHandler+0x3ba>
 8002390:	2320      	movs	r3, #32
 8002392:	e000      	b.n	8002396 <HAL_DMA_IRQHandler+0x3ba>
 8002394:	2302      	movs	r3, #2
 8002396:	4a2e      	ldr	r2, [pc, #184]	; (8002450 <HAL_DMA_IRQHandler+0x474>)
 8002398:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d034      	beq.n	8002414 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80023b2:	e02f      	b.n	8002414 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	2208      	movs	r2, #8
 80023ba:	409a      	lsls	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d028      	beq.n	8002416 <HAL_DMA_IRQHandler+0x43a>
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d023      	beq.n	8002416 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 020e 	bic.w	r2, r2, #14
 80023dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e6:	2101      	movs	r1, #1
 80023e8:	fa01 f202 	lsl.w	r2, r1, r2
 80023ec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002408:	2b00      	cmp	r3, #0
 800240a:	d004      	beq.n	8002416 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	4798      	blx	r3
    }
  }
  return;
 8002414:	bf00      	nop
 8002416:	bf00      	nop
}
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40020080 	.word	0x40020080
 8002424:	40020008 	.word	0x40020008
 8002428:	4002001c 	.word	0x4002001c
 800242c:	40020030 	.word	0x40020030
 8002430:	40020044 	.word	0x40020044
 8002434:	40020058 	.word	0x40020058
 8002438:	4002006c 	.word	0x4002006c
 800243c:	40020408 	.word	0x40020408
 8002440:	4002041c 	.word	0x4002041c
 8002444:	40020430 	.word	0x40020430
 8002448:	40020444 	.word	0x40020444
 800244c:	40020400 	.word	0x40020400
 8002450:	40020000 	.word	0x40020000

08002454 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
 8002460:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246a:	2101      	movs	r1, #1
 800246c:	fa01 f202 	lsl.w	r2, r1, r2
 8002470:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b10      	cmp	r3, #16
 8002480:	d108      	bne.n	8002494 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002492:	e007      	b.n	80024a4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	60da      	str	r2, [r3, #12]
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr
	...

080024b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b08b      	sub	sp, #44	; 0x2c
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ba:	2300      	movs	r3, #0
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024be:	2300      	movs	r3, #0
 80024c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c2:	e179      	b.n	80027b8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024c4:	2201      	movs	r2, #1
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	69fa      	ldr	r2, [r7, #28]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	429a      	cmp	r2, r3
 80024de:	f040 8168 	bne.w	80027b2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	4a96      	ldr	r2, [pc, #600]	; (8002740 <HAL_GPIO_Init+0x290>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d05e      	beq.n	80025aa <HAL_GPIO_Init+0xfa>
 80024ec:	4a94      	ldr	r2, [pc, #592]	; (8002740 <HAL_GPIO_Init+0x290>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d875      	bhi.n	80025de <HAL_GPIO_Init+0x12e>
 80024f2:	4a94      	ldr	r2, [pc, #592]	; (8002744 <HAL_GPIO_Init+0x294>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d058      	beq.n	80025aa <HAL_GPIO_Init+0xfa>
 80024f8:	4a92      	ldr	r2, [pc, #584]	; (8002744 <HAL_GPIO_Init+0x294>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d86f      	bhi.n	80025de <HAL_GPIO_Init+0x12e>
 80024fe:	4a92      	ldr	r2, [pc, #584]	; (8002748 <HAL_GPIO_Init+0x298>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d052      	beq.n	80025aa <HAL_GPIO_Init+0xfa>
 8002504:	4a90      	ldr	r2, [pc, #576]	; (8002748 <HAL_GPIO_Init+0x298>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d869      	bhi.n	80025de <HAL_GPIO_Init+0x12e>
 800250a:	4a90      	ldr	r2, [pc, #576]	; (800274c <HAL_GPIO_Init+0x29c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d04c      	beq.n	80025aa <HAL_GPIO_Init+0xfa>
 8002510:	4a8e      	ldr	r2, [pc, #568]	; (800274c <HAL_GPIO_Init+0x29c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d863      	bhi.n	80025de <HAL_GPIO_Init+0x12e>
 8002516:	4a8e      	ldr	r2, [pc, #568]	; (8002750 <HAL_GPIO_Init+0x2a0>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d046      	beq.n	80025aa <HAL_GPIO_Init+0xfa>
 800251c:	4a8c      	ldr	r2, [pc, #560]	; (8002750 <HAL_GPIO_Init+0x2a0>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d85d      	bhi.n	80025de <HAL_GPIO_Init+0x12e>
 8002522:	2b12      	cmp	r3, #18
 8002524:	d82a      	bhi.n	800257c <HAL_GPIO_Init+0xcc>
 8002526:	2b12      	cmp	r3, #18
 8002528:	d859      	bhi.n	80025de <HAL_GPIO_Init+0x12e>
 800252a:	a201      	add	r2, pc, #4	; (adr r2, 8002530 <HAL_GPIO_Init+0x80>)
 800252c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002530:	080025ab 	.word	0x080025ab
 8002534:	08002585 	.word	0x08002585
 8002538:	08002597 	.word	0x08002597
 800253c:	080025d9 	.word	0x080025d9
 8002540:	080025df 	.word	0x080025df
 8002544:	080025df 	.word	0x080025df
 8002548:	080025df 	.word	0x080025df
 800254c:	080025df 	.word	0x080025df
 8002550:	080025df 	.word	0x080025df
 8002554:	080025df 	.word	0x080025df
 8002558:	080025df 	.word	0x080025df
 800255c:	080025df 	.word	0x080025df
 8002560:	080025df 	.word	0x080025df
 8002564:	080025df 	.word	0x080025df
 8002568:	080025df 	.word	0x080025df
 800256c:	080025df 	.word	0x080025df
 8002570:	080025df 	.word	0x080025df
 8002574:	0800258d 	.word	0x0800258d
 8002578:	080025a1 	.word	0x080025a1
 800257c:	4a75      	ldr	r2, [pc, #468]	; (8002754 <HAL_GPIO_Init+0x2a4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d013      	beq.n	80025aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002582:	e02c      	b.n	80025de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	623b      	str	r3, [r7, #32]
          break;
 800258a:	e029      	b.n	80025e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	3304      	adds	r3, #4
 8002592:	623b      	str	r3, [r7, #32]
          break;
 8002594:	e024      	b.n	80025e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	3308      	adds	r3, #8
 800259c:	623b      	str	r3, [r7, #32]
          break;
 800259e:	e01f      	b.n	80025e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	330c      	adds	r3, #12
 80025a6:	623b      	str	r3, [r7, #32]
          break;
 80025a8:	e01a      	b.n	80025e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d102      	bne.n	80025b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025b2:	2304      	movs	r3, #4
 80025b4:	623b      	str	r3, [r7, #32]
          break;
 80025b6:	e013      	b.n	80025e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d105      	bne.n	80025cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025c0:	2308      	movs	r3, #8
 80025c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69fa      	ldr	r2, [r7, #28]
 80025c8:	611a      	str	r2, [r3, #16]
          break;
 80025ca:	e009      	b.n	80025e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025cc:	2308      	movs	r3, #8
 80025ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69fa      	ldr	r2, [r7, #28]
 80025d4:	615a      	str	r2, [r3, #20]
          break;
 80025d6:	e003      	b.n	80025e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025d8:	2300      	movs	r3, #0
 80025da:	623b      	str	r3, [r7, #32]
          break;
 80025dc:	e000      	b.n	80025e0 <HAL_GPIO_Init+0x130>
          break;
 80025de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	2bff      	cmp	r3, #255	; 0xff
 80025e4:	d801      	bhi.n	80025ea <HAL_GPIO_Init+0x13a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	e001      	b.n	80025ee <HAL_GPIO_Init+0x13e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3304      	adds	r3, #4
 80025ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	2bff      	cmp	r3, #255	; 0xff
 80025f4:	d802      	bhi.n	80025fc <HAL_GPIO_Init+0x14c>
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	e002      	b.n	8002602 <HAL_GPIO_Init+0x152>
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	3b08      	subs	r3, #8
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	210f      	movs	r1, #15
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	fa01 f303 	lsl.w	r3, r1, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	401a      	ands	r2, r3
 8002614:	6a39      	ldr	r1, [r7, #32]
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	fa01 f303 	lsl.w	r3, r1, r3
 800261c:	431a      	orrs	r2, r3
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 80c1 	beq.w	80027b2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002630:	4b49      	ldr	r3, [pc, #292]	; (8002758 <HAL_GPIO_Init+0x2a8>)
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	4a48      	ldr	r2, [pc, #288]	; (8002758 <HAL_GPIO_Init+0x2a8>)
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	6193      	str	r3, [r2, #24]
 800263c:	4b46      	ldr	r3, [pc, #280]	; (8002758 <HAL_GPIO_Init+0x2a8>)
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002648:	4a44      	ldr	r2, [pc, #272]	; (800275c <HAL_GPIO_Init+0x2ac>)
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	089b      	lsrs	r3, r3, #2
 800264e:	3302      	adds	r3, #2
 8002650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002654:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	220f      	movs	r2, #15
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	4013      	ands	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a3c      	ldr	r2, [pc, #240]	; (8002760 <HAL_GPIO_Init+0x2b0>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d01f      	beq.n	80026b4 <HAL_GPIO_Init+0x204>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a3b      	ldr	r2, [pc, #236]	; (8002764 <HAL_GPIO_Init+0x2b4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d019      	beq.n	80026b0 <HAL_GPIO_Init+0x200>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a3a      	ldr	r2, [pc, #232]	; (8002768 <HAL_GPIO_Init+0x2b8>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d013      	beq.n	80026ac <HAL_GPIO_Init+0x1fc>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a39      	ldr	r2, [pc, #228]	; (800276c <HAL_GPIO_Init+0x2bc>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d00d      	beq.n	80026a8 <HAL_GPIO_Init+0x1f8>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a38      	ldr	r2, [pc, #224]	; (8002770 <HAL_GPIO_Init+0x2c0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d007      	beq.n	80026a4 <HAL_GPIO_Init+0x1f4>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a37      	ldr	r2, [pc, #220]	; (8002774 <HAL_GPIO_Init+0x2c4>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d101      	bne.n	80026a0 <HAL_GPIO_Init+0x1f0>
 800269c:	2305      	movs	r3, #5
 800269e:	e00a      	b.n	80026b6 <HAL_GPIO_Init+0x206>
 80026a0:	2306      	movs	r3, #6
 80026a2:	e008      	b.n	80026b6 <HAL_GPIO_Init+0x206>
 80026a4:	2304      	movs	r3, #4
 80026a6:	e006      	b.n	80026b6 <HAL_GPIO_Init+0x206>
 80026a8:	2303      	movs	r3, #3
 80026aa:	e004      	b.n	80026b6 <HAL_GPIO_Init+0x206>
 80026ac:	2302      	movs	r3, #2
 80026ae:	e002      	b.n	80026b6 <HAL_GPIO_Init+0x206>
 80026b0:	2301      	movs	r3, #1
 80026b2:	e000      	b.n	80026b6 <HAL_GPIO_Init+0x206>
 80026b4:	2300      	movs	r3, #0
 80026b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b8:	f002 0203 	and.w	r2, r2, #3
 80026bc:	0092      	lsls	r2, r2, #2
 80026be:	4093      	lsls	r3, r2
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026c6:	4925      	ldr	r1, [pc, #148]	; (800275c <HAL_GPIO_Init+0x2ac>)
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	089b      	lsrs	r3, r3, #2
 80026cc:	3302      	adds	r3, #2
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d006      	beq.n	80026ee <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026e0:	4b25      	ldr	r3, [pc, #148]	; (8002778 <HAL_GPIO_Init+0x2c8>)
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	4924      	ldr	r1, [pc, #144]	; (8002778 <HAL_GPIO_Init+0x2c8>)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	608b      	str	r3, [r1, #8]
 80026ec:	e006      	b.n	80026fc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026ee:	4b22      	ldr	r3, [pc, #136]	; (8002778 <HAL_GPIO_Init+0x2c8>)
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	4920      	ldr	r1, [pc, #128]	; (8002778 <HAL_GPIO_Init+0x2c8>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d006      	beq.n	8002716 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002708:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <HAL_GPIO_Init+0x2c8>)
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	491a      	ldr	r1, [pc, #104]	; (8002778 <HAL_GPIO_Init+0x2c8>)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	60cb      	str	r3, [r1, #12]
 8002714:	e006      	b.n	8002724 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002716:	4b18      	ldr	r3, [pc, #96]	; (8002778 <HAL_GPIO_Init+0x2c8>)
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	43db      	mvns	r3, r3
 800271e:	4916      	ldr	r1, [pc, #88]	; (8002778 <HAL_GPIO_Init+0x2c8>)
 8002720:	4013      	ands	r3, r2
 8002722:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d025      	beq.n	800277c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <HAL_GPIO_Init+0x2c8>)
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	4910      	ldr	r1, [pc, #64]	; (8002778 <HAL_GPIO_Init+0x2c8>)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	4313      	orrs	r3, r2
 800273a:	604b      	str	r3, [r1, #4]
 800273c:	e025      	b.n	800278a <HAL_GPIO_Init+0x2da>
 800273e:	bf00      	nop
 8002740:	10320000 	.word	0x10320000
 8002744:	10310000 	.word	0x10310000
 8002748:	10220000 	.word	0x10220000
 800274c:	10210000 	.word	0x10210000
 8002750:	10120000 	.word	0x10120000
 8002754:	10110000 	.word	0x10110000
 8002758:	40021000 	.word	0x40021000
 800275c:	40010000 	.word	0x40010000
 8002760:	40010800 	.word	0x40010800
 8002764:	40010c00 	.word	0x40010c00
 8002768:	40011000 	.word	0x40011000
 800276c:	40011400 	.word	0x40011400
 8002770:	40011800 	.word	0x40011800
 8002774:	40011c00 	.word	0x40011c00
 8002778:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800277c:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <HAL_GPIO_Init+0x324>)
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	43db      	mvns	r3, r3
 8002784:	4913      	ldr	r1, [pc, #76]	; (80027d4 <HAL_GPIO_Init+0x324>)
 8002786:	4013      	ands	r3, r2
 8002788:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d006      	beq.n	80027a4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002796:	4b0f      	ldr	r3, [pc, #60]	; (80027d4 <HAL_GPIO_Init+0x324>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	490e      	ldr	r1, [pc, #56]	; (80027d4 <HAL_GPIO_Init+0x324>)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	4313      	orrs	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]
 80027a2:	e006      	b.n	80027b2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027a4:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <HAL_GPIO_Init+0x324>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	43db      	mvns	r3, r3
 80027ac:	4909      	ldr	r1, [pc, #36]	; (80027d4 <HAL_GPIO_Init+0x324>)
 80027ae:	4013      	ands	r3, r2
 80027b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	3301      	adds	r3, #1
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	fa22 f303 	lsr.w	r3, r2, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f47f ae7e 	bne.w	80024c4 <HAL_GPIO_Init+0x14>
  }
}
 80027c8:	bf00      	nop
 80027ca:	bf00      	nop
 80027cc:	372c      	adds	r7, #44	; 0x2c
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr
 80027d4:	40010400 	.word	0x40010400

080027d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	887b      	ldrh	r3, [r7, #2]
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027f0:	2301      	movs	r3, #1
 80027f2:	73fb      	strb	r3, [r7, #15]
 80027f4:	e001      	b.n	80027fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr

08002806 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	460b      	mov	r3, r1
 8002810:	807b      	strh	r3, [r7, #2]
 8002812:	4613      	mov	r3, r2
 8002814:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002816:	787b      	ldrb	r3, [r7, #1]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800281c:	887a      	ldrh	r2, [r7, #2]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002822:	e003      	b.n	800282c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002824:	887b      	ldrh	r3, [r7, #2]
 8002826:	041a      	lsls	r2, r3, #16
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	611a      	str	r2, [r3, #16]
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr

08002836 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002836:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002838:	b08b      	sub	sp, #44	; 0x2c
 800283a:	af06      	add	r7, sp, #24
 800283c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e0f1      	b.n	8002a2c <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d106      	bne.n	8002862 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f007 fae5 	bl	8009e2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2203      	movs	r2, #3
 8002866:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f003 fbfb 	bl	800606a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	603b      	str	r3, [r7, #0]
 800287a:	687e      	ldr	r6, [r7, #4]
 800287c:	466d      	mov	r5, sp
 800287e:	f106 0410 	add.w	r4, r6, #16
 8002882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002886:	6823      	ldr	r3, [r4, #0]
 8002888:	602b      	str	r3, [r5, #0]
 800288a:	1d33      	adds	r3, r6, #4
 800288c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800288e:	6838      	ldr	r0, [r7, #0]
 8002890:	f003 fbc5 	bl	800601e <USB_CoreInit>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d005      	beq.n	80028a6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2202      	movs	r2, #2
 800289e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e0c2      	b.n	8002a2c <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2100      	movs	r1, #0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f003 fbf6 	bl	800609e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028b2:	2300      	movs	r3, #0
 80028b4:	73fb      	strb	r3, [r7, #15]
 80028b6:	e040      	b.n	800293a <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	1c5a      	adds	r2, r3, #1
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	440b      	add	r3, r1
 80028c8:	3301      	adds	r3, #1
 80028ca:	2201      	movs	r2, #1
 80028cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	440b      	add	r3, r1
 80028de:	7bfa      	ldrb	r2, [r7, #15]
 80028e0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	440b      	add	r3, r1
 80028f2:	3303      	adds	r3, #3
 80028f4:	2200      	movs	r2, #0
 80028f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028f8:	7bfa      	ldrb	r2, [r7, #15]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	440b      	add	r3, r1
 8002906:	3338      	adds	r3, #56	; 0x38
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800290c:	7bfa      	ldrb	r2, [r7, #15]
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	440b      	add	r3, r1
 800291a:	333c      	adds	r3, #60	; 0x3c
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002920:	7bfa      	ldrb	r2, [r7, #15]
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	440b      	add	r3, r1
 800292e:	3340      	adds	r3, #64	; 0x40
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002934:	7bfb      	ldrb	r3, [r7, #15]
 8002936:	3301      	adds	r3, #1
 8002938:	73fb      	strb	r3, [r7, #15]
 800293a:	7bfa      	ldrb	r2, [r7, #15]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	429a      	cmp	r2, r3
 8002942:	d3b9      	bcc.n	80028b8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002944:	2300      	movs	r3, #0
 8002946:	73fb      	strb	r3, [r7, #15]
 8002948:	e044      	b.n	80029d4 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800294a:	7bfa      	ldrb	r2, [r7, #15]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	440b      	add	r3, r1
 8002958:	f203 1369 	addw	r3, r3, #361	; 0x169
 800295c:	2200      	movs	r2, #0
 800295e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002960:	7bfa      	ldrb	r2, [r7, #15]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	440b      	add	r3, r1
 800296e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002972:	7bfa      	ldrb	r2, [r7, #15]
 8002974:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002976:	7bfa      	ldrb	r2, [r7, #15]
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	440b      	add	r3, r1
 8002984:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800298c:	7bfa      	ldrb	r2, [r7, #15]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	440b      	add	r3, r1
 800299a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029a2:	7bfa      	ldrb	r2, [r7, #15]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	440b      	add	r3, r1
 80029b0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029b8:	7bfa      	ldrb	r2, [r7, #15]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	440b      	add	r3, r1
 80029c6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	3301      	adds	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
 80029d4:	7bfa      	ldrb	r2, [r7, #15]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d3b5      	bcc.n	800294a <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	687e      	ldr	r6, [r7, #4]
 80029e6:	466d      	mov	r5, sp
 80029e8:	f106 0410 	add.w	r4, r6, #16
 80029ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029f0:	6823      	ldr	r3, [r4, #0]
 80029f2:	602b      	str	r3, [r5, #0]
 80029f4:	1d33      	adds	r3, r6, #4
 80029f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029f8:	6838      	ldr	r0, [r7, #0]
 80029fa:	f003 fb5c 	bl	80060b6 <USB_DevInit>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e00d      	b.n	8002a2c <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f005 fdde 	bl	80085e6 <USB_DevDisconnect>

  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a34 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_PCD_Start+0x16>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e016      	b.n	8002a78 <HAL_PCD_Start+0x44>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f003 faf1 	bl	800603e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f007 fc33 	bl	800a2ca <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f005 fdb2 	bl	80085d2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f005 fdb4 	bl	80085fa <USB_ReadInterrupts>
 8002a92:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 fb04 	bl	80030ac <PCD_EP_ISR_Handler>

    return;
 8002aa4:	e119      	b.n	8002cda <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d013      	beq.n	8002ad8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac2:	b292      	uxth	r2, r2
 8002ac4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f007 fa2a 	bl	8009f22 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002ace:	2100      	movs	r1, #0
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f905 	bl	8002ce0 <HAL_PCD_SetAddress>

    return;
 8002ad6:	e100      	b.n	8002cda <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00c      	beq.n	8002afc <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002af4:	b292      	uxth	r2, r2
 8002af6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002afa:	e0ee      	b.n	8002cda <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00c      	beq.n	8002b20 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b18:	b292      	uxth	r2, r2
 8002b1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002b1e:	e0dc      	b.n	8002cda <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d027      	beq.n	8002b7a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0204 	bic.w	r2, r2, #4
 8002b3c:	b292      	uxth	r2, r2
 8002b3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0208 	bic.w	r2, r2, #8
 8002b54:	b292      	uxth	r2, r2
 8002b56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f007 fa1a 	bl	8009f94 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b72:	b292      	uxth	r2, r2
 8002b74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002b78:	e0af      	b.n	8002cda <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 8083 	beq.w	8002c8c <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002b86:	2300      	movs	r3, #0
 8002b88:	77fb      	strb	r3, [r7, #31]
 8002b8a:	e010      	b.n	8002bae <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	7ffb      	ldrb	r3, [r7, #31]
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	441a      	add	r2, r3
 8002b98:	7ffb      	ldrb	r3, [r7, #31]
 8002b9a:	8812      	ldrh	r2, [r2, #0]
 8002b9c:	b292      	uxth	r2, r2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	3320      	adds	r3, #32
 8002ba2:	443b      	add	r3, r7
 8002ba4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002ba8:	7ffb      	ldrb	r3, [r7, #31]
 8002baa:	3301      	adds	r3, #1
 8002bac:	77fb      	strb	r3, [r7, #31]
 8002bae:	7ffb      	ldrb	r3, [r7, #31]
 8002bb0:	2b07      	cmp	r3, #7
 8002bb2:	d9eb      	bls.n	8002b8c <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	b292      	uxth	r2, r2
 8002bc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0201 	bic.w	r2, r2, #1
 8002bde:	b292      	uxth	r2, r2
 8002be0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002be4:	bf00      	nop
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0f6      	beq.n	8002be6 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c0a:	b292      	uxth	r2, r2
 8002c0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002c10:	2300      	movs	r3, #0
 8002c12:	77fb      	strb	r3, [r7, #31]
 8002c14:	e00f      	b.n	8002c36 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002c16:	7ffb      	ldrb	r3, [r7, #31]
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6812      	ldr	r2, [r2, #0]
 8002c1c:	4611      	mov	r1, r2
 8002c1e:	7ffa      	ldrb	r2, [r7, #31]
 8002c20:	0092      	lsls	r2, r2, #2
 8002c22:	440a      	add	r2, r1
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	3320      	adds	r3, #32
 8002c28:	443b      	add	r3, r7
 8002c2a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002c2e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002c30:	7ffb      	ldrb	r3, [r7, #31]
 8002c32:	3301      	adds	r3, #1
 8002c34:	77fb      	strb	r3, [r7, #31]
 8002c36:	7ffb      	ldrb	r3, [r7, #31]
 8002c38:	2b07      	cmp	r3, #7
 8002c3a:	d9ec      	bls.n	8002c16 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0208 	orr.w	r2, r2, #8
 8002c4e:	b292      	uxth	r2, r2
 8002c50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c66:	b292      	uxth	r2, r2
 8002c68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0204 	orr.w	r2, r2, #4
 8002c7e:	b292      	uxth	r2, r2
 8002c80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f007 f96b 	bl	8009f60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002c8a:	e026      	b.n	8002cda <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00f      	beq.n	8002cb6 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ca8:	b292      	uxth	r2, r2
 8002caa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f007 f929 	bl	8009f06 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002cb4:	e011      	b.n	8002cda <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00c      	beq.n	8002cda <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cd2:	b292      	uxth	r2, r2
 8002cd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002cd8:	bf00      	nop
  }
}
 8002cda:	3720      	adds	r7, #32
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d101      	bne.n	8002cfa <HAL_PCD_SetAddress+0x1a>
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e013      	b.n	8002d22 <HAL_PCD_SetAddress+0x42>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	78fa      	ldrb	r2, [r7, #3]
 8002d06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	78fa      	ldrb	r2, [r7, #3]
 8002d10:	4611      	mov	r1, r2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f005 fc4a 	bl	80085ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b084      	sub	sp, #16
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
 8002d32:	4608      	mov	r0, r1
 8002d34:	4611      	mov	r1, r2
 8002d36:	461a      	mov	r2, r3
 8002d38:	4603      	mov	r3, r0
 8002d3a:	70fb      	strb	r3, [r7, #3]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	803b      	strh	r3, [r7, #0]
 8002d40:	4613      	mov	r3, r2
 8002d42:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	da0e      	bge.n	8002d6e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d50:	78fb      	ldrb	r3, [r7, #3]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	4413      	add	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	705a      	strb	r2, [r3, #1]
 8002d6c:	e00e      	b.n	8002d8c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d6e:	78fb      	ldrb	r3, [r7, #3]
 8002d70:	f003 0207 	and.w	r2, r3, #7
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	4413      	add	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d98:	883a      	ldrh	r2, [r7, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	78ba      	ldrb	r2, [r7, #2]
 8002da2:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002da4:	78bb      	ldrb	r3, [r7, #2]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d102      	bne.n	8002db0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_PCD_EP_Open+0x94>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e00e      	b.n	8002ddc <HAL_PCD_EP_Open+0xb2>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68f9      	ldr	r1, [r7, #12]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f003 f993 	bl	80060f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002dda:	7afb      	ldrb	r3, [r7, #11]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002df0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	da0e      	bge.n	8002e16 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	1c5a      	adds	r2, r3, #1
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2201      	movs	r2, #1
 8002e12:	705a      	strb	r2, [r3, #1]
 8002e14:	e00e      	b.n	8002e34 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e16:	78fb      	ldrb	r3, [r7, #3]
 8002e18:	f003 0207 	and.w	r2, r3, #7
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e34:	78fb      	ldrb	r3, [r7, #3]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d101      	bne.n	8002e4e <HAL_PCD_EP_Close+0x6a>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	e00e      	b.n	8002e6c <HAL_PCD_EP_Close+0x88>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68f9      	ldr	r1, [r7, #12]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f003 fd0b 	bl	8006878 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	607a      	str	r2, [r7, #4]
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	460b      	mov	r3, r1
 8002e82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e84:	7afb      	ldrb	r3, [r7, #11]
 8002e86:	f003 0207 	and.w	r2, r3, #7
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4413      	add	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eb4:	7afb      	ldrb	r3, [r7, #11]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6979      	ldr	r1, [r7, #20]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f003 fec2 	bl	8006c50 <USB_EPStartXfer>

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b086      	sub	sp, #24
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	607a      	str	r2, [r7, #4]
 8002ee0:	603b      	str	r3, [r7, #0]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ee6:	7afb      	ldrb	r3, [r7, #11]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	4613      	mov	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4413      	add	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f22:	7afb      	ldrb	r3, [r7, #11]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6979      	ldr	r1, [r7, #20]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f003 fe8b 	bl	8006c50 <USB_EPStartXfer>

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	f003 0207 	and.w	r2, r3, #7
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d901      	bls.n	8002f62 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e04c      	b.n	8002ffc <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	da0e      	bge.n	8002f88 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f6a:	78fb      	ldrb	r3, [r7, #3]
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	4613      	mov	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2201      	movs	r2, #1
 8002f84:	705a      	strb	r2, [r3, #1]
 8002f86:	e00c      	b.n	8002fa2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f88:	78fa      	ldrb	r2, [r7, #3]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	4413      	add	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fa8:	78fb      	ldrb	r3, [r7, #3]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d101      	bne.n	8002fc2 <HAL_PCD_EP_SetStall+0x7e>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	e01c      	b.n	8002ffc <HAL_PCD_EP_SetStall+0xb8>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68f9      	ldr	r1, [r7, #12]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f005 f9ee 	bl	80083b2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fd6:	78fb      	ldrb	r3, [r7, #3]
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d108      	bne.n	8002ff2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002fea:	4619      	mov	r1, r3
 8002fec:	4610      	mov	r0, r2
 8002fee:	f005 fb13 	bl	8008618 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	460b      	mov	r3, r1
 800300e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003010:	78fb      	ldrb	r3, [r7, #3]
 8003012:	f003 020f 	and.w	r2, r3, #15
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	429a      	cmp	r2, r3
 800301c:	d901      	bls.n	8003022 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e040      	b.n	80030a4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003022:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003026:	2b00      	cmp	r3, #0
 8003028:	da0e      	bge.n	8003048 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800302a:	78fb      	ldrb	r3, [r7, #3]
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	4413      	add	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2201      	movs	r2, #1
 8003044:	705a      	strb	r2, [r3, #1]
 8003046:	e00e      	b.n	8003066 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003048:	78fb      	ldrb	r3, [r7, #3]
 800304a:	f003 0207 	and.w	r2, r3, #7
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	4413      	add	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800306c:	78fb      	ldrb	r3, [r7, #3]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	b2da      	uxtb	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_PCD_EP_ClrStall+0x82>
 8003082:	2302      	movs	r3, #2
 8003084:	e00e      	b.n	80030a4 <HAL_PCD_EP_ClrStall+0xa0>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68f9      	ldr	r1, [r7, #12]
 8003094:	4618      	mov	r0, r3
 8003096:	f005 f9dc 	bl	8008452 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b096      	sub	sp, #88	; 0x58
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80030b4:	e3bf      	b.n	8003836 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80030c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	f003 030f 	and.w	r3, r3, #15
 80030cc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80030d0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f040 8179 	bne.w	80033cc <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80030da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030de:	f003 0310 	and.w	r3, r3, #16
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d152      	bne.n	800318c <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80030f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f6:	81fb      	strh	r3, [r7, #14]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	89fb      	ldrh	r3, [r7, #14]
 80030fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003102:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003106:	b29b      	uxth	r3, r3
 8003108:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3328      	adds	r3, #40	; 0x28
 800310e:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003118:	b29b      	uxth	r3, r3
 800311a:	461a      	mov	r2, r3
 800311c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	4413      	add	r3, r2
 8003124:	3302      	adds	r3, #2
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	4413      	add	r3, r2
 800312e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800313a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800313c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800313e:	695a      	ldr	r2, [r3, #20]
 8003140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	441a      	add	r2, r3
 8003146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003148:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800314a:	2100      	movs	r1, #0
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f006 fec0 	bl	8009ed2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 836b 	beq.w	8003836 <PCD_EP_ISR_Handler+0x78a>
 8003160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	2b00      	cmp	r3, #0
 8003166:	f040 8366 	bne.w	8003836 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003170:	b2db      	uxtb	r3, r3
 8003172:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003176:	b2da      	uxtb	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	b292      	uxth	r2, r2
 800317e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800318a:	e354      	b.n	8003836 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003192:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800319e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80031a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d034      	beq.n	8003214 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	461a      	mov	r2, r3
 80031b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4413      	add	r3, r2
 80031be:	3306      	adds	r3, #6
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6812      	ldr	r2, [r2, #0]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031d4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6818      	ldr	r0, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80031e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031e2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80031e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031e6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	f005 fa65 	bl	80086b8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80031fa:	4013      	ands	r3, r2
 80031fc:	823b      	strh	r3, [r7, #16]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	8a3a      	ldrh	r2, [r7, #16]
 8003204:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003208:	b292      	uxth	r2, r2
 800320a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f006 fe33 	bl	8009e78 <HAL_PCD_SetupStageCallback>
 8003212:	e310      	b.n	8003836 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003214:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003218:	2b00      	cmp	r3, #0
 800321a:	f280 830c 	bge.w	8003836 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	b29a      	uxth	r2, r3
 8003226:	f640 738f 	movw	r3, #3983	; 0xf8f
 800322a:	4013      	ands	r3, r2
 800322c:	83fb      	strh	r3, [r7, #30]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	8bfa      	ldrh	r2, [r7, #30]
 8003234:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003238:	b292      	uxth	r2, r2
 800323a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003244:	b29b      	uxth	r3, r3
 8003246:	461a      	mov	r2, r3
 8003248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4413      	add	r3, r2
 8003250:	3306      	adds	r3, #6
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	4413      	add	r3, r2
 800325a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800325e:	881b      	ldrh	r3, [r3, #0]
 8003260:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003266:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d019      	beq.n	80032a4 <PCD_EP_ISR_Handler+0x1f8>
 8003270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d015      	beq.n	80032a4 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6818      	ldr	r0, [r3, #0]
 800327c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800327e:	6959      	ldr	r1, [r3, #20]
 8003280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003282:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003286:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003288:	b29b      	uxth	r3, r3
 800328a:	f005 fa15 	bl	80086b8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800328e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	441a      	add	r2, r3
 8003298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800329a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800329c:	2100      	movs	r1, #0
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f006 fdfc 	bl	8009e9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80032ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80032b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f040 82bd 	bne.w	8003836 <PCD_EP_ISR_Handler+0x78a>
 80032bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80032c0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80032c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032c8:	f000 82b5 	beq.w	8003836 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	61bb      	str	r3, [r7, #24]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032da:	b29b      	uxth	r3, r3
 80032dc:	461a      	mov	r2, r3
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	4413      	add	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	801a      	strh	r2, [r3, #0]
 80032fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	2b3e      	cmp	r3, #62	; 0x3e
 8003302:	d91d      	bls.n	8003340 <PCD_EP_ISR_Handler+0x294>
 8003304:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	095b      	lsrs	r3, r3, #5
 800330a:	647b      	str	r3, [r7, #68]	; 0x44
 800330c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	f003 031f 	and.w	r3, r3, #31
 8003314:	2b00      	cmp	r3, #0
 8003316:	d102      	bne.n	800331e <PCD_EP_ISR_Handler+0x272>
 8003318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800331a:	3b01      	subs	r3, #1
 800331c:	647b      	str	r3, [r7, #68]	; 0x44
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	b29a      	uxth	r2, r3
 8003324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003326:	b29b      	uxth	r3, r3
 8003328:	029b      	lsls	r3, r3, #10
 800332a:	b29b      	uxth	r3, r3
 800332c:	4313      	orrs	r3, r2
 800332e:	b29b      	uxth	r3, r3
 8003330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003338:	b29a      	uxth	r2, r3
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	801a      	strh	r2, [r3, #0]
 800333e:	e026      	b.n	800338e <PCD_EP_ISR_Handler+0x2e2>
 8003340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10a      	bne.n	800335e <PCD_EP_ISR_Handler+0x2b2>
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	b29b      	uxth	r3, r3
 800334e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003356:	b29a      	uxth	r2, r3
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	801a      	strh	r2, [r3, #0]
 800335c:	e017      	b.n	800338e <PCD_EP_ISR_Handler+0x2e2>
 800335e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	085b      	lsrs	r3, r3, #1
 8003364:	647b      	str	r3, [r7, #68]	; 0x44
 8003366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <PCD_EP_ISR_Handler+0x2cc>
 8003372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003374:	3301      	adds	r3, #1
 8003376:	647b      	str	r3, [r7, #68]	; 0x44
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	b29a      	uxth	r2, r3
 800337e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003380:	b29b      	uxth	r3, r3
 8003382:	029b      	lsls	r3, r3, #10
 8003384:	b29b      	uxth	r3, r3
 8003386:	4313      	orrs	r3, r2
 8003388:	b29a      	uxth	r2, r3
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	b29b      	uxth	r3, r3
 8003396:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800339a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339e:	827b      	strh	r3, [r7, #18]
 80033a0:	8a7b      	ldrh	r3, [r7, #18]
 80033a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80033a6:	827b      	strh	r3, [r7, #18]
 80033a8:	8a7b      	ldrh	r3, [r7, #18]
 80033aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80033ae:	827b      	strh	r3, [r7, #18]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	8a7b      	ldrh	r3, [r7, #18]
 80033b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	8013      	strh	r3, [r2, #0]
 80033ca:	e234      	b.n	8003836 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	461a      	mov	r2, r3
 80033d2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80033e0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f280 80fc 	bge.w	80035e2 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003400:	4013      	ands	r3, r2
 8003402:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	461a      	mov	r2, r3
 800340c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003418:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800341c:	b292      	uxth	r2, r2
 800341e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003420:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	4413      	add	r3, r2
 8003434:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003438:	7b1b      	ldrb	r3, [r3, #12]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d125      	bne.n	800348a <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003446:	b29b      	uxth	r3, r3
 8003448:	461a      	mov	r2, r3
 800344a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4413      	add	r3, r2
 8003452:	3306      	adds	r3, #6
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6812      	ldr	r2, [r2, #0]
 800345a:	4413      	add	r3, r2
 800345c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003466:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800346a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 8092 	beq.w	8003598 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6818      	ldr	r0, [r3, #0]
 8003478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800347a:	6959      	ldr	r1, [r3, #20]
 800347c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800347e:	88da      	ldrh	r2, [r3, #6]
 8003480:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003484:	f005 f918 	bl	80086b8 <USB_ReadPMA>
 8003488:	e086      	b.n	8003598 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800348a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800348c:	78db      	ldrb	r3, [r3, #3]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d10a      	bne.n	80034a8 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003492:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003496:	461a      	mov	r2, r3
 8003498:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f9d9 	bl	8003852 <HAL_PCD_EP_DB_Receive>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80034a6:	e077      	b.n	8003598 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	461a      	mov	r2, r3
 80034ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	461a      	mov	r2, r3
 80034cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	441a      	add	r2, r3
 80034d4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80034d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	461a      	mov	r2, r3
 80034f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d024      	beq.n	8003550 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800350e:	b29b      	uxth	r3, r3
 8003510:	461a      	mov	r2, r3
 8003512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4413      	add	r3, r2
 800351a:	3302      	adds	r3, #2
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6812      	ldr	r2, [r2, #0]
 8003522:	4413      	add	r3, r2
 8003524:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800352e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003532:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003536:	2b00      	cmp	r3, #0
 8003538:	d02e      	beq.n	8003598 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6818      	ldr	r0, [r3, #0]
 800353e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003540:	6959      	ldr	r1, [r3, #20]
 8003542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003544:	891a      	ldrh	r2, [r3, #8]
 8003546:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800354a:	f005 f8b5 	bl	80086b8 <USB_ReadPMA>
 800354e:	e023      	b.n	8003598 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003558:	b29b      	uxth	r3, r3
 800355a:	461a      	mov	r2, r3
 800355c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4413      	add	r3, r2
 8003564:	3306      	adds	r3, #6
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6812      	ldr	r2, [r2, #0]
 800356c:	4413      	add	r3, r2
 800356e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003578:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800357c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003580:	2b00      	cmp	r3, #0
 8003582:	d009      	beq.n	8003598 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6818      	ldr	r0, [r3, #0]
 8003588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800358a:	6959      	ldr	r1, [r3, #20]
 800358c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800358e:	895a      	ldrh	r2, [r3, #10]
 8003590:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003594:	f005 f890 	bl	80086b8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800359a:	69da      	ldr	r2, [r3, #28]
 800359c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035a0:	441a      	add	r2, r3
 80035a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80035a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a8:	695a      	ldr	r2, [r3, #20]
 80035aa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035ae:	441a      	add	r2, r3
 80035b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80035b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <PCD_EP_ISR_Handler+0x51c>
 80035bc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80035c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d206      	bcs.n	80035d6 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80035c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	4619      	mov	r1, r3
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f006 fc64 	bl	8009e9c <HAL_PCD_DataOutStageCallback>
 80035d4:	e005      	b.n	80035e2 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035dc:	4618      	mov	r0, r3
 80035de:	f003 fb37 	bl	8006c50 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80035e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80035e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 8123 	beq.w	8003836 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 80035f0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	4613      	mov	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	4413      	add	r3, r2
 8003602:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	461a      	mov	r2, r3
 800360a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	b29b      	uxth	r3, r3
 8003616:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800361a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800361e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	441a      	add	r2, r3
 8003630:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003634:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003638:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800363c:	b29b      	uxth	r3, r3
 800363e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003642:	78db      	ldrb	r3, [r3, #3]
 8003644:	2b01      	cmp	r3, #1
 8003646:	f040 80a2 	bne.w	800378e <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 800364a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800364c:	2200      	movs	r2, #0
 800364e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003652:	7b1b      	ldrb	r3, [r3, #12]
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 8093 	beq.w	8003780 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800365a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800365e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003662:	2b00      	cmp	r3, #0
 8003664:	d046      	beq.n	80036f4 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003668:	785b      	ldrb	r3, [r3, #1]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d126      	bne.n	80036bc <PCD_EP_ISR_Handler+0x610>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	627b      	str	r3, [r7, #36]	; 0x24
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800367c:	b29b      	uxth	r3, r3
 800367e:	461a      	mov	r2, r3
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	4413      	add	r3, r2
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
 8003686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	011a      	lsls	r2, r3, #4
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	4413      	add	r3, r2
 8003690:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003694:	623b      	str	r3, [r7, #32]
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	b29b      	uxth	r3, r3
 800369c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	801a      	strh	r2, [r3, #0]
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	801a      	strh	r2, [r3, #0]
 80036ba:	e061      	b.n	8003780 <PCD_EP_ISR_Handler+0x6d4>
 80036bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036be:	785b      	ldrb	r3, [r3, #1]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d15d      	bne.n	8003780 <PCD_EP_ISR_Handler+0x6d4>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	461a      	mov	r2, r3
 80036d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d8:	4413      	add	r3, r2
 80036da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	011a      	lsls	r2, r3, #4
 80036e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e4:	4413      	add	r3, r2
 80036e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80036ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80036ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ee:	2200      	movs	r2, #0
 80036f0:	801a      	strh	r2, [r3, #0]
 80036f2:	e045      	b.n	8003780 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036fc:	785b      	ldrb	r3, [r3, #1]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d126      	bne.n	8003750 <PCD_EP_ISR_Handler+0x6a4>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	637b      	str	r3, [r7, #52]	; 0x34
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003710:	b29b      	uxth	r3, r3
 8003712:	461a      	mov	r2, r3
 8003714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003716:	4413      	add	r3, r2
 8003718:	637b      	str	r3, [r7, #52]	; 0x34
 800371a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	011a      	lsls	r2, r3, #4
 8003720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003722:	4413      	add	r3, r2
 8003724:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003728:	633b      	str	r3, [r7, #48]	; 0x30
 800372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	b29b      	uxth	r3, r3
 8003730:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003734:	b29a      	uxth	r2, r3
 8003736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003738:	801a      	strh	r2, [r3, #0]
 800373a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	b29b      	uxth	r3, r3
 8003740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003748:	b29a      	uxth	r2, r3
 800374a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374c:	801a      	strh	r2, [r3, #0]
 800374e:	e017      	b.n	8003780 <PCD_EP_ISR_Handler+0x6d4>
 8003750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003752:	785b      	ldrb	r3, [r3, #1]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d113      	bne.n	8003780 <PCD_EP_ISR_Handler+0x6d4>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003760:	b29b      	uxth	r3, r3
 8003762:	461a      	mov	r2, r3
 8003764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003766:	4413      	add	r3, r2
 8003768:	63fb      	str	r3, [r7, #60]	; 0x3c
 800376a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	011a      	lsls	r2, r3, #4
 8003770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003772:	4413      	add	r3, r2
 8003774:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003778:	63bb      	str	r3, [r7, #56]	; 0x38
 800377a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377c:	2200      	movs	r2, #0
 800377e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	4619      	mov	r1, r3
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f006 fba3 	bl	8009ed2 <HAL_PCD_DataInStageCallback>
 800378c:	e053      	b.n	8003836 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800378e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d146      	bne.n	8003828 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	461a      	mov	r2, r3
 80037a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	4413      	add	r3, r2
 80037ae:	3302      	adds	r3, #2
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6812      	ldr	r2, [r2, #0]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80037c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037c8:	699a      	ldr	r2, [r3, #24]
 80037ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d907      	bls.n	80037e2 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80037d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80037da:	1ad2      	subs	r2, r2, r3
 80037dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037de:	619a      	str	r2, [r3, #24]
 80037e0:	e002      	b.n	80037e8 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80037e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e4:	2200      	movs	r2, #0
 80037e6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80037e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d106      	bne.n	80037fe <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	4619      	mov	r1, r3
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f006 fb6b 	bl	8009ed2 <HAL_PCD_DataInStageCallback>
 80037fc:	e01b      	b.n	8003836 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80037fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003800:	695a      	ldr	r2, [r3, #20]
 8003802:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003806:	441a      	add	r2, r3
 8003808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800380a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800380c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800380e:	69da      	ldr	r2, [r3, #28]
 8003810:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003814:	441a      	add	r2, r3
 8003816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003818:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003820:	4618      	mov	r0, r3
 8003822:	f003 fa15 	bl	8006c50 <USB_EPStartXfer>
 8003826:	e006      	b.n	8003836 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003828:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800382c:	461a      	mov	r2, r3
 800382e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f91b 	bl	8003a6c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800383e:	b29b      	uxth	r3, r3
 8003840:	b21b      	sxth	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	f6ff ac37 	blt.w	80030b6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3758      	adds	r7, #88	; 0x58
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b088      	sub	sp, #32
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	4613      	mov	r3, r2
 800385e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003860:	88fb      	ldrh	r3, [r7, #6]
 8003862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d07e      	beq.n	8003968 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003872:	b29b      	uxth	r3, r3
 8003874:	461a      	mov	r2, r3
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	4413      	add	r3, r2
 800387e:	3302      	adds	r3, #2
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	6812      	ldr	r2, [r2, #0]
 8003886:	4413      	add	r3, r2
 8003888:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003892:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	699a      	ldr	r2, [r3, #24]
 8003898:	8b7b      	ldrh	r3, [r7, #26]
 800389a:	429a      	cmp	r2, r3
 800389c:	d306      	bcc.n	80038ac <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	8b7b      	ldrh	r3, [r7, #26]
 80038a4:	1ad2      	subs	r2, r2, r3
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	619a      	str	r2, [r3, #24]
 80038aa:	e002      	b.n	80038b2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2200      	movs	r2, #0
 80038b0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d123      	bne.n	8003902 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	461a      	mov	r2, r3
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d4:	833b      	strh	r3, [r7, #24]
 80038d6:	8b3b      	ldrh	r3, [r7, #24]
 80038d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80038dc:	833b      	strh	r3, [r7, #24]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	441a      	add	r2, r3
 80038ec:	8b3b      	ldrh	r3, [r7, #24]
 80038ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038fe:	b29b      	uxth	r3, r3
 8003900:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003902:	88fb      	ldrh	r3, [r7, #6]
 8003904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003908:	2b00      	cmp	r3, #0
 800390a:	d01f      	beq.n	800394c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	461a      	mov	r2, r3
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	b29b      	uxth	r3, r3
 800391e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003926:	82fb      	strh	r3, [r7, #22]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	461a      	mov	r2, r3
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	441a      	add	r2, r3
 8003936:	8afb      	ldrh	r3, [r7, #22]
 8003938:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800393c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003944:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003948:	b29b      	uxth	r3, r3
 800394a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800394c:	8b7b      	ldrh	r3, [r7, #26]
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 8087 	beq.w	8003a62 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6818      	ldr	r0, [r3, #0]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	6959      	ldr	r1, [r3, #20]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	891a      	ldrh	r2, [r3, #8]
 8003960:	8b7b      	ldrh	r3, [r7, #26]
 8003962:	f004 fea9 	bl	80086b8 <USB_ReadPMA>
 8003966:	e07c      	b.n	8003a62 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003970:	b29b      	uxth	r3, r3
 8003972:	461a      	mov	r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	4413      	add	r3, r2
 800397c:	3306      	adds	r3, #6
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	4413      	add	r3, r2
 8003986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003990:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	699a      	ldr	r2, [r3, #24]
 8003996:	8b7b      	ldrh	r3, [r7, #26]
 8003998:	429a      	cmp	r2, r3
 800399a:	d306      	bcc.n	80039aa <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	699a      	ldr	r2, [r3, #24]
 80039a0:	8b7b      	ldrh	r3, [r7, #26]
 80039a2:	1ad2      	subs	r2, r2, r3
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	619a      	str	r2, [r3, #24]
 80039a8:	e002      	b.n	80039b0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2200      	movs	r2, #0
 80039ae:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d123      	bne.n	8003a00 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	461a      	mov	r2, r3
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d2:	83fb      	strh	r3, [r7, #30]
 80039d4:	8bfb      	ldrh	r3, [r7, #30]
 80039d6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80039da:	83fb      	strh	r3, [r7, #30]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	461a      	mov	r2, r3
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	441a      	add	r2, r3
 80039ea:	8bfb      	ldrh	r3, [r7, #30]
 80039ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003a00:	88fb      	ldrh	r3, [r7, #6]
 8003a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d11f      	bne.n	8003a4a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a24:	83bb      	strh	r3, [r7, #28]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	441a      	add	r2, r3
 8003a34:	8bbb      	ldrh	r3, [r7, #28]
 8003a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a4a:	8b7b      	ldrh	r3, [r7, #26]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	6959      	ldr	r1, [r3, #20]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	895a      	ldrh	r2, [r3, #10]
 8003a5c:	8b7b      	ldrh	r3, [r7, #26]
 8003a5e:	f004 fe2b 	bl	80086b8 <USB_ReadPMA>
    }
  }

  return count;
 8003a62:	8b7b      	ldrh	r3, [r7, #26]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3720      	adds	r7, #32
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b0a4      	sub	sp, #144	; 0x90
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	4613      	mov	r3, r2
 8003a78:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 81dd 	beq.w	8003e40 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	461a      	mov	r2, r3
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	4413      	add	r3, r2
 8003a9a:	3302      	adds	r3, #2
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	6812      	ldr	r2, [r2, #0]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aae:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d907      	bls.n	8003ace <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	699a      	ldr	r2, [r3, #24]
 8003ac2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003ac6:	1ad2      	subs	r2, r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	619a      	str	r2, [r3, #24]
 8003acc:	e002      	b.n	8003ad4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f040 80b9 	bne.w	8003c50 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	785b      	ldrb	r3, [r3, #1]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d126      	bne.n	8003b34 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	461a      	mov	r2, r3
 8003af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afa:	4413      	add	r3, r2
 8003afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	011a      	lsls	r2, r3, #4
 8003b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b06:	4413      	add	r3, r2
 8003b08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1c:	801a      	strh	r2, [r3, #0]
 8003b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b30:	801a      	strh	r2, [r3, #0]
 8003b32:	e01a      	b.n	8003b6a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	785b      	ldrb	r3, [r3, #1]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d116      	bne.n	8003b6a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	637b      	str	r3, [r7, #52]	; 0x34
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b50:	4413      	add	r3, r2
 8003b52:	637b      	str	r3, [r7, #52]	; 0x34
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	011a      	lsls	r2, r3, #4
 8003b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b62:	633b      	str	r3, [r7, #48]	; 0x30
 8003b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b66:	2200      	movs	r2, #0
 8003b68:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	785b      	ldrb	r3, [r3, #1]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d126      	bne.n	8003bc6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	61fb      	str	r3, [r7, #28]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	461a      	mov	r2, r3
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	61fb      	str	r3, [r7, #28]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	011a      	lsls	r2, r3, #4
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b9e:	61bb      	str	r3, [r7, #24]
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	881b      	ldrh	r3, [r3, #0]
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	801a      	strh	r2, [r3, #0]
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	801a      	strh	r2, [r3, #0]
 8003bc4:	e017      	b.n	8003bf6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	785b      	ldrb	r3, [r3, #1]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d113      	bne.n	8003bf6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	461a      	mov	r2, r3
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	4413      	add	r3, r2
 8003bde:	627b      	str	r3, [r7, #36]	; 0x24
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	011a      	lsls	r2, r3, #4
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	4413      	add	r3, r2
 8003bea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bee:	623b      	str	r3, [r7, #32]
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f006 f968 	bl	8009ed2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c02:	88fb      	ldrh	r3, [r7, #6]
 8003c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 82fc 	beq.w	8004206 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c28:	82fb      	strh	r3, [r7, #22]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	441a      	add	r2, r3
 8003c38:	8afb      	ldrh	r3, [r7, #22]
 8003c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	8013      	strh	r3, [r2, #0]
 8003c4e:	e2da      	b.n	8004206 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c50:	88fb      	ldrh	r3, [r7, #6]
 8003c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d021      	beq.n	8003c9e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c74:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	441a      	add	r2, r3
 8003c86:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	f040 82ae 	bne.w	8004206 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	695a      	ldr	r2, [r3, #20]
 8003cae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003cb2:	441a      	add	r2, r3
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	69da      	ldr	r2, [r3, #28]
 8003cbc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003cc0:	441a      	add	r2, r3
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	6a1a      	ldr	r2, [r3, #32]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d30b      	bcc.n	8003cea <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	6a1a      	ldr	r2, [r3, #32]
 8003cde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ce2:	1ad2      	subs	r2, r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	621a      	str	r2, [r3, #32]
 8003ce8:	e017      	b.n	8003d1a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d108      	bne.n	8003d04 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003cf2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003cf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d02:	e00a      	b.n	8003d1a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2200      	movs	r2, #0
 8003d18:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	785b      	ldrb	r3, [r3, #1]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d165      	bne.n	8003dee <HAL_PCD_EP_DB_Transmit+0x382>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	461a      	mov	r2, r3
 8003d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d36:	4413      	add	r3, r2
 8003d38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	011a      	lsls	r2, r3, #4
 8003d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d42:	4413      	add	r3, r2
 8003d44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d48:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d58:	801a      	strh	r2, [r3, #0]
 8003d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d5e:	2b3e      	cmp	r3, #62	; 0x3e
 8003d60:	d91d      	bls.n	8003d9e <HAL_PCD_EP_DB_Transmit+0x332>
 8003d62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d66:	095b      	lsrs	r3, r3, #5
 8003d68:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d6e:	f003 031f 	and.w	r3, r3, #31
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d102      	bne.n	8003d7c <HAL_PCD_EP_DB_Transmit+0x310>
 8003d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	029b      	lsls	r3, r3, #10
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9a:	801a      	strh	r2, [r3, #0]
 8003d9c:	e044      	b.n	8003e28 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10a      	bne.n	8003dbc <HAL_PCD_EP_DB_Transmit+0x350>
 8003da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da8:	881b      	ldrh	r3, [r3, #0]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003db0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db8:	801a      	strh	r2, [r3, #0]
 8003dba:	e035      	b.n	8003e28 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003dbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dc0:	085b      	lsrs	r3, r3, #1
 8003dc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	029b      	lsls	r3, r3, #10
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	4313      	orrs	r3, r2
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dea:	801a      	strh	r2, [r3, #0]
 8003dec:	e01c      	b.n	8003e28 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	785b      	ldrb	r3, [r3, #1]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d118      	bne.n	8003e28 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	647b      	str	r3, [r7, #68]	; 0x44
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	461a      	mov	r2, r3
 8003e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e0a:	4413      	add	r3, r2
 8003e0c:	647b      	str	r3, [r7, #68]	; 0x44
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	011a      	lsls	r2, r3, #4
 8003e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e16:	4413      	add	r3, r2
 8003e18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e1c:	643b      	str	r3, [r7, #64]	; 0x40
 8003e1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e26:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6818      	ldr	r0, [r3, #0]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	6959      	ldr	r1, [r3, #20]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	891a      	ldrh	r2, [r3, #8]
 8003e34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	f004 fbf8 	bl	800862e <USB_WritePMA>
 8003e3e:	e1e2      	b.n	8004206 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	4413      	add	r3, r2
 8003e54:	3306      	adds	r3, #6
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	6812      	ldr	r2, [r2, #0]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e68:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	699a      	ldr	r2, [r3, #24]
 8003e70:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d307      	bcc.n	8003e88 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	699a      	ldr	r2, [r3, #24]
 8003e7c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003e80:	1ad2      	subs	r2, r2, r3
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	619a      	str	r2, [r3, #24]
 8003e86:	e002      	b.n	8003e8e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f040 80c0 	bne.w	8004018 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	785b      	ldrb	r3, [r3, #1]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d126      	bne.n	8003eee <HAL_PCD_EP_DB_Transmit+0x482>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003eb4:	4413      	add	r3, r2
 8003eb6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	011a      	lsls	r2, r3, #4
 8003ebe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ec6:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ed6:	801a      	strh	r2, [r3, #0]
 8003ed8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eea:	801a      	strh	r2, [r3, #0]
 8003eec:	e01a      	b.n	8003f24 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	785b      	ldrb	r3, [r3, #1]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d116      	bne.n	8003f24 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	667b      	str	r3, [r7, #100]	; 0x64
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	461a      	mov	r2, r3
 8003f08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f0a:	4413      	add	r3, r2
 8003f0c:	667b      	str	r3, [r7, #100]	; 0x64
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	011a      	lsls	r2, r3, #4
 8003f14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f16:	4413      	add	r3, r2
 8003f18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f1c:	663b      	str	r3, [r7, #96]	; 0x60
 8003f1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f20:	2200      	movs	r2, #0
 8003f22:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	677b      	str	r3, [r7, #116]	; 0x74
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	785b      	ldrb	r3, [r3, #1]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d12b      	bne.n	8003f8a <HAL_PCD_EP_DB_Transmit+0x51e>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	461a      	mov	r2, r3
 8003f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f46:	4413      	add	r3, r2
 8003f48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	011a      	lsls	r2, r3, #4
 8003f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f52:	4413      	add	r3, r2
 8003f54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f6e:	801a      	strh	r2, [r3, #0]
 8003f70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f86:	801a      	strh	r2, [r3, #0]
 8003f88:	e017      	b.n	8003fba <HAL_PCD_EP_DB_Transmit+0x54e>
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	785b      	ldrb	r3, [r3, #1]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d113      	bne.n	8003fba <HAL_PCD_EP_DB_Transmit+0x54e>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fa0:	4413      	add	r3, r2
 8003fa2:	677b      	str	r3, [r7, #116]	; 0x74
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	011a      	lsls	r2, r3, #4
 8003faa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fac:	4413      	add	r3, r2
 8003fae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fb2:	673b      	str	r3, [r7, #112]	; 0x70
 8003fb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f005 ff86 	bl	8009ed2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003fc6:	88fb      	ldrh	r3, [r7, #6]
 8003fc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f040 811a 	bne.w	8004206 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	881b      	ldrh	r3, [r3, #0]
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fec:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	441a      	add	r2, r3
 8003ffe:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800400a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800400e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004012:	b29b      	uxth	r3, r3
 8004014:	8013      	strh	r3, [r2, #0]
 8004016:	e0f6      	b.n	8004206 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004018:	88fb      	ldrh	r3, [r7, #6]
 800401a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d121      	bne.n	8004066 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	461a      	mov	r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	881b      	ldrh	r3, [r3, #0]
 8004032:	b29b      	uxth	r3, r3
 8004034:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	461a      	mov	r2, r3
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	441a      	add	r2, r3
 800404e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800405a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800405e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004062:	b29b      	uxth	r3, r3
 8004064:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800406c:	2b01      	cmp	r3, #1
 800406e:	f040 80ca 	bne.w	8004206 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	695a      	ldr	r2, [r3, #20]
 8004076:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800407a:	441a      	add	r2, r3
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	69da      	ldr	r2, [r3, #28]
 8004084:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004088:	441a      	add	r2, r3
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	6a1a      	ldr	r2, [r3, #32]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	429a      	cmp	r2, r3
 8004098:	d30b      	bcc.n	80040b2 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	6a1a      	ldr	r2, [r3, #32]
 80040a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040aa:	1ad2      	subs	r2, r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	621a      	str	r2, [r3, #32]
 80040b0:	e017      	b.n	80040e2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d108      	bne.n	80040cc <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80040ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80040be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80040ca:	e00a      	b.n	80040e2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2200      	movs	r2, #0
 80040d8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	657b      	str	r3, [r7, #84]	; 0x54
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	785b      	ldrb	r3, [r3, #1]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d165      	bne.n	80041bc <HAL_PCD_EP_DB_Transmit+0x750>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040fe:	b29b      	uxth	r3, r3
 8004100:	461a      	mov	r2, r3
 8004102:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004104:	4413      	add	r3, r2
 8004106:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	011a      	lsls	r2, r3, #4
 800410e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004110:	4413      	add	r3, r2
 8004112:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004116:	65bb      	str	r3, [r7, #88]	; 0x58
 8004118:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	b29b      	uxth	r3, r3
 800411e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004122:	b29a      	uxth	r2, r3
 8004124:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004126:	801a      	strh	r2, [r3, #0]
 8004128:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800412c:	2b3e      	cmp	r3, #62	; 0x3e
 800412e:	d91d      	bls.n	800416c <HAL_PCD_EP_DB_Transmit+0x700>
 8004130:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004134:	095b      	lsrs	r3, r3, #5
 8004136:	66bb      	str	r3, [r7, #104]	; 0x68
 8004138:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	2b00      	cmp	r3, #0
 8004142:	d102      	bne.n	800414a <HAL_PCD_EP_DB_Transmit+0x6de>
 8004144:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004146:	3b01      	subs	r3, #1
 8004148:	66bb      	str	r3, [r7, #104]	; 0x68
 800414a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	b29a      	uxth	r2, r3
 8004150:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004152:	b29b      	uxth	r3, r3
 8004154:	029b      	lsls	r3, r3, #10
 8004156:	b29b      	uxth	r3, r3
 8004158:	4313      	orrs	r3, r2
 800415a:	b29b      	uxth	r3, r3
 800415c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004164:	b29a      	uxth	r2, r3
 8004166:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004168:	801a      	strh	r2, [r3, #0]
 800416a:	e041      	b.n	80041f0 <HAL_PCD_EP_DB_Transmit+0x784>
 800416c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10a      	bne.n	800418a <HAL_PCD_EP_DB_Transmit+0x71e>
 8004174:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	b29b      	uxth	r3, r3
 800417a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800417e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004182:	b29a      	uxth	r2, r3
 8004184:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004186:	801a      	strh	r2, [r3, #0]
 8004188:	e032      	b.n	80041f0 <HAL_PCD_EP_DB_Transmit+0x784>
 800418a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800418e:	085b      	lsrs	r3, r3, #1
 8004190:	66bb      	str	r3, [r7, #104]	; 0x68
 8004192:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_PCD_EP_DB_Transmit+0x738>
 800419e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041a0:	3301      	adds	r3, #1
 80041a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80041a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	029b      	lsls	r3, r3, #10
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	4313      	orrs	r3, r2
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041b8:	801a      	strh	r2, [r3, #0]
 80041ba:	e019      	b.n	80041f0 <HAL_PCD_EP_DB_Transmit+0x784>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	785b      	ldrb	r3, [r3, #1]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d115      	bne.n	80041f0 <HAL_PCD_EP_DB_Transmit+0x784>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	461a      	mov	r2, r3
 80041d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d2:	4413      	add	r3, r2
 80041d4:	657b      	str	r3, [r7, #84]	; 0x54
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	011a      	lsls	r2, r3, #4
 80041dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041de:	4413      	add	r3, r2
 80041e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041e4:	653b      	str	r3, [r7, #80]	; 0x50
 80041e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ee:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6818      	ldr	r0, [r3, #0]
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	6959      	ldr	r1, [r3, #20]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	895a      	ldrh	r2, [r3, #10]
 80041fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004200:	b29b      	uxth	r3, r3
 8004202:	f004 fa14 	bl	800862e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	b29b      	uxth	r3, r3
 8004218:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800421c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004220:	82bb      	strh	r3, [r7, #20]
 8004222:	8abb      	ldrh	r3, [r7, #20]
 8004224:	f083 0310 	eor.w	r3, r3, #16
 8004228:	82bb      	strh	r3, [r7, #20]
 800422a:	8abb      	ldrh	r3, [r7, #20]
 800422c:	f083 0320 	eor.w	r3, r3, #32
 8004230:	82bb      	strh	r3, [r7, #20]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	461a      	mov	r2, r3
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	441a      	add	r2, r3
 8004240:	8abb      	ldrh	r3, [r7, #20]
 8004242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800424a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800424e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004252:	b29b      	uxth	r3, r3
 8004254:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3790      	adds	r7, #144	; 0x90
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	607b      	str	r3, [r7, #4]
 800426a:	460b      	mov	r3, r1
 800426c:	817b      	strh	r3, [r7, #10]
 800426e:	4613      	mov	r3, r2
 8004270:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004272:	897b      	ldrh	r3, [r7, #10]
 8004274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00b      	beq.n	8004296 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800427e:	897b      	ldrh	r3, [r7, #10]
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	4613      	mov	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4413      	add	r3, r2
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	e009      	b.n	80042aa <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004296:	897a      	ldrh	r2, [r7, #10]
 8004298:	4613      	mov	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	4413      	add	r3, r2
 80042a8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80042aa:	893b      	ldrh	r3, [r7, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d107      	bne.n	80042c0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	2200      	movs	r2, #0
 80042b4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	80da      	strh	r2, [r3, #6]
 80042be:	e00b      	b.n	80042d8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	2201      	movs	r2, #1
 80042c4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	0c1b      	lsrs	r3, r3, #16
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	371c      	adds	r7, #28
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr

080042e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e272      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 8087 	beq.w	8004412 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004304:	4b92      	ldr	r3, [pc, #584]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f003 030c 	and.w	r3, r3, #12
 800430c:	2b04      	cmp	r3, #4
 800430e:	d00c      	beq.n	800432a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004310:	4b8f      	ldr	r3, [pc, #572]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f003 030c 	and.w	r3, r3, #12
 8004318:	2b08      	cmp	r3, #8
 800431a:	d112      	bne.n	8004342 <HAL_RCC_OscConfig+0x5e>
 800431c:	4b8c      	ldr	r3, [pc, #560]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004328:	d10b      	bne.n	8004342 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800432a:	4b89      	ldr	r3, [pc, #548]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d06c      	beq.n	8004410 <HAL_RCC_OscConfig+0x12c>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d168      	bne.n	8004410 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e24c      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800434a:	d106      	bne.n	800435a <HAL_RCC_OscConfig+0x76>
 800434c:	4b80      	ldr	r3, [pc, #512]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a7f      	ldr	r2, [pc, #508]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 8004352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	e02e      	b.n	80043b8 <HAL_RCC_OscConfig+0xd4>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10c      	bne.n	800437c <HAL_RCC_OscConfig+0x98>
 8004362:	4b7b      	ldr	r3, [pc, #492]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a7a      	ldr	r2, [pc, #488]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 8004368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	4b78      	ldr	r3, [pc, #480]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a77      	ldr	r2, [pc, #476]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 8004374:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	e01d      	b.n	80043b8 <HAL_RCC_OscConfig+0xd4>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004384:	d10c      	bne.n	80043a0 <HAL_RCC_OscConfig+0xbc>
 8004386:	4b72      	ldr	r3, [pc, #456]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a71      	ldr	r2, [pc, #452]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 800438c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	4b6f      	ldr	r3, [pc, #444]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a6e      	ldr	r2, [pc, #440]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 8004398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	e00b      	b.n	80043b8 <HAL_RCC_OscConfig+0xd4>
 80043a0:	4b6b      	ldr	r3, [pc, #428]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a6a      	ldr	r2, [pc, #424]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 80043a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	4b68      	ldr	r3, [pc, #416]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a67      	ldr	r2, [pc, #412]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 80043b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d013      	beq.n	80043e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c0:	f7fd fc1e 	bl	8001c00 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043c8:	f7fd fc1a 	bl	8001c00 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b64      	cmp	r3, #100	; 0x64
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e200      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043da:	4b5d      	ldr	r3, [pc, #372]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f0      	beq.n	80043c8 <HAL_RCC_OscConfig+0xe4>
 80043e6:	e014      	b.n	8004412 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e8:	f7fd fc0a 	bl	8001c00 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043f0:	f7fd fc06 	bl	8001c00 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b64      	cmp	r3, #100	; 0x64
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e1ec      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004402:	4b53      	ldr	r3, [pc, #332]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0x10c>
 800440e:	e000      	b.n	8004412 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d063      	beq.n	80044e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800441e:	4b4c      	ldr	r3, [pc, #304]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f003 030c 	and.w	r3, r3, #12
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00b      	beq.n	8004442 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800442a:	4b49      	ldr	r3, [pc, #292]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f003 030c 	and.w	r3, r3, #12
 8004432:	2b08      	cmp	r3, #8
 8004434:	d11c      	bne.n	8004470 <HAL_RCC_OscConfig+0x18c>
 8004436:	4b46      	ldr	r3, [pc, #280]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d116      	bne.n	8004470 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004442:	4b43      	ldr	r3, [pc, #268]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d005      	beq.n	800445a <HAL_RCC_OscConfig+0x176>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d001      	beq.n	800445a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e1c0      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800445a:	4b3d      	ldr	r3, [pc, #244]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	4939      	ldr	r1, [pc, #228]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 800446a:	4313      	orrs	r3, r2
 800446c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800446e:	e03a      	b.n	80044e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d020      	beq.n	80044ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004478:	4b36      	ldr	r3, [pc, #216]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 800447a:	2201      	movs	r2, #1
 800447c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447e:	f7fd fbbf 	bl	8001c00 <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004486:	f7fd fbbb 	bl	8001c00 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e1a1      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004498:	4b2d      	ldr	r3, [pc, #180]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0f0      	beq.n	8004486 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a4:	4b2a      	ldr	r3, [pc, #168]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	4927      	ldr	r1, [pc, #156]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	600b      	str	r3, [r1, #0]
 80044b8:	e015      	b.n	80044e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ba:	4b26      	ldr	r3, [pc, #152]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c0:	f7fd fb9e 	bl	8001c00 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044c8:	f7fd fb9a 	bl	8001c00 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e180      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044da:	4b1d      	ldr	r3, [pc, #116]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f0      	bne.n	80044c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0308 	and.w	r3, r3, #8
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d03a      	beq.n	8004568 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d019      	beq.n	800452e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044fa:	4b17      	ldr	r3, [pc, #92]	; (8004558 <HAL_RCC_OscConfig+0x274>)
 80044fc:	2201      	movs	r2, #1
 80044fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004500:	f7fd fb7e 	bl	8001c00 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004508:	f7fd fb7a 	bl	8001c00 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e160      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800451a:	4b0d      	ldr	r3, [pc, #52]	; (8004550 <HAL_RCC_OscConfig+0x26c>)
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004526:	2001      	movs	r0, #1
 8004528:	f000 fa9c 	bl	8004a64 <RCC_Delay>
 800452c:	e01c      	b.n	8004568 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800452e:	4b0a      	ldr	r3, [pc, #40]	; (8004558 <HAL_RCC_OscConfig+0x274>)
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004534:	f7fd fb64 	bl	8001c00 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800453a:	e00f      	b.n	800455c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800453c:	f7fd fb60 	bl	8001c00 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d908      	bls.n	800455c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e146      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
 800454e:	bf00      	nop
 8004550:	40021000 	.word	0x40021000
 8004554:	42420000 	.word	0x42420000
 8004558:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800455c:	4b92      	ldr	r3, [pc, #584]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1e9      	bne.n	800453c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 80a6 	beq.w	80046c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004576:	2300      	movs	r3, #0
 8004578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800457a:	4b8b      	ldr	r3, [pc, #556]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10d      	bne.n	80045a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004586:	4b88      	ldr	r3, [pc, #544]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	4a87      	ldr	r2, [pc, #540]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 800458c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004590:	61d3      	str	r3, [r2, #28]
 8004592:	4b85      	ldr	r3, [pc, #532]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459a:	60bb      	str	r3, [r7, #8]
 800459c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800459e:	2301      	movs	r3, #1
 80045a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a2:	4b82      	ldr	r3, [pc, #520]	; (80047ac <HAL_RCC_OscConfig+0x4c8>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d118      	bne.n	80045e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ae:	4b7f      	ldr	r3, [pc, #508]	; (80047ac <HAL_RCC_OscConfig+0x4c8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a7e      	ldr	r2, [pc, #504]	; (80047ac <HAL_RCC_OscConfig+0x4c8>)
 80045b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ba:	f7fd fb21 	bl	8001c00 <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c2:	f7fd fb1d 	bl	8001c00 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b64      	cmp	r3, #100	; 0x64
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e103      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d4:	4b75      	ldr	r3, [pc, #468]	; (80047ac <HAL_RCC_OscConfig+0x4c8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0f0      	beq.n	80045c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d106      	bne.n	80045f6 <HAL_RCC_OscConfig+0x312>
 80045e8:	4b6f      	ldr	r3, [pc, #444]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	4a6e      	ldr	r2, [pc, #440]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 80045ee:	f043 0301 	orr.w	r3, r3, #1
 80045f2:	6213      	str	r3, [r2, #32]
 80045f4:	e02d      	b.n	8004652 <HAL_RCC_OscConfig+0x36e>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10c      	bne.n	8004618 <HAL_RCC_OscConfig+0x334>
 80045fe:	4b6a      	ldr	r3, [pc, #424]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	4a69      	ldr	r2, [pc, #420]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004604:	f023 0301 	bic.w	r3, r3, #1
 8004608:	6213      	str	r3, [r2, #32]
 800460a:	4b67      	ldr	r3, [pc, #412]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	4a66      	ldr	r2, [pc, #408]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004610:	f023 0304 	bic.w	r3, r3, #4
 8004614:	6213      	str	r3, [r2, #32]
 8004616:	e01c      	b.n	8004652 <HAL_RCC_OscConfig+0x36e>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	2b05      	cmp	r3, #5
 800461e:	d10c      	bne.n	800463a <HAL_RCC_OscConfig+0x356>
 8004620:	4b61      	ldr	r3, [pc, #388]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	4a60      	ldr	r2, [pc, #384]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004626:	f043 0304 	orr.w	r3, r3, #4
 800462a:	6213      	str	r3, [r2, #32]
 800462c:	4b5e      	ldr	r3, [pc, #376]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	4a5d      	ldr	r2, [pc, #372]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004632:	f043 0301 	orr.w	r3, r3, #1
 8004636:	6213      	str	r3, [r2, #32]
 8004638:	e00b      	b.n	8004652 <HAL_RCC_OscConfig+0x36e>
 800463a:	4b5b      	ldr	r3, [pc, #364]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	4a5a      	ldr	r2, [pc, #360]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004640:	f023 0301 	bic.w	r3, r3, #1
 8004644:	6213      	str	r3, [r2, #32]
 8004646:	4b58      	ldr	r3, [pc, #352]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	4a57      	ldr	r2, [pc, #348]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 800464c:	f023 0304 	bic.w	r3, r3, #4
 8004650:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d015      	beq.n	8004686 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800465a:	f7fd fad1 	bl	8001c00 <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004660:	e00a      	b.n	8004678 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004662:	f7fd facd 	bl	8001c00 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004670:	4293      	cmp	r3, r2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e0b1      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004678:	4b4b      	ldr	r3, [pc, #300]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0ee      	beq.n	8004662 <HAL_RCC_OscConfig+0x37e>
 8004684:	e014      	b.n	80046b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004686:	f7fd fabb 	bl	8001c00 <HAL_GetTick>
 800468a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800468c:	e00a      	b.n	80046a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800468e:	f7fd fab7 	bl	8001c00 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	f241 3288 	movw	r2, #5000	; 0x1388
 800469c:	4293      	cmp	r3, r2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e09b      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a4:	4b40      	ldr	r3, [pc, #256]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1ee      	bne.n	800468e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046b0:	7dfb      	ldrb	r3, [r7, #23]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d105      	bne.n	80046c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046b6:	4b3c      	ldr	r3, [pc, #240]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	4a3b      	ldr	r2, [pc, #236]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 80046bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 8087 	beq.w	80047da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046cc:	4b36      	ldr	r3, [pc, #216]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f003 030c 	and.w	r3, r3, #12
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	d061      	beq.n	800479c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d146      	bne.n	800476e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e0:	4b33      	ldr	r3, [pc, #204]	; (80047b0 <HAL_RCC_OscConfig+0x4cc>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e6:	f7fd fa8b 	bl	8001c00 <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ee:	f7fd fa87 	bl	8001c00 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e06d      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004700:	4b29      	ldr	r3, [pc, #164]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1f0      	bne.n	80046ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004714:	d108      	bne.n	8004728 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004716:	4b24      	ldr	r3, [pc, #144]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	4921      	ldr	r1, [pc, #132]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004724:	4313      	orrs	r3, r2
 8004726:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004728:	4b1f      	ldr	r3, [pc, #124]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a19      	ldr	r1, [r3, #32]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	430b      	orrs	r3, r1
 800473a:	491b      	ldr	r1, [pc, #108]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 800473c:	4313      	orrs	r3, r2
 800473e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004740:	4b1b      	ldr	r3, [pc, #108]	; (80047b0 <HAL_RCC_OscConfig+0x4cc>)
 8004742:	2201      	movs	r2, #1
 8004744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004746:	f7fd fa5b 	bl	8001c00 <HAL_GetTick>
 800474a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800474e:	f7fd fa57 	bl	8001c00 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e03d      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004760:	4b11      	ldr	r3, [pc, #68]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0f0      	beq.n	800474e <HAL_RCC_OscConfig+0x46a>
 800476c:	e035      	b.n	80047da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800476e:	4b10      	ldr	r3, [pc, #64]	; (80047b0 <HAL_RCC_OscConfig+0x4cc>)
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004774:	f7fd fa44 	bl	8001c00 <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800477c:	f7fd fa40 	bl	8001c00 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e026      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800478e:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1f0      	bne.n	800477c <HAL_RCC_OscConfig+0x498>
 800479a:	e01e      	b.n	80047da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d107      	bne.n	80047b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e019      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
 80047a8:	40021000 	.word	0x40021000
 80047ac:	40007000 	.word	0x40007000
 80047b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047b4:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <HAL_RCC_OscConfig+0x500>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d106      	bne.n	80047d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d001      	beq.n	80047da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e000      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3718      	adds	r7, #24
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40021000 	.word	0x40021000

080047e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e0d0      	b.n	800499e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047fc:	4b6a      	ldr	r3, [pc, #424]	; (80049a8 <HAL_RCC_ClockConfig+0x1c0>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d910      	bls.n	800482c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480a:	4b67      	ldr	r3, [pc, #412]	; (80049a8 <HAL_RCC_ClockConfig+0x1c0>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f023 0207 	bic.w	r2, r3, #7
 8004812:	4965      	ldr	r1, [pc, #404]	; (80049a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	4313      	orrs	r3, r2
 8004818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800481a:	4b63      	ldr	r3, [pc, #396]	; (80049a8 <HAL_RCC_ClockConfig+0x1c0>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d001      	beq.n	800482c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e0b8      	b.n	800499e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d020      	beq.n	800487a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004844:	4b59      	ldr	r3, [pc, #356]	; (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	4a58      	ldr	r2, [pc, #352]	; (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 800484a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800484e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0308 	and.w	r3, r3, #8
 8004858:	2b00      	cmp	r3, #0
 800485a:	d005      	beq.n	8004868 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800485c:	4b53      	ldr	r3, [pc, #332]	; (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	4a52      	ldr	r2, [pc, #328]	; (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 8004862:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004866:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004868:	4b50      	ldr	r3, [pc, #320]	; (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	494d      	ldr	r1, [pc, #308]	; (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 8004876:	4313      	orrs	r3, r2
 8004878:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d040      	beq.n	8004908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d107      	bne.n	800489e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800488e:	4b47      	ldr	r3, [pc, #284]	; (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d115      	bne.n	80048c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e07f      	b.n	800499e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d107      	bne.n	80048b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048a6:	4b41      	ldr	r3, [pc, #260]	; (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d109      	bne.n	80048c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e073      	b.n	800499e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048b6:	4b3d      	ldr	r3, [pc, #244]	; (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e06b      	b.n	800499e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048c6:	4b39      	ldr	r3, [pc, #228]	; (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f023 0203 	bic.w	r2, r3, #3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	4936      	ldr	r1, [pc, #216]	; (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048d8:	f7fd f992 	bl	8001c00 <HAL_GetTick>
 80048dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048de:	e00a      	b.n	80048f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048e0:	f7fd f98e 	bl	8001c00 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e053      	b.n	800499e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f6:	4b2d      	ldr	r3, [pc, #180]	; (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f003 020c 	and.w	r2, r3, #12
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	429a      	cmp	r2, r3
 8004906:	d1eb      	bne.n	80048e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004908:	4b27      	ldr	r3, [pc, #156]	; (80049a8 <HAL_RCC_ClockConfig+0x1c0>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0307 	and.w	r3, r3, #7
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d210      	bcs.n	8004938 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004916:	4b24      	ldr	r3, [pc, #144]	; (80049a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f023 0207 	bic.w	r2, r3, #7
 800491e:	4922      	ldr	r1, [pc, #136]	; (80049a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	4313      	orrs	r3, r2
 8004924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004926:	4b20      	ldr	r3, [pc, #128]	; (80049a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	429a      	cmp	r2, r3
 8004932:	d001      	beq.n	8004938 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e032      	b.n	800499e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d008      	beq.n	8004956 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004944:	4b19      	ldr	r3, [pc, #100]	; (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	4916      	ldr	r1, [pc, #88]	; (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 8004952:	4313      	orrs	r3, r2
 8004954:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b00      	cmp	r3, #0
 8004960:	d009      	beq.n	8004976 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004962:	4b12      	ldr	r3, [pc, #72]	; (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	490e      	ldr	r1, [pc, #56]	; (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 8004972:	4313      	orrs	r3, r2
 8004974:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004976:	f000 f821 	bl	80049bc <HAL_RCC_GetSysClockFreq>
 800497a:	4602      	mov	r2, r0
 800497c:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	091b      	lsrs	r3, r3, #4
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	490a      	ldr	r1, [pc, #40]	; (80049b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004988:	5ccb      	ldrb	r3, [r1, r3]
 800498a:	fa22 f303 	lsr.w	r3, r2, r3
 800498e:	4a09      	ldr	r2, [pc, #36]	; (80049b4 <HAL_RCC_ClockConfig+0x1cc>)
 8004990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004992:	4b09      	ldr	r3, [pc, #36]	; (80049b8 <HAL_RCC_ClockConfig+0x1d0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f7fd f8f0 	bl	8001b7c <HAL_InitTick>

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	40022000 	.word	0x40022000
 80049ac:	40021000 	.word	0x40021000
 80049b0:	0800aa64 	.word	0x0800aa64
 80049b4:	2000009c 	.word	0x2000009c
 80049b8:	200000a0 	.word	0x200000a0

080049bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	2300      	movs	r3, #0
 80049c8:	60bb      	str	r3, [r7, #8]
 80049ca:	2300      	movs	r3, #0
 80049cc:	617b      	str	r3, [r7, #20]
 80049ce:	2300      	movs	r3, #0
 80049d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80049d6:	4b1e      	ldr	r3, [pc, #120]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x94>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f003 030c 	and.w	r3, r3, #12
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d002      	beq.n	80049ec <HAL_RCC_GetSysClockFreq+0x30>
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d003      	beq.n	80049f2 <HAL_RCC_GetSysClockFreq+0x36>
 80049ea:	e027      	b.n	8004a3c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049ec:	4b19      	ldr	r3, [pc, #100]	; (8004a54 <HAL_RCC_GetSysClockFreq+0x98>)
 80049ee:	613b      	str	r3, [r7, #16]
      break;
 80049f0:	e027      	b.n	8004a42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	0c9b      	lsrs	r3, r3, #18
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	4a17      	ldr	r2, [pc, #92]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x9c>)
 80049fc:	5cd3      	ldrb	r3, [r2, r3]
 80049fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d010      	beq.n	8004a2c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a0a:	4b11      	ldr	r3, [pc, #68]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x94>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	0c5b      	lsrs	r3, r3, #17
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	4a11      	ldr	r2, [pc, #68]	; (8004a5c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004a16:	5cd3      	ldrb	r3, [r2, r3]
 8004a18:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a0d      	ldr	r2, [pc, #52]	; (8004a54 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a1e:	fb03 f202 	mul.w	r2, r3, r2
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	e004      	b.n	8004a36 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a0c      	ldr	r2, [pc, #48]	; (8004a60 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004a30:	fb02 f303 	mul.w	r3, r2, r3
 8004a34:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	613b      	str	r3, [r7, #16]
      break;
 8004a3a:	e002      	b.n	8004a42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a3c:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a3e:	613b      	str	r3, [r7, #16]
      break;
 8004a40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a42:	693b      	ldr	r3, [r7, #16]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	371c      	adds	r7, #28
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bc80      	pop	{r7}
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	40021000 	.word	0x40021000
 8004a54:	007a1200 	.word	0x007a1200
 8004a58:	0800aa74 	.word	0x0800aa74
 8004a5c:	0800aa84 	.word	0x0800aa84
 8004a60:	003d0900 	.word	0x003d0900

08004a64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a6c:	4b0a      	ldr	r3, [pc, #40]	; (8004a98 <RCC_Delay+0x34>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a0a      	ldr	r2, [pc, #40]	; (8004a9c <RCC_Delay+0x38>)
 8004a72:	fba2 2303 	umull	r2, r3, r2, r3
 8004a76:	0a5b      	lsrs	r3, r3, #9
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	fb02 f303 	mul.w	r3, r2, r3
 8004a7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a80:	bf00      	nop
  }
  while (Delay --);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	1e5a      	subs	r2, r3, #1
 8004a86:	60fa      	str	r2, [r7, #12]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1f9      	bne.n	8004a80 <RCC_Delay+0x1c>
}
 8004a8c:	bf00      	nop
 8004a8e:	bf00      	nop
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr
 8004a98:	2000009c 	.word	0x2000009c
 8004a9c:	10624dd3 	.word	0x10624dd3

08004aa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	613b      	str	r3, [r7, #16]
 8004aac:	2300      	movs	r3, #0
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d07d      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004abc:	2300      	movs	r3, #0
 8004abe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ac0:	4b4f      	ldr	r3, [pc, #316]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10d      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004acc:	4b4c      	ldr	r3, [pc, #304]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	4a4b      	ldr	r2, [pc, #300]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad6:	61d3      	str	r3, [r2, #28]
 8004ad8:	4b49      	ldr	r3, [pc, #292]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae0:	60bb      	str	r3, [r7, #8]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae8:	4b46      	ldr	r3, [pc, #280]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d118      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004af4:	4b43      	ldr	r3, [pc, #268]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a42      	ldr	r2, [pc, #264]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004afe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b00:	f7fd f87e 	bl	8001c00 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b06:	e008      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b08:	f7fd f87a 	bl	8001c00 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b64      	cmp	r3, #100	; 0x64
 8004b14:	d901      	bls.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e06d      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b1a:	4b3a      	ldr	r3, [pc, #232]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0f0      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b26:	4b36      	ldr	r3, [pc, #216]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b2e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d02e      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d027      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b44:	4b2e      	ldr	r3, [pc, #184]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b4c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b4e:	4b2e      	ldr	r3, [pc, #184]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b50:	2201      	movs	r2, #1
 8004b52:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b54:	4b2c      	ldr	r3, [pc, #176]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b5a:	4a29      	ldr	r2, [pc, #164]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d014      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b6a:	f7fd f849 	bl	8001c00 <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b70:	e00a      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b72:	f7fd f845 	bl	8001c00 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e036      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b88:	4b1d      	ldr	r3, [pc, #116]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0ee      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b94:	4b1a      	ldr	r3, [pc, #104]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	4917      	ldr	r1, [pc, #92]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ba6:	7dfb      	ldrb	r3, [r7, #23]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d105      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bac:	4b14      	ldr	r3, [pc, #80]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	4a13      	ldr	r2, [pc, #76]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bb6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d008      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bc4:	4b0e      	ldr	r3, [pc, #56]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	490b      	ldr	r1, [pc, #44]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0310 	and.w	r3, r3, #16
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d008      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004be2:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	4904      	ldr	r1, [pc, #16]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3718      	adds	r7, #24
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	40021000 	.word	0x40021000
 8004c04:	40007000 	.word	0x40007000
 8004c08:	42420440 	.word	0x42420440

08004c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e041      	b.n	8004ca2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d106      	bne.n	8004c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7fc fe5c 	bl	80018f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3304      	adds	r3, #4
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f000 fe38 	bl	80058c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
	...

08004cac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d001      	beq.n	8004cc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e044      	b.n	8004d4e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a1d      	ldr	r2, [pc, #116]	; (8004d58 <HAL_TIM_Base_Start_IT+0xac>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d018      	beq.n	8004d18 <HAL_TIM_Base_Start_IT+0x6c>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a1c      	ldr	r2, [pc, #112]	; (8004d5c <HAL_TIM_Base_Start_IT+0xb0>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d013      	beq.n	8004d18 <HAL_TIM_Base_Start_IT+0x6c>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf8:	d00e      	beq.n	8004d18 <HAL_TIM_Base_Start_IT+0x6c>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a18      	ldr	r2, [pc, #96]	; (8004d60 <HAL_TIM_Base_Start_IT+0xb4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d009      	beq.n	8004d18 <HAL_TIM_Base_Start_IT+0x6c>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a16      	ldr	r2, [pc, #88]	; (8004d64 <HAL_TIM_Base_Start_IT+0xb8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d004      	beq.n	8004d18 <HAL_TIM_Base_Start_IT+0x6c>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a15      	ldr	r2, [pc, #84]	; (8004d68 <HAL_TIM_Base_Start_IT+0xbc>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d111      	bne.n	8004d3c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 0307 	and.w	r3, r3, #7
 8004d22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b06      	cmp	r3, #6
 8004d28:	d010      	beq.n	8004d4c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f042 0201 	orr.w	r2, r2, #1
 8004d38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d3a:	e007      	b.n	8004d4c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bc80      	pop	{r7}
 8004d56:	4770      	bx	lr
 8004d58:	40012c00 	.word	0x40012c00
 8004d5c:	40013400 	.word	0x40013400
 8004d60:	40000400 	.word	0x40000400
 8004d64:	40000800 	.word	0x40000800
 8004d68:	40000c00 	.word	0x40000c00

08004d6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e041      	b.n	8004e02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d106      	bne.n	8004d98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f839 	bl	8004e0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3304      	adds	r3, #4
 8004da8:	4619      	mov	r1, r3
 8004daa:	4610      	mov	r0, r2
 8004dac:	f000 fd88 	bl	80058c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bc80      	pop	{r7}
 8004e1a:	4770      	bx	lr

08004e1c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d109      	bne.n	8004e48 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	bf0c      	ite	eq
 8004e40:	2301      	moveq	r3, #1
 8004e42:	2300      	movne	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	e022      	b.n	8004e8e <HAL_TIM_PWM_Start_DMA+0x72>
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d109      	bne.n	8004e62 <HAL_TIM_PWM_Start_DMA+0x46>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	bf0c      	ite	eq
 8004e5a:	2301      	moveq	r3, #1
 8004e5c:	2300      	movne	r3, #0
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	e015      	b.n	8004e8e <HAL_TIM_PWM_Start_DMA+0x72>
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d109      	bne.n	8004e7c <HAL_TIM_PWM_Start_DMA+0x60>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	bf0c      	ite	eq
 8004e74:	2301      	moveq	r3, #1
 8004e76:	2300      	movne	r3, #0
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	e008      	b.n	8004e8e <HAL_TIM_PWM_Start_DMA+0x72>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	bf0c      	ite	eq
 8004e88:	2301      	moveq	r3, #1
 8004e8a:	2300      	movne	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004e92:	2302      	movs	r3, #2
 8004e94:	e167      	b.n	8005166 <HAL_TIM_PWM_Start_DMA+0x34a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d109      	bne.n	8004eb0 <HAL_TIM_PWM_Start_DMA+0x94>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	bf0c      	ite	eq
 8004ea8:	2301      	moveq	r3, #1
 8004eaa:	2300      	movne	r3, #0
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	e022      	b.n	8004ef6 <HAL_TIM_PWM_Start_DMA+0xda>
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d109      	bne.n	8004eca <HAL_TIM_PWM_Start_DMA+0xae>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	bf0c      	ite	eq
 8004ec2:	2301      	moveq	r3, #1
 8004ec4:	2300      	movne	r3, #0
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	e015      	b.n	8004ef6 <HAL_TIM_PWM_Start_DMA+0xda>
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d109      	bne.n	8004ee4 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	bf0c      	ite	eq
 8004edc:	2301      	moveq	r3, #1
 8004ede:	2300      	movne	r3, #0
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	e008      	b.n	8004ef6 <HAL_TIM_PWM_Start_DMA+0xda>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	bf0c      	ite	eq
 8004ef0:	2301      	moveq	r3, #1
 8004ef2:	2300      	movne	r3, #0
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d024      	beq.n	8004f44 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d002      	beq.n	8004f06 <HAL_TIM_PWM_Start_DMA+0xea>
 8004f00:	887b      	ldrh	r3, [r7, #2]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e12d      	b.n	8005166 <HAL_TIM_PWM_Start_DMA+0x34a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d104      	bne.n	8004f1a <HAL_TIM_PWM_Start_DMA+0xfe>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f18:	e016      	b.n	8004f48 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d104      	bne.n	8004f2a <HAL_TIM_PWM_Start_DMA+0x10e>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f28:	e00e      	b.n	8004f48 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d104      	bne.n	8004f3a <HAL_TIM_PWM_Start_DMA+0x11e>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f38:	e006      	b.n	8004f48 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f42:	e001      	b.n	8004f48 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e10e      	b.n	8005166 <HAL_TIM_PWM_Start_DMA+0x34a>
  }

  switch (Channel)
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2b0c      	cmp	r3, #12
 8004f4c:	f200 80ae 	bhi.w	80050ac <HAL_TIM_PWM_Start_DMA+0x290>
 8004f50:	a201      	add	r2, pc, #4	; (adr r2, 8004f58 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f56:	bf00      	nop
 8004f58:	08004f8d 	.word	0x08004f8d
 8004f5c:	080050ad 	.word	0x080050ad
 8004f60:	080050ad 	.word	0x080050ad
 8004f64:	080050ad 	.word	0x080050ad
 8004f68:	08004fd5 	.word	0x08004fd5
 8004f6c:	080050ad 	.word	0x080050ad
 8004f70:	080050ad 	.word	0x080050ad
 8004f74:	080050ad 	.word	0x080050ad
 8004f78:	0800501d 	.word	0x0800501d
 8004f7c:	080050ad 	.word	0x080050ad
 8004f80:	080050ad 	.word	0x080050ad
 8004f84:	080050ad 	.word	0x080050ad
 8004f88:	08005065 	.word	0x08005065
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	4a77      	ldr	r2, [pc, #476]	; (8005170 <HAL_TIM_PWM_Start_DMA+0x354>)
 8004f92:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	4a76      	ldr	r2, [pc, #472]	; (8005174 <HAL_TIM_PWM_Start_DMA+0x358>)
 8004f9a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	4a75      	ldr	r2, [pc, #468]	; (8005178 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8004fa2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004fa8:	6879      	ldr	r1, [r7, #4]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	3334      	adds	r3, #52	; 0x34
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	887b      	ldrh	r3, [r7, #2]
 8004fb4:	f7fc ffb2 	bl	8001f1c <HAL_DMA_Start_IT>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e0d1      	b.n	8005166 <HAL_TIM_PWM_Start_DMA+0x34a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68da      	ldr	r2, [r3, #12]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fd0:	60da      	str	r2, [r3, #12]
      break;
 8004fd2:	e06e      	b.n	80050b2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd8:	4a65      	ldr	r2, [pc, #404]	; (8005170 <HAL_TIM_PWM_Start_DMA+0x354>)
 8004fda:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe0:	4a64      	ldr	r2, [pc, #400]	; (8005174 <HAL_TIM_PWM_Start_DMA+0x358>)
 8004fe2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe8:	4a63      	ldr	r2, [pc, #396]	; (8005178 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8004fea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004ff0:	6879      	ldr	r1, [r7, #4]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	3338      	adds	r3, #56	; 0x38
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	887b      	ldrh	r3, [r7, #2]
 8004ffc:	f7fc ff8e 	bl	8001f1c <HAL_DMA_Start_IT>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e0ad      	b.n	8005166 <HAL_TIM_PWM_Start_DMA+0x34a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005018:	60da      	str	r2, [r3, #12]
      break;
 800501a:	e04a      	b.n	80050b2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	4a53      	ldr	r2, [pc, #332]	; (8005170 <HAL_TIM_PWM_Start_DMA+0x354>)
 8005022:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005028:	4a52      	ldr	r2, [pc, #328]	; (8005174 <HAL_TIM_PWM_Start_DMA+0x358>)
 800502a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005030:	4a51      	ldr	r2, [pc, #324]	; (8005178 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8005032:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005038:	6879      	ldr	r1, [r7, #4]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	333c      	adds	r3, #60	; 0x3c
 8005040:	461a      	mov	r2, r3
 8005042:	887b      	ldrh	r3, [r7, #2]
 8005044:	f7fc ff6a 	bl	8001f1c <HAL_DMA_Start_IT>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e089      	b.n	8005166 <HAL_TIM_PWM_Start_DMA+0x34a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68da      	ldr	r2, [r3, #12]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005060:	60da      	str	r2, [r3, #12]
      break;
 8005062:	e026      	b.n	80050b2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005068:	4a41      	ldr	r2, [pc, #260]	; (8005170 <HAL_TIM_PWM_Start_DMA+0x354>)
 800506a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005070:	4a40      	ldr	r2, [pc, #256]	; (8005174 <HAL_TIM_PWM_Start_DMA+0x358>)
 8005072:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005078:	4a3f      	ldr	r2, [pc, #252]	; (8005178 <HAL_TIM_PWM_Start_DMA+0x35c>)
 800507a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3340      	adds	r3, #64	; 0x40
 8005088:	461a      	mov	r2, r3
 800508a:	887b      	ldrh	r3, [r7, #2]
 800508c:	f7fc ff46 	bl	8001f1c <HAL_DMA_Start_IT>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e065      	b.n	8005166 <HAL_TIM_PWM_Start_DMA+0x34a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68da      	ldr	r2, [r3, #12]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050a8:	60da      	str	r2, [r3, #12]
      break;
 80050aa:	e002      	b.n	80050b2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	75fb      	strb	r3, [r7, #23]
      break;
 80050b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80050b2:	7dfb      	ldrb	r3, [r7, #23]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d155      	bne.n	8005164 <HAL_TIM_PWM_Start_DMA+0x348>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2201      	movs	r2, #1
 80050be:	68b9      	ldr	r1, [r7, #8]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 feb9 	bl	8005e38 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a2c      	ldr	r2, [pc, #176]	; (800517c <HAL_TIM_PWM_Start_DMA+0x360>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d004      	beq.n	80050da <HAL_TIM_PWM_Start_DMA+0x2be>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a2a      	ldr	r2, [pc, #168]	; (8005180 <HAL_TIM_PWM_Start_DMA+0x364>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d101      	bne.n	80050de <HAL_TIM_PWM_Start_DMA+0x2c2>
 80050da:	2301      	movs	r3, #1
 80050dc:	e000      	b.n	80050e0 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80050de:	2300      	movs	r3, #0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d007      	beq.n	80050f4 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050f2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a20      	ldr	r2, [pc, #128]	; (800517c <HAL_TIM_PWM_Start_DMA+0x360>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d018      	beq.n	8005130 <HAL_TIM_PWM_Start_DMA+0x314>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a1f      	ldr	r2, [pc, #124]	; (8005180 <HAL_TIM_PWM_Start_DMA+0x364>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d013      	beq.n	8005130 <HAL_TIM_PWM_Start_DMA+0x314>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005110:	d00e      	beq.n	8005130 <HAL_TIM_PWM_Start_DMA+0x314>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a1b      	ldr	r2, [pc, #108]	; (8005184 <HAL_TIM_PWM_Start_DMA+0x368>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d009      	beq.n	8005130 <HAL_TIM_PWM_Start_DMA+0x314>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a19      	ldr	r2, [pc, #100]	; (8005188 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d004      	beq.n	8005130 <HAL_TIM_PWM_Start_DMA+0x314>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a18      	ldr	r2, [pc, #96]	; (800518c <HAL_TIM_PWM_Start_DMA+0x370>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d111      	bne.n	8005154 <HAL_TIM_PWM_Start_DMA+0x338>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	2b06      	cmp	r3, #6
 8005140:	d010      	beq.n	8005164 <HAL_TIM_PWM_Start_DMA+0x348>
      {
        __HAL_TIM_ENABLE(htim);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f042 0201 	orr.w	r2, r2, #1
 8005150:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005152:	e007      	b.n	8005164 <HAL_TIM_PWM_Start_DMA+0x348>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0201 	orr.w	r2, r2, #1
 8005162:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005164:	7dfb      	ldrb	r3, [r7, #23]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	080057b1 	.word	0x080057b1
 8005174:	08005859 	.word	0x08005859
 8005178:	0800571f 	.word	0x0800571f
 800517c:	40012c00 	.word	0x40012c00
 8005180:	40013400 	.word	0x40013400
 8005184:	40000400 	.word	0x40000400
 8005188:	40000800 	.word	0x40000800
 800518c:	40000c00 	.word	0x40000c00

08005190 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d122      	bne.n	80051ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d11b      	bne.n	80051ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0202 	mvn.w	r2, #2
 80051bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fa76 	bl	80056c4 <HAL_TIM_IC_CaptureCallback>
 80051d8:	e005      	b.n	80051e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fa69 	bl	80056b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 fa78 	bl	80056d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	f003 0304 	and.w	r3, r3, #4
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d122      	bne.n	8005240 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b04      	cmp	r3, #4
 8005206:	d11b      	bne.n	8005240 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f06f 0204 	mvn.w	r2, #4
 8005210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2202      	movs	r2, #2
 8005216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fa4c 	bl	80056c4 <HAL_TIM_IC_CaptureCallback>
 800522c:	e005      	b.n	800523a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fa3f 	bl	80056b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 fa4e 	bl	80056d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f003 0308 	and.w	r3, r3, #8
 800524a:	2b08      	cmp	r3, #8
 800524c:	d122      	bne.n	8005294 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	2b08      	cmp	r3, #8
 800525a:	d11b      	bne.n	8005294 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f06f 0208 	mvn.w	r2, #8
 8005264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2204      	movs	r2, #4
 800526a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fa22 	bl	80056c4 <HAL_TIM_IC_CaptureCallback>
 8005280:	e005      	b.n	800528e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fa15 	bl	80056b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 fa24 	bl	80056d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f003 0310 	and.w	r3, r3, #16
 800529e:	2b10      	cmp	r3, #16
 80052a0:	d122      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f003 0310 	and.w	r3, r3, #16
 80052ac:	2b10      	cmp	r3, #16
 80052ae:	d11b      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f06f 0210 	mvn.w	r2, #16
 80052b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2208      	movs	r2, #8
 80052be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f9f8 	bl	80056c4 <HAL_TIM_IC_CaptureCallback>
 80052d4:	e005      	b.n	80052e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f9eb 	bl	80056b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f9fa 	bl	80056d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d10e      	bne.n	8005314 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b01      	cmp	r3, #1
 8005302:	d107      	bne.n	8005314 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f06f 0201 	mvn.w	r2, #1
 800530c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7fb fcd2 	bl	8000cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531e:	2b80      	cmp	r3, #128	; 0x80
 8005320:	d10e      	bne.n	8005340 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532c:	2b80      	cmp	r3, #128	; 0x80
 800532e:	d107      	bne.n	8005340 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fe66 	bl	800600c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534a:	2b40      	cmp	r3, #64	; 0x40
 800534c:	d10e      	bne.n	800536c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005358:	2b40      	cmp	r3, #64	; 0x40
 800535a:	d107      	bne.n	800536c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f9c7 	bl	80056fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f003 0320 	and.w	r3, r3, #32
 8005376:	2b20      	cmp	r3, #32
 8005378:	d10e      	bne.n	8005398 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f003 0320 	and.w	r3, r3, #32
 8005384:	2b20      	cmp	r3, #32
 8005386:	d107      	bne.n	8005398 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f06f 0220 	mvn.w	r2, #32
 8005390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 fe31 	bl	8005ffa <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005398:	bf00      	nop
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d101      	bne.n	80053be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053ba:	2302      	movs	r3, #2
 80053bc:	e0ae      	b.n	800551c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b0c      	cmp	r3, #12
 80053ca:	f200 809f 	bhi.w	800550c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80053ce:	a201      	add	r2, pc, #4	; (adr r2, 80053d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d4:	08005409 	.word	0x08005409
 80053d8:	0800550d 	.word	0x0800550d
 80053dc:	0800550d 	.word	0x0800550d
 80053e0:	0800550d 	.word	0x0800550d
 80053e4:	08005449 	.word	0x08005449
 80053e8:	0800550d 	.word	0x0800550d
 80053ec:	0800550d 	.word	0x0800550d
 80053f0:	0800550d 	.word	0x0800550d
 80053f4:	0800548b 	.word	0x0800548b
 80053f8:	0800550d 	.word	0x0800550d
 80053fc:	0800550d 	.word	0x0800550d
 8005400:	0800550d 	.word	0x0800550d
 8005404:	080054cb 	.word	0x080054cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68b9      	ldr	r1, [r7, #8]
 800540e:	4618      	mov	r0, r3
 8005410:	f000 fad0 	bl	80059b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	699a      	ldr	r2, [r3, #24]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0208 	orr.w	r2, r2, #8
 8005422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699a      	ldr	r2, [r3, #24]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0204 	bic.w	r2, r2, #4
 8005432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6999      	ldr	r1, [r3, #24]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	691a      	ldr	r2, [r3, #16]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	619a      	str	r2, [r3, #24]
      break;
 8005446:	e064      	b.n	8005512 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68b9      	ldr	r1, [r7, #8]
 800544e:	4618      	mov	r0, r3
 8005450:	f000 fb20 	bl	8005a94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699a      	ldr	r2, [r3, #24]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699a      	ldr	r2, [r3, #24]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6999      	ldr	r1, [r3, #24]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	021a      	lsls	r2, r3, #8
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	619a      	str	r2, [r3, #24]
      break;
 8005488:	e043      	b.n	8005512 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68b9      	ldr	r1, [r7, #8]
 8005490:	4618      	mov	r0, r3
 8005492:	f000 fb73 	bl	8005b7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69da      	ldr	r2, [r3, #28]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f042 0208 	orr.w	r2, r2, #8
 80054a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	69da      	ldr	r2, [r3, #28]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0204 	bic.w	r2, r2, #4
 80054b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	69d9      	ldr	r1, [r3, #28]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	691a      	ldr	r2, [r3, #16]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	61da      	str	r2, [r3, #28]
      break;
 80054c8:	e023      	b.n	8005512 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68b9      	ldr	r1, [r7, #8]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 fbc7 	bl	8005c64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69da      	ldr	r2, [r3, #28]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	69da      	ldr	r2, [r3, #28]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	69d9      	ldr	r1, [r3, #28]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	021a      	lsls	r2, r3, #8
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	61da      	str	r2, [r3, #28]
      break;
 800550a:	e002      	b.n	8005512 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	75fb      	strb	r3, [r7, #23]
      break;
 8005510:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800551a:	7dfb      	ldrb	r3, [r7, #23]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800552e:	2300      	movs	r3, #0
 8005530:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <HAL_TIM_ConfigClockSource+0x1c>
 800553c:	2302      	movs	r3, #2
 800553e:	e0b4      	b.n	80056aa <HAL_TIM_ConfigClockSource+0x186>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800555e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005566:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005578:	d03e      	beq.n	80055f8 <HAL_TIM_ConfigClockSource+0xd4>
 800557a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800557e:	f200 8087 	bhi.w	8005690 <HAL_TIM_ConfigClockSource+0x16c>
 8005582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005586:	f000 8086 	beq.w	8005696 <HAL_TIM_ConfigClockSource+0x172>
 800558a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800558e:	d87f      	bhi.n	8005690 <HAL_TIM_ConfigClockSource+0x16c>
 8005590:	2b70      	cmp	r3, #112	; 0x70
 8005592:	d01a      	beq.n	80055ca <HAL_TIM_ConfigClockSource+0xa6>
 8005594:	2b70      	cmp	r3, #112	; 0x70
 8005596:	d87b      	bhi.n	8005690 <HAL_TIM_ConfigClockSource+0x16c>
 8005598:	2b60      	cmp	r3, #96	; 0x60
 800559a:	d050      	beq.n	800563e <HAL_TIM_ConfigClockSource+0x11a>
 800559c:	2b60      	cmp	r3, #96	; 0x60
 800559e:	d877      	bhi.n	8005690 <HAL_TIM_ConfigClockSource+0x16c>
 80055a0:	2b50      	cmp	r3, #80	; 0x50
 80055a2:	d03c      	beq.n	800561e <HAL_TIM_ConfigClockSource+0xfa>
 80055a4:	2b50      	cmp	r3, #80	; 0x50
 80055a6:	d873      	bhi.n	8005690 <HAL_TIM_ConfigClockSource+0x16c>
 80055a8:	2b40      	cmp	r3, #64	; 0x40
 80055aa:	d058      	beq.n	800565e <HAL_TIM_ConfigClockSource+0x13a>
 80055ac:	2b40      	cmp	r3, #64	; 0x40
 80055ae:	d86f      	bhi.n	8005690 <HAL_TIM_ConfigClockSource+0x16c>
 80055b0:	2b30      	cmp	r3, #48	; 0x30
 80055b2:	d064      	beq.n	800567e <HAL_TIM_ConfigClockSource+0x15a>
 80055b4:	2b30      	cmp	r3, #48	; 0x30
 80055b6:	d86b      	bhi.n	8005690 <HAL_TIM_ConfigClockSource+0x16c>
 80055b8:	2b20      	cmp	r3, #32
 80055ba:	d060      	beq.n	800567e <HAL_TIM_ConfigClockSource+0x15a>
 80055bc:	2b20      	cmp	r3, #32
 80055be:	d867      	bhi.n	8005690 <HAL_TIM_ConfigClockSource+0x16c>
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d05c      	beq.n	800567e <HAL_TIM_ConfigClockSource+0x15a>
 80055c4:	2b10      	cmp	r3, #16
 80055c6:	d05a      	beq.n	800567e <HAL_TIM_ConfigClockSource+0x15a>
 80055c8:	e062      	b.n	8005690 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6818      	ldr	r0, [r3, #0]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	6899      	ldr	r1, [r3, #8]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	f000 fc0e 	bl	8005dfa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	609a      	str	r2, [r3, #8]
      break;
 80055f6:	e04f      	b.n	8005698 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6818      	ldr	r0, [r3, #0]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	6899      	ldr	r1, [r3, #8]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f000 fbf7 	bl	8005dfa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689a      	ldr	r2, [r3, #8]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800561a:	609a      	str	r2, [r3, #8]
      break;
 800561c:	e03c      	b.n	8005698 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6818      	ldr	r0, [r3, #0]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	6859      	ldr	r1, [r3, #4]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	461a      	mov	r2, r3
 800562c:	f000 fb6e 	bl	8005d0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2150      	movs	r1, #80	; 0x50
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fbc5 	bl	8005dc6 <TIM_ITRx_SetConfig>
      break;
 800563c:	e02c      	b.n	8005698 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6818      	ldr	r0, [r3, #0]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	6859      	ldr	r1, [r3, #4]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	461a      	mov	r2, r3
 800564c:	f000 fb8c 	bl	8005d68 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2160      	movs	r1, #96	; 0x60
 8005656:	4618      	mov	r0, r3
 8005658:	f000 fbb5 	bl	8005dc6 <TIM_ITRx_SetConfig>
      break;
 800565c:	e01c      	b.n	8005698 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6818      	ldr	r0, [r3, #0]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	6859      	ldr	r1, [r3, #4]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	461a      	mov	r2, r3
 800566c:	f000 fb4e 	bl	8005d0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2140      	movs	r1, #64	; 0x40
 8005676:	4618      	mov	r0, r3
 8005678:	f000 fba5 	bl	8005dc6 <TIM_ITRx_SetConfig>
      break;
 800567c:	e00c      	b.n	8005698 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4619      	mov	r1, r3
 8005688:	4610      	mov	r0, r2
 800568a:	f000 fb9c 	bl	8005dc6 <TIM_ITRx_SetConfig>
      break;
 800568e:	e003      	b.n	8005698 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	73fb      	strb	r3, [r7, #15]
      break;
 8005694:	e000      	b.n	8005698 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005696:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056ba:	bf00      	nop
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	bc80      	pop	{r7}
 80056c2:	4770      	bx	lr

080056c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bc80      	pop	{r7}
 80056d4:	4770      	bx	lr

080056d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b083      	sub	sp, #12
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056de:	bf00      	nop
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc80      	pop	{r7}
 80056e6:	4770      	bx	lr

080056e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bc80      	pop	{r7}
 80056f8:	4770      	bx	lr

080056fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b083      	sub	sp, #12
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005702:	bf00      	nop
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	bc80      	pop	{r7}
 800570a:	4770      	bx	lr

0800570c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	bc80      	pop	{r7}
 800571c:	4770      	bx	lr

0800571e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b084      	sub	sp, #16
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	429a      	cmp	r2, r3
 8005734:	d107      	bne.n	8005746 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2201      	movs	r2, #1
 800573a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005744:	e02a      	b.n	800579c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	429a      	cmp	r2, r3
 800574e:	d107      	bne.n	8005760 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2202      	movs	r2, #2
 8005754:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800575e:	e01d      	b.n	800579c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	429a      	cmp	r2, r3
 8005768:	d107      	bne.n	800577a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2204      	movs	r2, #4
 800576e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005778:	e010      	b.n	800579c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	429a      	cmp	r2, r3
 8005782:	d107      	bne.n	8005794 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2208      	movs	r2, #8
 8005788:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005792:	e003      	b.n	800579c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f7ff ffb5 	bl	800570c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	771a      	strb	r2, [r3, #28]
}
 80057a8:	bf00      	nop
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057bc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d10b      	bne.n	80057e0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2201      	movs	r2, #1
 80057cc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d136      	bne.n	8005844 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057de:	e031      	b.n	8005844 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d10b      	bne.n	8005802 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2202      	movs	r2, #2
 80057ee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d125      	bne.n	8005844 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005800:	e020      	b.n	8005844 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	429a      	cmp	r2, r3
 800580a:	d10b      	bne.n	8005824 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2204      	movs	r2, #4
 8005810:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d114      	bne.n	8005844 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005822:	e00f      	b.n	8005844 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	429a      	cmp	r2, r3
 800582c:	d10a      	bne.n	8005844 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2208      	movs	r2, #8
 8005832:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d103      	bne.n	8005844 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f7ff ff46 	bl	80056d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	771a      	strb	r2, [r3, #28]
}
 8005850:	bf00      	nop
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	429a      	cmp	r2, r3
 800586e:	d103      	bne.n	8005878 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2201      	movs	r2, #1
 8005874:	771a      	strb	r2, [r3, #28]
 8005876:	e019      	b.n	80058ac <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	429a      	cmp	r2, r3
 8005880:	d103      	bne.n	800588a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2202      	movs	r2, #2
 8005886:	771a      	strb	r2, [r3, #28]
 8005888:	e010      	b.n	80058ac <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	429a      	cmp	r2, r3
 8005892:	d103      	bne.n	800589c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2204      	movs	r2, #4
 8005898:	771a      	strb	r2, [r3, #28]
 800589a:	e007      	b.n	80058ac <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d102      	bne.n	80058ac <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2208      	movs	r2, #8
 80058aa:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f7ff ff1b 	bl	80056e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	771a      	strb	r2, [r3, #28]
}
 80058b8:	bf00      	nop
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a33      	ldr	r2, [pc, #204]	; (80059a0 <TIM_Base_SetConfig+0xe0>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d013      	beq.n	8005900 <TIM_Base_SetConfig+0x40>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a32      	ldr	r2, [pc, #200]	; (80059a4 <TIM_Base_SetConfig+0xe4>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d00f      	beq.n	8005900 <TIM_Base_SetConfig+0x40>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e6:	d00b      	beq.n	8005900 <TIM_Base_SetConfig+0x40>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a2f      	ldr	r2, [pc, #188]	; (80059a8 <TIM_Base_SetConfig+0xe8>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d007      	beq.n	8005900 <TIM_Base_SetConfig+0x40>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a2e      	ldr	r2, [pc, #184]	; (80059ac <TIM_Base_SetConfig+0xec>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d003      	beq.n	8005900 <TIM_Base_SetConfig+0x40>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a2d      	ldr	r2, [pc, #180]	; (80059b0 <TIM_Base_SetConfig+0xf0>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d108      	bne.n	8005912 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a22      	ldr	r2, [pc, #136]	; (80059a0 <TIM_Base_SetConfig+0xe0>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d013      	beq.n	8005942 <TIM_Base_SetConfig+0x82>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a21      	ldr	r2, [pc, #132]	; (80059a4 <TIM_Base_SetConfig+0xe4>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00f      	beq.n	8005942 <TIM_Base_SetConfig+0x82>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005928:	d00b      	beq.n	8005942 <TIM_Base_SetConfig+0x82>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a1e      	ldr	r2, [pc, #120]	; (80059a8 <TIM_Base_SetConfig+0xe8>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d007      	beq.n	8005942 <TIM_Base_SetConfig+0x82>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a1d      	ldr	r2, [pc, #116]	; (80059ac <TIM_Base_SetConfig+0xec>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d003      	beq.n	8005942 <TIM_Base_SetConfig+0x82>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a1c      	ldr	r2, [pc, #112]	; (80059b0 <TIM_Base_SetConfig+0xf0>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d108      	bne.n	8005954 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4313      	orrs	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a09      	ldr	r2, [pc, #36]	; (80059a0 <TIM_Base_SetConfig+0xe0>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d003      	beq.n	8005988 <TIM_Base_SetConfig+0xc8>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a08      	ldr	r2, [pc, #32]	; (80059a4 <TIM_Base_SetConfig+0xe4>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d103      	bne.n	8005990 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	615a      	str	r2, [r3, #20]
}
 8005996:	bf00      	nop
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	bc80      	pop	{r7}
 800599e:	4770      	bx	lr
 80059a0:	40012c00 	.word	0x40012c00
 80059a4:	40013400 	.word	0x40013400
 80059a8:	40000400 	.word	0x40000400
 80059ac:	40000800 	.word	0x40000800
 80059b0:	40000c00 	.word	0x40000c00

080059b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b087      	sub	sp, #28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a1b      	ldr	r3, [r3, #32]
 80059c8:	f023 0201 	bic.w	r2, r3, #1
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 0303 	bic.w	r3, r3, #3
 80059ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f023 0302 	bic.w	r3, r3, #2
 80059fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a20      	ldr	r2, [pc, #128]	; (8005a8c <TIM_OC1_SetConfig+0xd8>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d003      	beq.n	8005a18 <TIM_OC1_SetConfig+0x64>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a1f      	ldr	r2, [pc, #124]	; (8005a90 <TIM_OC1_SetConfig+0xdc>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d10c      	bne.n	8005a32 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f023 0308 	bic.w	r3, r3, #8
 8005a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f023 0304 	bic.w	r3, r3, #4
 8005a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a15      	ldr	r2, [pc, #84]	; (8005a8c <TIM_OC1_SetConfig+0xd8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d003      	beq.n	8005a42 <TIM_OC1_SetConfig+0x8e>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a14      	ldr	r2, [pc, #80]	; (8005a90 <TIM_OC1_SetConfig+0xdc>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d111      	bne.n	8005a66 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	621a      	str	r2, [r3, #32]
}
 8005a80:	bf00      	nop
 8005a82:	371c      	adds	r7, #28
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bc80      	pop	{r7}
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	40012c00 	.word	0x40012c00
 8005a90:	40013400 	.word	0x40013400

08005a94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b087      	sub	sp, #28
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	f023 0210 	bic.w	r2, r3, #16
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	021b      	lsls	r3, r3, #8
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f023 0320 	bic.w	r3, r3, #32
 8005ade:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	011b      	lsls	r3, r3, #4
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a21      	ldr	r2, [pc, #132]	; (8005b74 <TIM_OC2_SetConfig+0xe0>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d003      	beq.n	8005afc <TIM_OC2_SetConfig+0x68>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a20      	ldr	r2, [pc, #128]	; (8005b78 <TIM_OC2_SetConfig+0xe4>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d10d      	bne.n	8005b18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	011b      	lsls	r3, r3, #4
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a16      	ldr	r2, [pc, #88]	; (8005b74 <TIM_OC2_SetConfig+0xe0>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d003      	beq.n	8005b28 <TIM_OC2_SetConfig+0x94>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a15      	ldr	r2, [pc, #84]	; (8005b78 <TIM_OC2_SetConfig+0xe4>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d113      	bne.n	8005b50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	621a      	str	r2, [r3, #32]
}
 8005b6a:	bf00      	nop
 8005b6c:	371c      	adds	r7, #28
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bc80      	pop	{r7}
 8005b72:	4770      	bx	lr
 8005b74:	40012c00 	.word	0x40012c00
 8005b78:	40013400 	.word	0x40013400

08005b7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f023 0303 	bic.w	r3, r3, #3
 8005bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	021b      	lsls	r3, r3, #8
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a21      	ldr	r2, [pc, #132]	; (8005c5c <TIM_OC3_SetConfig+0xe0>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d003      	beq.n	8005be2 <TIM_OC3_SetConfig+0x66>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a20      	ldr	r2, [pc, #128]	; (8005c60 <TIM_OC3_SetConfig+0xe4>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d10d      	bne.n	8005bfe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005be8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	021b      	lsls	r3, r3, #8
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a16      	ldr	r2, [pc, #88]	; (8005c5c <TIM_OC3_SetConfig+0xe0>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d003      	beq.n	8005c0e <TIM_OC3_SetConfig+0x92>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a15      	ldr	r2, [pc, #84]	; (8005c60 <TIM_OC3_SetConfig+0xe4>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d113      	bne.n	8005c36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	011b      	lsls	r3, r3, #4
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	011b      	lsls	r3, r3, #4
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	621a      	str	r2, [r3, #32]
}
 8005c50:	bf00      	nop
 8005c52:	371c      	adds	r7, #28
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bc80      	pop	{r7}
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	40012c00 	.word	0x40012c00
 8005c60:	40013400 	.word	0x40013400

08005c64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	021b      	lsls	r3, r3, #8
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	031b      	lsls	r3, r3, #12
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a11      	ldr	r2, [pc, #68]	; (8005d04 <TIM_OC4_SetConfig+0xa0>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d003      	beq.n	8005ccc <TIM_OC4_SetConfig+0x68>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a10      	ldr	r2, [pc, #64]	; (8005d08 <TIM_OC4_SetConfig+0xa4>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d109      	bne.n	8005ce0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	019b      	lsls	r3, r3, #6
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	621a      	str	r2, [r3, #32]
}
 8005cfa:	bf00      	nop
 8005cfc:	371c      	adds	r7, #28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bc80      	pop	{r7}
 8005d02:	4770      	bx	lr
 8005d04:	40012c00 	.word	0x40012c00
 8005d08:	40013400 	.word	0x40013400

08005d0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	f023 0201 	bic.w	r2, r3, #1
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	011b      	lsls	r3, r3, #4
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f023 030a 	bic.w	r3, r3, #10
 8005d48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	621a      	str	r2, [r3, #32]
}
 8005d5e:	bf00      	nop
 8005d60:	371c      	adds	r7, #28
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bc80      	pop	{r7}
 8005d66:	4770      	bx	lr

08005d68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	f023 0210 	bic.w	r2, r3, #16
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	031b      	lsls	r3, r3, #12
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005da4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	011b      	lsls	r3, r3, #4
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	621a      	str	r2, [r3, #32]
}
 8005dbc:	bf00      	nop
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bc80      	pop	{r7}
 8005dc4:	4770      	bx	lr

08005dc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b085      	sub	sp, #20
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ddc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f043 0307 	orr.w	r3, r3, #7
 8005de8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	609a      	str	r2, [r3, #8]
}
 8005df0:	bf00      	nop
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bc80      	pop	{r7}
 8005df8:	4770      	bx	lr

08005dfa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b087      	sub	sp, #28
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	60f8      	str	r0, [r7, #12]
 8005e02:	60b9      	str	r1, [r7, #8]
 8005e04:	607a      	str	r2, [r7, #4]
 8005e06:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e14:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	021a      	lsls	r2, r3, #8
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	431a      	orrs	r2, r3
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	609a      	str	r2, [r3, #8]
}
 8005e2e:	bf00      	nop
 8005e30:	371c      	adds	r7, #28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bc80      	pop	{r7}
 8005e36:	4770      	bx	lr

08005e38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f003 031f 	and.w	r3, r3, #31
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6a1a      	ldr	r2, [r3, #32]
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	43db      	mvns	r3, r3
 8005e5a:	401a      	ands	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6a1a      	ldr	r2, [r3, #32]
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f003 031f 	and.w	r3, r3, #31
 8005e6a:	6879      	ldr	r1, [r7, #4]
 8005e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e70:	431a      	orrs	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	621a      	str	r2, [r3, #32]
}
 8005e76:	bf00      	nop
 8005e78:	371c      	adds	r7, #28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bc80      	pop	{r7}
 8005e7e:	4770      	bx	lr

08005e80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d101      	bne.n	8005e98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e94:	2302      	movs	r3, #2
 8005e96:	e050      	b.n	8005f3a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ebe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a1b      	ldr	r2, [pc, #108]	; (8005f44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d018      	beq.n	8005f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a19      	ldr	r2, [pc, #100]	; (8005f48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d013      	beq.n	8005f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eee:	d00e      	beq.n	8005f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a15      	ldr	r2, [pc, #84]	; (8005f4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d009      	beq.n	8005f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a14      	ldr	r2, [pc, #80]	; (8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d004      	beq.n	8005f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a12      	ldr	r2, [pc, #72]	; (8005f54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d10c      	bne.n	8005f28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bc80      	pop	{r7}
 8005f42:	4770      	bx	lr
 8005f44:	40012c00 	.word	0x40012c00
 8005f48:	40013400 	.word	0x40013400
 8005f4c:	40000400 	.word	0x40000400
 8005f50:	40000800 	.word	0x40000800
 8005f54:	40000c00 	.word	0x40000c00

08005f58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f62:	2300      	movs	r3, #0
 8005f64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d101      	bne.n	8005f74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f70:	2302      	movs	r3, #2
 8005f72:	e03d      	b.n	8005ff0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	695b      	ldr	r3, [r3, #20]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bc80      	pop	{r7}
 8005ff8:	4770      	bx	lr

08005ffa <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b083      	sub	sp, #12
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	bc80      	pop	{r7}
 800600a:	4770      	bx	lr

0800600c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	bc80      	pop	{r7}
 800601c:	4770      	bx	lr

0800601e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800601e:	b084      	sub	sp, #16
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	f107 0014 	add.w	r0, r7, #20
 800602c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	bc80      	pop	{r7}
 800603a:	b004      	add	sp, #16
 800603c:	4770      	bx	lr

0800603e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800603e:	b480      	push	{r7}
 8006040:	b085      	sub	sp, #20
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800604e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006052:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	b29a      	uxth	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	bc80      	pop	{r7}
 8006068:	4770      	bx	lr

0800606a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800606a:	b480      	push	{r7}
 800606c:	b085      	sub	sp, #20
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006072:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006076:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	b29b      	uxth	r3, r3
 8006084:	43db      	mvns	r3, r3
 8006086:	b29b      	uxth	r3, r3
 8006088:	4013      	ands	r3, r2
 800608a:	b29a      	uxth	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	bc80      	pop	{r7}
 800609c:	4770      	bx	lr

0800609e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	460b      	mov	r3, r1
 80060a8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bc80      	pop	{r7}
 80060b4:	4770      	bx	lr

080060b6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80060b6:	b084      	sub	sp, #16
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	f107 0014 	add.w	r0, r7, #20
 80060c4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bc80      	pop	{r7}
 80060f2:	b004      	add	sp, #16
 80060f4:	4770      	bx	lr
	...

080060f8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b09d      	sub	sp, #116	; 0x74
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006102:	2300      	movs	r3, #0
 8006104:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	b29b      	uxth	r3, r3
 8006116:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800611a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800611e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	78db      	ldrb	r3, [r3, #3]
 8006126:	2b03      	cmp	r3, #3
 8006128:	d81f      	bhi.n	800616a <USB_ActivateEndpoint+0x72>
 800612a:	a201      	add	r2, pc, #4	; (adr r2, 8006130 <USB_ActivateEndpoint+0x38>)
 800612c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006130:	08006141 	.word	0x08006141
 8006134:	0800615d 	.word	0x0800615d
 8006138:	08006173 	.word	0x08006173
 800613c:	0800614f 	.word	0x0800614f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006140:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006144:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006148:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800614c:	e012      	b.n	8006174 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800614e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006152:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006156:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800615a:	e00b      	b.n	8006174 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800615c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006160:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006164:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006168:	e004      	b.n	8006174 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006170:	e000      	b.n	8006174 <USB_ActivateEndpoint+0x7c>
      break;
 8006172:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	441a      	add	r2, r3
 800617e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800618a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800618e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006192:	b29b      	uxth	r3, r3
 8006194:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4413      	add	r3, r2
 80061a0:	881b      	ldrh	r3, [r3, #0]
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	4313      	orrs	r3, r2
 80061b6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	441a      	add	r2, r3
 80061c4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80061c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061d8:	b29b      	uxth	r3, r3
 80061da:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	7b1b      	ldrb	r3, [r3, #12]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f040 8178 	bne.w	80064d6 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	785b      	ldrb	r3, [r3, #1]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 8084 	beq.w	80062f8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	61bb      	str	r3, [r7, #24]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	461a      	mov	r2, r3
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	4413      	add	r3, r2
 8006202:	61bb      	str	r3, [r7, #24]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	011a      	lsls	r2, r3, #4
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	4413      	add	r3, r2
 800620e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006212:	617b      	str	r3, [r7, #20]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	88db      	ldrh	r3, [r3, #6]
 8006218:	085b      	lsrs	r3, r3, #1
 800621a:	b29b      	uxth	r3, r3
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	b29a      	uxth	r2, r3
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	827b      	strh	r3, [r7, #18]
 8006232:	8a7b      	ldrh	r3, [r7, #18]
 8006234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006238:	2b00      	cmp	r3, #0
 800623a:	d01b      	beq.n	8006274 <USB_ActivateEndpoint+0x17c>
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	b29b      	uxth	r3, r3
 800624a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006252:	823b      	strh	r3, [r7, #16]
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	441a      	add	r2, r3
 800625e:	8a3b      	ldrh	r3, [r7, #16]
 8006260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800626c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006270:	b29b      	uxth	r3, r3
 8006272:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	78db      	ldrb	r3, [r3, #3]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d020      	beq.n	80062be <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	4413      	add	r3, r2
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	b29b      	uxth	r3, r3
 800628a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800628e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006292:	81bb      	strh	r3, [r7, #12]
 8006294:	89bb      	ldrh	r3, [r7, #12]
 8006296:	f083 0320 	eor.w	r3, r3, #32
 800629a:	81bb      	strh	r3, [r7, #12]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	441a      	add	r2, r3
 80062a6:	89bb      	ldrh	r3, [r7, #12]
 80062a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	8013      	strh	r3, [r2, #0]
 80062bc:	e2d5      	b.n	800686a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062d4:	81fb      	strh	r3, [r7, #14]
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	441a      	add	r2, r3
 80062e0:	89fb      	ldrh	r3, [r7, #14]
 80062e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	8013      	strh	r3, [r2, #0]
 80062f6:	e2b8      	b.n	800686a <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	633b      	str	r3, [r7, #48]	; 0x30
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006302:	b29b      	uxth	r3, r3
 8006304:	461a      	mov	r2, r3
 8006306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006308:	4413      	add	r3, r2
 800630a:	633b      	str	r3, [r7, #48]	; 0x30
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	011a      	lsls	r2, r3, #4
 8006312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006314:	4413      	add	r3, r2
 8006316:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800631a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	88db      	ldrh	r3, [r3, #6]
 8006320:	085b      	lsrs	r3, r3, #1
 8006322:	b29b      	uxth	r3, r3
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	b29a      	uxth	r2, r3
 8006328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006336:	b29b      	uxth	r3, r3
 8006338:	461a      	mov	r2, r3
 800633a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633c:	4413      	add	r3, r2
 800633e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	011a      	lsls	r2, r3, #4
 8006346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006348:	4413      	add	r3, r2
 800634a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800634e:	627b      	str	r3, [r7, #36]	; 0x24
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	881b      	ldrh	r3, [r3, #0]
 8006354:	b29b      	uxth	r3, r3
 8006356:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800635a:	b29a      	uxth	r2, r3
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	801a      	strh	r2, [r3, #0]
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	2b3e      	cmp	r3, #62	; 0x3e
 8006366:	d91d      	bls.n	80063a4 <USB_ActivateEndpoint+0x2ac>
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	095b      	lsrs	r3, r3, #5
 800636e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	f003 031f 	and.w	r3, r3, #31
 8006378:	2b00      	cmp	r3, #0
 800637a:	d102      	bne.n	8006382 <USB_ActivateEndpoint+0x28a>
 800637c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800637e:	3b01      	subs	r3, #1
 8006380:	66bb      	str	r3, [r7, #104]	; 0x68
 8006382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006384:	881b      	ldrh	r3, [r3, #0]
 8006386:	b29a      	uxth	r2, r3
 8006388:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800638a:	b29b      	uxth	r3, r3
 800638c:	029b      	lsls	r3, r3, #10
 800638e:	b29b      	uxth	r3, r3
 8006390:	4313      	orrs	r3, r2
 8006392:	b29b      	uxth	r3, r3
 8006394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800639c:	b29a      	uxth	r2, r3
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	801a      	strh	r2, [r3, #0]
 80063a2:	e026      	b.n	80063f2 <USB_ActivateEndpoint+0x2fa>
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10a      	bne.n	80063c2 <USB_ActivateEndpoint+0x2ca>
 80063ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ae:	881b      	ldrh	r3, [r3, #0]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	801a      	strh	r2, [r3, #0]
 80063c0:	e017      	b.n	80063f2 <USB_ActivateEndpoint+0x2fa>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	085b      	lsrs	r3, r3, #1
 80063c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <USB_ActivateEndpoint+0x2e4>
 80063d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063d8:	3301      	adds	r3, #1
 80063da:	66bb      	str	r3, [r7, #104]	; 0x68
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	881b      	ldrh	r3, [r3, #0]
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	029b      	lsls	r3, r3, #10
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	4313      	orrs	r3, r2
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	847b      	strh	r3, [r7, #34]	; 0x22
 8006400:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d01b      	beq.n	8006442 <USB_ActivateEndpoint+0x34a>
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	b29b      	uxth	r3, r3
 8006418:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800641c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006420:	843b      	strh	r3, [r7, #32]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	441a      	add	r2, r3
 800642c:	8c3b      	ldrh	r3, [r7, #32]
 800642e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006436:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800643a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800643e:	b29b      	uxth	r3, r3
 8006440:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d124      	bne.n	8006494 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	b29b      	uxth	r3, r3
 8006458:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800645c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006460:	83bb      	strh	r3, [r7, #28]
 8006462:	8bbb      	ldrh	r3, [r7, #28]
 8006464:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006468:	83bb      	strh	r3, [r7, #28]
 800646a:	8bbb      	ldrh	r3, [r7, #28]
 800646c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006470:	83bb      	strh	r3, [r7, #28]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	441a      	add	r2, r3
 800647c:	8bbb      	ldrh	r3, [r7, #28]
 800647e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006482:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800648a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800648e:	b29b      	uxth	r3, r3
 8006490:	8013      	strh	r3, [r2, #0]
 8006492:	e1ea      	b.n	800686a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064aa:	83fb      	strh	r3, [r7, #30]
 80064ac:	8bfb      	ldrh	r3, [r7, #30]
 80064ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80064b2:	83fb      	strh	r3, [r7, #30]
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	441a      	add	r2, r3
 80064be:	8bfb      	ldrh	r3, [r7, #30]
 80064c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	8013      	strh	r3, [r2, #0]
 80064d4:	e1c9      	b.n	800686a <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	78db      	ldrb	r3, [r3, #3]
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d11e      	bne.n	800651c <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4413      	add	r3, r2
 80064e8:	881b      	ldrh	r3, [r3, #0]
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	441a      	add	r2, r3
 8006502:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800650a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800650e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006516:	b29b      	uxth	r3, r3
 8006518:	8013      	strh	r3, [r2, #0]
 800651a:	e01d      	b.n	8006558 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	881b      	ldrh	r3, [r3, #0]
 8006528:	b29b      	uxth	r3, r3
 800652a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800652e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006532:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	441a      	add	r2, r3
 8006540:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006544:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006548:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800654c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006554:	b29b      	uxth	r3, r3
 8006556:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006562:	b29b      	uxth	r3, r3
 8006564:	461a      	mov	r2, r3
 8006566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006568:	4413      	add	r3, r2
 800656a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	011a      	lsls	r2, r3, #4
 8006572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006574:	4413      	add	r3, r2
 8006576:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800657a:	65bb      	str	r3, [r7, #88]	; 0x58
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	891b      	ldrh	r3, [r3, #8]
 8006580:	085b      	lsrs	r3, r3, #1
 8006582:	b29b      	uxth	r3, r3
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	b29a      	uxth	r2, r3
 8006588:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800658a:	801a      	strh	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	657b      	str	r3, [r7, #84]	; 0x54
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006596:	b29b      	uxth	r3, r3
 8006598:	461a      	mov	r2, r3
 800659a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800659c:	4413      	add	r3, r2
 800659e:	657b      	str	r3, [r7, #84]	; 0x54
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	011a      	lsls	r2, r3, #4
 80065a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80065ae:	653b      	str	r3, [r7, #80]	; 0x50
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	895b      	ldrh	r3, [r3, #10]
 80065b4:	085b      	lsrs	r3, r3, #1
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065be:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	785b      	ldrb	r3, [r3, #1]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f040 8093 	bne.w	80066f0 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	881b      	ldrh	r3, [r3, #0]
 80065d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80065da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80065de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d01b      	beq.n	800661e <USB_ActivateEndpoint+0x526>
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	4413      	add	r3, r2
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	441a      	add	r2, r3
 8006608:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800660a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800660e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006612:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800661a:	b29b      	uxth	r3, r3
 800661c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	4413      	add	r3, r2
 8006628:	881b      	ldrh	r3, [r3, #0]
 800662a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800662c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800662e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006632:	2b00      	cmp	r3, #0
 8006634:	d01b      	beq.n	800666e <USB_ActivateEndpoint+0x576>
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	881b      	ldrh	r3, [r3, #0]
 8006642:	b29b      	uxth	r3, r3
 8006644:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800664c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	441a      	add	r2, r3
 8006658:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800665a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800665e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006666:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800666a:	b29b      	uxth	r3, r3
 800666c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4413      	add	r3, r2
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	b29b      	uxth	r3, r3
 800667c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006684:	873b      	strh	r3, [r7, #56]	; 0x38
 8006686:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006688:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800668c:	873b      	strh	r3, [r7, #56]	; 0x38
 800668e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006690:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006694:	873b      	strh	r3, [r7, #56]	; 0x38
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	441a      	add	r2, r3
 80066a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80066a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066cc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	441a      	add	r2, r3
 80066d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80066da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	8013      	strh	r3, [r2, #0]
 80066ee:	e0bc      	b.n	800686a <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006700:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d01d      	beq.n	8006748 <USB_ActivateEndpoint+0x650>
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	b29b      	uxth	r3, r3
 800671a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800671e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006722:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	441a      	add	r2, r3
 8006730:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006734:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006738:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800673c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006744:	b29b      	uxth	r3, r3
 8006746:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	881b      	ldrh	r3, [r3, #0]
 8006754:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006758:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800675c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006760:	2b00      	cmp	r3, #0
 8006762:	d01d      	beq.n	80067a0 <USB_ActivateEndpoint+0x6a8>
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	b29b      	uxth	r3, r3
 8006772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	441a      	add	r2, r3
 8006788:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800678c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006790:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006798:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800679c:	b29b      	uxth	r3, r3
 800679e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	78db      	ldrb	r3, [r3, #3]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d024      	beq.n	80067f2 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4413      	add	r3, r2
 80067b2:	881b      	ldrh	r3, [r3, #0]
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067be:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80067c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80067c6:	f083 0320 	eor.w	r3, r3, #32
 80067ca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	441a      	add	r2, r3
 80067d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80067dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	8013      	strh	r3, [r2, #0]
 80067f0:	e01d      	b.n	800682e <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4413      	add	r3, r2
 80067fc:	881b      	ldrh	r3, [r3, #0]
 80067fe:	b29b      	uxth	r3, r3
 8006800:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006808:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	441a      	add	r2, r3
 8006816:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800681a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800681e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800682a:	b29b      	uxth	r3, r3
 800682c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4413      	add	r3, r2
 8006838:	881b      	ldrh	r3, [r3, #0]
 800683a:	b29b      	uxth	r3, r3
 800683c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006844:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	441a      	add	r2, r3
 8006852:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006856:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800685a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800685e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006866:	b29b      	uxth	r3, r3
 8006868:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800686a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800686e:	4618      	mov	r0, r3
 8006870:	3774      	adds	r7, #116	; 0x74
 8006872:	46bd      	mov	sp, r7
 8006874:	bc80      	pop	{r7}
 8006876:	4770      	bx	lr

08006878 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006878:	b480      	push	{r7}
 800687a:	b08d      	sub	sp, #52	; 0x34
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	7b1b      	ldrb	r3, [r3, #12]
 8006886:	2b00      	cmp	r3, #0
 8006888:	f040 808e 	bne.w	80069a8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	785b      	ldrb	r3, [r3, #1]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d044      	beq.n	800691e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	881b      	ldrh	r3, [r3, #0]
 80068a0:	81bb      	strh	r3, [r7, #12]
 80068a2:	89bb      	ldrh	r3, [r7, #12]
 80068a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d01b      	beq.n	80068e4 <USB_DeactivateEndpoint+0x6c>
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4413      	add	r3, r2
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c2:	817b      	strh	r3, [r7, #10]
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	441a      	add	r2, r3
 80068ce:	897b      	ldrh	r3, [r7, #10]
 80068d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068fa:	813b      	strh	r3, [r7, #8]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	441a      	add	r2, r3
 8006906:	893b      	ldrh	r3, [r7, #8]
 8006908:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800690c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006918:	b29b      	uxth	r3, r3
 800691a:	8013      	strh	r3, [r2, #0]
 800691c:	e192      	b.n	8006c44 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	881b      	ldrh	r3, [r3, #0]
 800692a:	827b      	strh	r3, [r7, #18]
 800692c:	8a7b      	ldrh	r3, [r7, #18]
 800692e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d01b      	beq.n	800696e <USB_DeactivateEndpoint+0xf6>
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	881b      	ldrh	r3, [r3, #0]
 8006942:	b29b      	uxth	r3, r3
 8006944:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694c:	823b      	strh	r3, [r7, #16]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	441a      	add	r2, r3
 8006958:	8a3b      	ldrh	r3, [r7, #16]
 800695a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800695e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006962:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800696a:	b29b      	uxth	r3, r3
 800696c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	b29b      	uxth	r3, r3
 800697c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006984:	81fb      	strh	r3, [r7, #14]
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	441a      	add	r2, r3
 8006990:	89fb      	ldrh	r3, [r7, #14]
 8006992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800699a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800699e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	8013      	strh	r3, [r2, #0]
 80069a6:	e14d      	b.n	8006c44 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	785b      	ldrb	r3, [r3, #1]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f040 80a5 	bne.w	8006afc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	843b      	strh	r3, [r7, #32]
 80069c0:	8c3b      	ldrh	r3, [r7, #32]
 80069c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d01b      	beq.n	8006a02 <USB_DeactivateEndpoint+0x18a>
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e0:	83fb      	strh	r3, [r7, #30]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	441a      	add	r2, r3
 80069ec:	8bfb      	ldrh	r3, [r7, #30]
 80069ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	83bb      	strh	r3, [r7, #28]
 8006a10:	8bbb      	ldrh	r3, [r7, #28]
 8006a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d01b      	beq.n	8006a52 <USB_DeactivateEndpoint+0x1da>
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	881b      	ldrh	r3, [r3, #0]
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a30:	837b      	strh	r3, [r7, #26]
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	441a      	add	r2, r3
 8006a3c:	8b7b      	ldrh	r3, [r7, #26]
 8006a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	881b      	ldrh	r3, [r3, #0]
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a68:	833b      	strh	r3, [r7, #24]
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	441a      	add	r2, r3
 8006a74:	8b3b      	ldrh	r3, [r7, #24]
 8006a76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa0:	82fb      	strh	r3, [r7, #22]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	441a      	add	r2, r3
 8006aac:	8afb      	ldrh	r3, [r7, #22]
 8006aae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ab2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4413      	add	r3, r2
 8006acc:	881b      	ldrh	r3, [r3, #0]
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ad8:	82bb      	strh	r3, [r7, #20]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	441a      	add	r2, r3
 8006ae4:	8abb      	ldrh	r3, [r7, #20]
 8006ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	8013      	strh	r3, [r2, #0]
 8006afa:	e0a3      	b.n	8006c44 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	881b      	ldrh	r3, [r3, #0]
 8006b08:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006b0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d01b      	beq.n	8006b4c <USB_DeactivateEndpoint+0x2d4>
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4413      	add	r3, r2
 8006b1e:	881b      	ldrh	r3, [r3, #0]
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b2a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	441a      	add	r2, r3
 8006b36:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006b38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	881b      	ldrh	r3, [r3, #0]
 8006b58:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006b5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d01b      	beq.n	8006b9c <USB_DeactivateEndpoint+0x324>
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	881b      	ldrh	r3, [r3, #0]
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b7a:	853b      	strh	r3, [r7, #40]	; 0x28
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	441a      	add	r2, r3
 8006b86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4413      	add	r3, r2
 8006ba6:	881b      	ldrh	r3, [r3, #0]
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	441a      	add	r2, r3
 8006bbe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006bc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bea:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	441a      	add	r2, r3
 8006bf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4413      	add	r3, r2
 8006c16:	881b      	ldrh	r3, [r3, #0]
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c22:	847b      	strh	r3, [r7, #34]	; 0x22
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	441a      	add	r2, r3
 8006c2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3734      	adds	r7, #52	; 0x34
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bc80      	pop	{r7}
 8006c4e:	4770      	bx	lr

08006c50 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b0c2      	sub	sp, #264	; 0x108
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c5e:	6018      	str	r0, [r3, #0]
 8006c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c68:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	785b      	ldrb	r3, [r3, #1]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	f040 86b7 	bne.w	80079ea <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	699a      	ldr	r2, [r3, #24]
 8006c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d908      	bls.n	8006caa <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006ca8:	e007      	b.n	8006cba <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	7b1b      	ldrb	r3, [r3, #12]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d13a      	bne.n	8006d40 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6959      	ldr	r1, [r3, #20]
 8006cd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	88da      	ldrh	r2, [r3, #6]
 8006ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006cec:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006cf0:	6800      	ldr	r0, [r0, #0]
 8006cf2:	f001 fc9c 	bl	800862e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	613b      	str	r3, [r7, #16]
 8006d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	461a      	mov	r2, r3
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	4413      	add	r3, r2
 8006d18:	613b      	str	r3, [r7, #16]
 8006d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	011a      	lsls	r2, r3, #4
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d30:	60fb      	str	r3, [r7, #12]
 8006d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	801a      	strh	r2, [r3, #0]
 8006d3c:	f000 be1f 	b.w	800797e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	78db      	ldrb	r3, [r3, #3]
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	f040 8462 	bne.w	8007616 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	6a1a      	ldr	r2, [r3, #32]
 8006d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	f240 83df 	bls.w	800752e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	881b      	ldrh	r3, [r3, #0]
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d96:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	441a      	add	r2, r3
 8006db4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	6a1a      	ldr	r2, [r3, #32]
 8006dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ddc:	1ad2      	subs	r2, r2, r3
 8006dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f000 81c7 	beq.w	80071a0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	633b      	str	r3, [r7, #48]	; 0x30
 8006e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	785b      	ldrb	r3, [r3, #1]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d177      	bne.n	8006f1e <USB_EPStartXfer+0x2ce>
 8006e2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4e:	4413      	add	r3, r2
 8006e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	011a      	lsls	r2, r3, #4
 8006e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e62:	4413      	add	r3, r2
 8006e64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e68:	627b      	str	r3, [r7, #36]	; 0x24
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e78:	801a      	strh	r2, [r3, #0]
 8006e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e7e:	2b3e      	cmp	r3, #62	; 0x3e
 8006e80:	d921      	bls.n	8006ec6 <USB_EPStartXfer+0x276>
 8006e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e86:	095b      	lsrs	r3, r3, #5
 8006e88:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e90:	f003 031f 	and.w	r3, r3, #31
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d104      	bne.n	8006ea2 <USB_EPStartXfer+0x252>
 8006e98:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	029b      	lsls	r3, r3, #10
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	801a      	strh	r2, [r3, #0]
 8006ec4:	e050      	b.n	8006f68 <USB_EPStartXfer+0x318>
 8006ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10a      	bne.n	8006ee4 <USB_EPStartXfer+0x294>
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee0:	801a      	strh	r2, [r3, #0]
 8006ee2:	e041      	b.n	8006f68 <USB_EPStartXfer+0x318>
 8006ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ee8:	085b      	lsrs	r3, r3, #1
 8006eea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d004      	beq.n	8006f04 <USB_EPStartXfer+0x2b4>
 8006efa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006efe:	3301      	adds	r3, #1
 8006f00:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	029b      	lsls	r3, r3, #10
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	4313      	orrs	r3, r2
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1a:	801a      	strh	r2, [r3, #0]
 8006f1c:	e024      	b.n	8006f68 <USB_EPStartXfer+0x318>
 8006f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	785b      	ldrb	r3, [r3, #1]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d11c      	bne.n	8006f68 <USB_EPStartXfer+0x318>
 8006f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	461a      	mov	r2, r3
 8006f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f42:	4413      	add	r3, r2
 8006f44:	633b      	str	r3, [r7, #48]	; 0x30
 8006f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	011a      	lsls	r2, r3, #4
 8006f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f56:	4413      	add	r3, r2
 8006f58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f66:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	895b      	ldrh	r3, [r3, #10]
 8006f74:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6959      	ldr	r1, [r3, #20]
 8006f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006f8e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006f92:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006f96:	6800      	ldr	r0, [r0, #0]
 8006f98:	f001 fb49 	bl	800862e <USB_WritePMA>
            ep->xfer_buff += len;
 8006f9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	695a      	ldr	r2, [r3, #20]
 8006fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fac:	441a      	add	r2, r3
 8006fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	6a1a      	ldr	r2, [r3, #32]
 8006fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d90f      	bls.n	8006ff6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6a1a      	ldr	r2, [r3, #32]
 8006fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fe6:	1ad2      	subs	r2, r2, r3
 8006fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	621a      	str	r2, [r3, #32]
 8006ff4:	e00e      	b.n	8007014 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ffa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800700a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2200      	movs	r2, #0
 8007012:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	785b      	ldrb	r3, [r3, #1]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d177      	bne.n	8007114 <USB_EPStartXfer+0x4c4>
 8007024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007028:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	61bb      	str	r3, [r7, #24]
 8007030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007034:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800703e:	b29b      	uxth	r3, r3
 8007040:	461a      	mov	r2, r3
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	4413      	add	r3, r2
 8007046:	61bb      	str	r3, [r7, #24]
 8007048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800704c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	011a      	lsls	r2, r3, #4
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	4413      	add	r3, r2
 800705a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800705e:	617b      	str	r3, [r7, #20]
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	b29b      	uxth	r3, r3
 8007066:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800706a:	b29a      	uxth	r2, r3
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	801a      	strh	r2, [r3, #0]
 8007070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007074:	2b3e      	cmp	r3, #62	; 0x3e
 8007076:	d921      	bls.n	80070bc <USB_EPStartXfer+0x46c>
 8007078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800707c:	095b      	lsrs	r3, r3, #5
 800707e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007086:	f003 031f 	and.w	r3, r3, #31
 800708a:	2b00      	cmp	r3, #0
 800708c:	d104      	bne.n	8007098 <USB_EPStartXfer+0x448>
 800708e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007092:	3b01      	subs	r3, #1
 8007094:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	881b      	ldrh	r3, [r3, #0]
 800709c:	b29a      	uxth	r2, r3
 800709e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	029b      	lsls	r3, r3, #10
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	4313      	orrs	r3, r2
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	801a      	strh	r2, [r3, #0]
 80070ba:	e056      	b.n	800716a <USB_EPStartXfer+0x51a>
 80070bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10a      	bne.n	80070da <USB_EPStartXfer+0x48a>
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	801a      	strh	r2, [r3, #0]
 80070d8:	e047      	b.n	800716a <USB_EPStartXfer+0x51a>
 80070da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070de:	085b      	lsrs	r3, r3, #1
 80070e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80070e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d004      	beq.n	80070fa <USB_EPStartXfer+0x4aa>
 80070f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070f4:	3301      	adds	r3, #1
 80070f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	881b      	ldrh	r3, [r3, #0]
 80070fe:	b29a      	uxth	r2, r3
 8007100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007104:	b29b      	uxth	r3, r3
 8007106:	029b      	lsls	r3, r3, #10
 8007108:	b29b      	uxth	r3, r3
 800710a:	4313      	orrs	r3, r2
 800710c:	b29a      	uxth	r2, r3
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	801a      	strh	r2, [r3, #0]
 8007112:	e02a      	b.n	800716a <USB_EPStartXfer+0x51a>
 8007114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	785b      	ldrb	r3, [r3, #1]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d122      	bne.n	800716a <USB_EPStartXfer+0x51a>
 8007124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007128:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	623b      	str	r3, [r7, #32]
 8007130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007134:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800713e:	b29b      	uxth	r3, r3
 8007140:	461a      	mov	r2, r3
 8007142:	6a3b      	ldr	r3, [r7, #32]
 8007144:	4413      	add	r3, r2
 8007146:	623b      	str	r3, [r7, #32]
 8007148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800714c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	011a      	lsls	r2, r3, #4
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	4413      	add	r3, r2
 800715a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800715e:	61fb      	str	r3, [r7, #28]
 8007160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007164:	b29a      	uxth	r2, r3
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800716a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800716e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	891b      	ldrh	r3, [r3, #8]
 8007176:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800717a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800717e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	6959      	ldr	r1, [r3, #20]
 8007186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800718a:	b29b      	uxth	r3, r3
 800718c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007190:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007194:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007198:	6800      	ldr	r0, [r0, #0]
 800719a:	f001 fa48 	bl	800862e <USB_WritePMA>
 800719e:	e3ee      	b.n	800797e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	785b      	ldrb	r3, [r3, #1]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d177      	bne.n	80072a0 <USB_EPStartXfer+0x650>
 80071b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80071bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	461a      	mov	r2, r3
 80071ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071d0:	4413      	add	r3, r2
 80071d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80071d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	011a      	lsls	r2, r3, #4
 80071e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071e4:	4413      	add	r3, r2
 80071e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071ea:	647b      	str	r3, [r7, #68]	; 0x44
 80071ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071ee:	881b      	ldrh	r3, [r3, #0]
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071fa:	801a      	strh	r2, [r3, #0]
 80071fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007200:	2b3e      	cmp	r3, #62	; 0x3e
 8007202:	d921      	bls.n	8007248 <USB_EPStartXfer+0x5f8>
 8007204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007208:	095b      	lsrs	r3, r3, #5
 800720a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800720e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007212:	f003 031f 	and.w	r3, r3, #31
 8007216:	2b00      	cmp	r3, #0
 8007218:	d104      	bne.n	8007224 <USB_EPStartXfer+0x5d4>
 800721a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800721e:	3b01      	subs	r3, #1
 8007220:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	b29a      	uxth	r2, r3
 800722a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800722e:	b29b      	uxth	r3, r3
 8007230:	029b      	lsls	r3, r3, #10
 8007232:	b29b      	uxth	r3, r3
 8007234:	4313      	orrs	r3, r2
 8007236:	b29b      	uxth	r3, r3
 8007238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800723c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007240:	b29a      	uxth	r2, r3
 8007242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007244:	801a      	strh	r2, [r3, #0]
 8007246:	e056      	b.n	80072f6 <USB_EPStartXfer+0x6a6>
 8007248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10a      	bne.n	8007266 <USB_EPStartXfer+0x616>
 8007250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007252:	881b      	ldrh	r3, [r3, #0]
 8007254:	b29b      	uxth	r3, r3
 8007256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800725a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800725e:	b29a      	uxth	r2, r3
 8007260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007262:	801a      	strh	r2, [r3, #0]
 8007264:	e047      	b.n	80072f6 <USB_EPStartXfer+0x6a6>
 8007266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800726a:	085b      	lsrs	r3, r3, #1
 800726c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007274:	f003 0301 	and.w	r3, r3, #1
 8007278:	2b00      	cmp	r3, #0
 800727a:	d004      	beq.n	8007286 <USB_EPStartXfer+0x636>
 800727c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007280:	3301      	adds	r3, #1
 8007282:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	b29a      	uxth	r2, r3
 800728c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007290:	b29b      	uxth	r3, r3
 8007292:	029b      	lsls	r3, r3, #10
 8007294:	b29b      	uxth	r3, r3
 8007296:	4313      	orrs	r3, r2
 8007298:	b29a      	uxth	r2, r3
 800729a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800729c:	801a      	strh	r2, [r3, #0]
 800729e:	e02a      	b.n	80072f6 <USB_EPStartXfer+0x6a6>
 80072a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	785b      	ldrb	r3, [r3, #1]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d122      	bne.n	80072f6 <USB_EPStartXfer+0x6a6>
 80072b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	653b      	str	r3, [r7, #80]	; 0x50
 80072bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	461a      	mov	r2, r3
 80072ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072d0:	4413      	add	r3, r2
 80072d2:	653b      	str	r3, [r7, #80]	; 0x50
 80072d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	011a      	lsls	r2, r3, #4
 80072e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072e4:	4413      	add	r3, r2
 80072e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80072f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	891b      	ldrh	r3, [r3, #8]
 8007302:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800730a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6959      	ldr	r1, [r3, #20]
 8007312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007316:	b29b      	uxth	r3, r3
 8007318:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800731c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007320:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007324:	6800      	ldr	r0, [r0, #0]
 8007326:	f001 f982 	bl	800862e <USB_WritePMA>
            ep->xfer_buff += len;
 800732a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800732e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	695a      	ldr	r2, [r3, #20]
 8007336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800733a:	441a      	add	r2, r3
 800733c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800734c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6a1a      	ldr	r2, [r3, #32]
 8007354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	429a      	cmp	r2, r3
 8007362:	d90f      	bls.n	8007384 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	6a1a      	ldr	r2, [r3, #32]
 8007370:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007374:	1ad2      	subs	r2, r2, r3
 8007376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800737a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	621a      	str	r2, [r3, #32]
 8007382:	e00e      	b.n	80073a2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6a1b      	ldr	r3, [r3, #32]
 8007390:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2200      	movs	r2, #0
 80073a0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80073a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	643b      	str	r3, [r7, #64]	; 0x40
 80073ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	785b      	ldrb	r3, [r3, #1]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d177      	bne.n	80074ae <USB_EPStartXfer+0x85e>
 80073be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80073ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073d8:	b29b      	uxth	r3, r3
 80073da:	461a      	mov	r2, r3
 80073dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073de:	4413      	add	r3, r2
 80073e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80073e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	011a      	lsls	r2, r3, #4
 80073f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f2:	4413      	add	r3, r2
 80073f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073f8:	637b      	str	r3, [r7, #52]	; 0x34
 80073fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073fc:	881b      	ldrh	r3, [r3, #0]
 80073fe:	b29b      	uxth	r3, r3
 8007400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007404:	b29a      	uxth	r2, r3
 8007406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007408:	801a      	strh	r2, [r3, #0]
 800740a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800740e:	2b3e      	cmp	r3, #62	; 0x3e
 8007410:	d921      	bls.n	8007456 <USB_EPStartXfer+0x806>
 8007412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007416:	095b      	lsrs	r3, r3, #5
 8007418:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800741c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007420:	f003 031f 	and.w	r3, r3, #31
 8007424:	2b00      	cmp	r3, #0
 8007426:	d104      	bne.n	8007432 <USB_EPStartXfer+0x7e2>
 8007428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800742c:	3b01      	subs	r3, #1
 800742e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	b29a      	uxth	r2, r3
 8007438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800743c:	b29b      	uxth	r3, r3
 800743e:	029b      	lsls	r3, r3, #10
 8007440:	b29b      	uxth	r3, r3
 8007442:	4313      	orrs	r3, r2
 8007444:	b29b      	uxth	r3, r3
 8007446:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800744a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800744e:	b29a      	uxth	r2, r3
 8007450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007452:	801a      	strh	r2, [r3, #0]
 8007454:	e050      	b.n	80074f8 <USB_EPStartXfer+0x8a8>
 8007456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10a      	bne.n	8007474 <USB_EPStartXfer+0x824>
 800745e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007460:	881b      	ldrh	r3, [r3, #0]
 8007462:	b29b      	uxth	r3, r3
 8007464:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007468:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800746c:	b29a      	uxth	r2, r3
 800746e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007470:	801a      	strh	r2, [r3, #0]
 8007472:	e041      	b.n	80074f8 <USB_EPStartXfer+0x8a8>
 8007474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007478:	085b      	lsrs	r3, r3, #1
 800747a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800747e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	2b00      	cmp	r3, #0
 8007488:	d004      	beq.n	8007494 <USB_EPStartXfer+0x844>
 800748a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800748e:	3301      	adds	r3, #1
 8007490:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007496:	881b      	ldrh	r3, [r3, #0]
 8007498:	b29a      	uxth	r2, r3
 800749a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800749e:	b29b      	uxth	r3, r3
 80074a0:	029b      	lsls	r3, r3, #10
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	4313      	orrs	r3, r2
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074aa:	801a      	strh	r2, [r3, #0]
 80074ac:	e024      	b.n	80074f8 <USB_EPStartXfer+0x8a8>
 80074ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	785b      	ldrb	r3, [r3, #1]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d11c      	bne.n	80074f8 <USB_EPStartXfer+0x8a8>
 80074be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	461a      	mov	r2, r3
 80074d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074d2:	4413      	add	r3, r2
 80074d4:	643b      	str	r3, [r7, #64]	; 0x40
 80074d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	011a      	lsls	r2, r3, #4
 80074e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074e6:	4413      	add	r3, r2
 80074e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80074f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	895b      	ldrh	r3, [r3, #10]
 8007504:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800750c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6959      	ldr	r1, [r3, #20]
 8007514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007518:	b29b      	uxth	r3, r3
 800751a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800751e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007522:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007526:	6800      	ldr	r0, [r0, #0]
 8007528:	f001 f881 	bl	800862e <USB_WritePMA>
 800752c:	e227      	b.n	800797e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800752e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6a1b      	ldr	r3, [r3, #32]
 800753a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800753e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007542:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800754c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4413      	add	r3, r2
 8007558:	881b      	ldrh	r3, [r3, #0]
 800755a:	b29b      	uxth	r3, r3
 800755c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007564:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800756c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	441a      	add	r2, r3
 8007582:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800758a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800758e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007596:	b29b      	uxth	r3, r3
 8007598:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800759a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800759e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	461a      	mov	r2, r3
 80075b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075ba:	4413      	add	r3, r2
 80075bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	011a      	lsls	r2, r3, #4
 80075cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075ce:	4413      	add	r3, r2
 80075d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80075d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075da:	b29a      	uxth	r2, r3
 80075dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80075de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80075e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	891b      	ldrh	r3, [r3, #8]
 80075ec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	6959      	ldr	r1, [r3, #20]
 80075fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007600:	b29b      	uxth	r3, r3
 8007602:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007606:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800760a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800760e:	6800      	ldr	r0, [r0, #0]
 8007610:	f001 f80d 	bl	800862e <USB_WritePMA>
 8007614:	e1b3      	b.n	800797e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800761a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6a1a      	ldr	r2, [r3, #32]
 8007622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007626:	1ad2      	subs	r2, r2, r3
 8007628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800762c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007638:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007642:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	4413      	add	r3, r2
 800764e:	881b      	ldrh	r3, [r3, #0]
 8007650:	b29b      	uxth	r3, r3
 8007652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 80c6 	beq.w	80077e8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800765c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007660:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	673b      	str	r3, [r7, #112]	; 0x70
 8007668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800766c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	785b      	ldrb	r3, [r3, #1]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d177      	bne.n	8007768 <USB_EPStartXfer+0xb18>
 8007678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800767c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	66bb      	str	r3, [r7, #104]	; 0x68
 8007684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007688:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007692:	b29b      	uxth	r3, r3
 8007694:	461a      	mov	r2, r3
 8007696:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007698:	4413      	add	r3, r2
 800769a:	66bb      	str	r3, [r7, #104]	; 0x68
 800769c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	011a      	lsls	r2, r3, #4
 80076aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076ac:	4413      	add	r3, r2
 80076ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076b2:	667b      	str	r3, [r7, #100]	; 0x64
 80076b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076b6:	881b      	ldrh	r3, [r3, #0]
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076be:	b29a      	uxth	r2, r3
 80076c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076c2:	801a      	strh	r2, [r3, #0]
 80076c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076c8:	2b3e      	cmp	r3, #62	; 0x3e
 80076ca:	d921      	bls.n	8007710 <USB_EPStartXfer+0xac0>
 80076cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076d0:	095b      	lsrs	r3, r3, #5
 80076d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80076d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076da:	f003 031f 	and.w	r3, r3, #31
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d104      	bne.n	80076ec <USB_EPStartXfer+0xa9c>
 80076e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80076e6:	3b01      	subs	r3, #1
 80076e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80076ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076ee:	881b      	ldrh	r3, [r3, #0]
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	029b      	lsls	r3, r3, #10
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	4313      	orrs	r3, r2
 80076fe:	b29b      	uxth	r3, r3
 8007700:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007704:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007708:	b29a      	uxth	r2, r3
 800770a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800770c:	801a      	strh	r2, [r3, #0]
 800770e:	e050      	b.n	80077b2 <USB_EPStartXfer+0xb62>
 8007710:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10a      	bne.n	800772e <USB_EPStartXfer+0xade>
 8007718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800771a:	881b      	ldrh	r3, [r3, #0]
 800771c:	b29b      	uxth	r3, r3
 800771e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007726:	b29a      	uxth	r2, r3
 8007728:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800772a:	801a      	strh	r2, [r3, #0]
 800772c:	e041      	b.n	80077b2 <USB_EPStartXfer+0xb62>
 800772e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007732:	085b      	lsrs	r3, r3, #1
 8007734:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800773c:	f003 0301 	and.w	r3, r3, #1
 8007740:	2b00      	cmp	r3, #0
 8007742:	d004      	beq.n	800774e <USB_EPStartXfer+0xafe>
 8007744:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007748:	3301      	adds	r3, #1
 800774a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800774e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007750:	881b      	ldrh	r3, [r3, #0]
 8007752:	b29a      	uxth	r2, r3
 8007754:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007758:	b29b      	uxth	r3, r3
 800775a:	029b      	lsls	r3, r3, #10
 800775c:	b29b      	uxth	r3, r3
 800775e:	4313      	orrs	r3, r2
 8007760:	b29a      	uxth	r2, r3
 8007762:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007764:	801a      	strh	r2, [r3, #0]
 8007766:	e024      	b.n	80077b2 <USB_EPStartXfer+0xb62>
 8007768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800776c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	785b      	ldrb	r3, [r3, #1]
 8007774:	2b01      	cmp	r3, #1
 8007776:	d11c      	bne.n	80077b2 <USB_EPStartXfer+0xb62>
 8007778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800777c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007786:	b29b      	uxth	r3, r3
 8007788:	461a      	mov	r2, r3
 800778a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800778c:	4413      	add	r3, r2
 800778e:	673b      	str	r3, [r7, #112]	; 0x70
 8007790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	011a      	lsls	r2, r3, #4
 800779e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077a0:	4413      	add	r3, r2
 80077a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077b0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80077b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	895b      	ldrh	r3, [r3, #10]
 80077be:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6959      	ldr	r1, [r3, #20]
 80077ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80077d8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80077dc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80077e0:	6800      	ldr	r0, [r0, #0]
 80077e2:	f000 ff24 	bl	800862e <USB_WritePMA>
 80077e6:	e0ca      	b.n	800797e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80077e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	785b      	ldrb	r3, [r3, #1]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d177      	bne.n	80078e8 <USB_EPStartXfer+0xc98>
 80077f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007808:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007812:	b29b      	uxth	r3, r3
 8007814:	461a      	mov	r2, r3
 8007816:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007818:	4413      	add	r3, r2
 800781a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800781c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	011a      	lsls	r2, r3, #4
 800782a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800782c:	4413      	add	r3, r2
 800782e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007832:	67bb      	str	r3, [r7, #120]	; 0x78
 8007834:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007836:	881b      	ldrh	r3, [r3, #0]
 8007838:	b29b      	uxth	r3, r3
 800783a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800783e:	b29a      	uxth	r2, r3
 8007840:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007842:	801a      	strh	r2, [r3, #0]
 8007844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007848:	2b3e      	cmp	r3, #62	; 0x3e
 800784a:	d921      	bls.n	8007890 <USB_EPStartXfer+0xc40>
 800784c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007850:	095b      	lsrs	r3, r3, #5
 8007852:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800785a:	f003 031f 	and.w	r3, r3, #31
 800785e:	2b00      	cmp	r3, #0
 8007860:	d104      	bne.n	800786c <USB_EPStartXfer+0xc1c>
 8007862:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007866:	3b01      	subs	r3, #1
 8007868:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800786c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800786e:	881b      	ldrh	r3, [r3, #0]
 8007870:	b29a      	uxth	r2, r3
 8007872:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007876:	b29b      	uxth	r3, r3
 8007878:	029b      	lsls	r3, r3, #10
 800787a:	b29b      	uxth	r3, r3
 800787c:	4313      	orrs	r3, r2
 800787e:	b29b      	uxth	r3, r3
 8007880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007888:	b29a      	uxth	r2, r3
 800788a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800788c:	801a      	strh	r2, [r3, #0]
 800788e:	e05c      	b.n	800794a <USB_EPStartXfer+0xcfa>
 8007890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007894:	2b00      	cmp	r3, #0
 8007896:	d10a      	bne.n	80078ae <USB_EPStartXfer+0xc5e>
 8007898:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	b29b      	uxth	r3, r3
 800789e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078aa:	801a      	strh	r2, [r3, #0]
 80078ac:	e04d      	b.n	800794a <USB_EPStartXfer+0xcfa>
 80078ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078b2:	085b      	lsrs	r3, r3, #1
 80078b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80078b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078bc:	f003 0301 	and.w	r3, r3, #1
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d004      	beq.n	80078ce <USB_EPStartXfer+0xc7e>
 80078c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80078c8:	3301      	adds	r3, #1
 80078ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80078ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078d0:	881b      	ldrh	r3, [r3, #0]
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80078d8:	b29b      	uxth	r3, r3
 80078da:	029b      	lsls	r3, r3, #10
 80078dc:	b29b      	uxth	r3, r3
 80078de:	4313      	orrs	r3, r2
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078e4:	801a      	strh	r2, [r3, #0]
 80078e6:	e030      	b.n	800794a <USB_EPStartXfer+0xcfa>
 80078e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	785b      	ldrb	r3, [r3, #1]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d128      	bne.n	800794a <USB_EPStartXfer+0xcfa>
 80078f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800790a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007914:	b29b      	uxth	r3, r3
 8007916:	461a      	mov	r2, r3
 8007918:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800791c:	4413      	add	r3, r2
 800791e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007926:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	011a      	lsls	r2, r3, #4
 8007930:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007934:	4413      	add	r3, r2
 8007936:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800793a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800793e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007942:	b29a      	uxth	r2, r3
 8007944:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007948:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800794a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800794e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	891b      	ldrh	r3, [r3, #8]
 8007956:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800795a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800795e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	6959      	ldr	r1, [r3, #20]
 8007966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800796a:	b29b      	uxth	r3, r3
 800796c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007970:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007974:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007978:	6800      	ldr	r0, [r0, #0]
 800797a:	f000 fe58 	bl	800862e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800797e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007982:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800798c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	b29b      	uxth	r3, r3
 800799c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079a4:	817b      	strh	r3, [r7, #10]
 80079a6:	897b      	ldrh	r3, [r7, #10]
 80079a8:	f083 0310 	eor.w	r3, r3, #16
 80079ac:	817b      	strh	r3, [r7, #10]
 80079ae:	897b      	ldrh	r3, [r7, #10]
 80079b0:	f083 0320 	eor.w	r3, r3, #32
 80079b4:	817b      	strh	r3, [r7, #10]
 80079b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	441a      	add	r2, r3
 80079d0:	897b      	ldrh	r3, [r7, #10]
 80079d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	8013      	strh	r3, [r2, #0]
 80079e6:	f000 bcde 	b.w	80083a6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80079ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	7b1b      	ldrb	r3, [r3, #12]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f040 80bb 	bne.w	8007b72 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80079fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	699a      	ldr	r2, [r3, #24]
 8007a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d917      	bls.n	8007a48 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007a28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	699a      	ldr	r2, [r3, #24]
 8007a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a38:	1ad2      	subs	r2, r2, r3
 8007a3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	619a      	str	r2, [r3, #24]
 8007a46:	e00e      	b.n	8007a66 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	699b      	ldr	r3, [r3, #24]
 8007a54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2200      	movs	r2, #0
 8007a64:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	461a      	mov	r2, r3
 8007a86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	011a      	lsls	r2, r3, #4
 8007a9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007aa8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007aac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ab0:	881b      	ldrh	r3, [r3, #0]
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007abe:	801a      	strh	r2, [r3, #0]
 8007ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ac4:	2b3e      	cmp	r3, #62	; 0x3e
 8007ac6:	d924      	bls.n	8007b12 <USB_EPStartXfer+0xec2>
 8007ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007acc:	095b      	lsrs	r3, r3, #5
 8007ace:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ad6:	f003 031f 	and.w	r3, r3, #31
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d104      	bne.n	8007ae8 <USB_EPStartXfer+0xe98>
 8007ade:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ae8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007aec:	881b      	ldrh	r3, [r3, #0]
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	029b      	lsls	r3, r3, #10
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	4313      	orrs	r3, r2
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b0c:	801a      	strh	r2, [r3, #0]
 8007b0e:	f000 bc10 	b.w	8008332 <USB_EPStartXfer+0x16e2>
 8007b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10c      	bne.n	8007b34 <USB_EPStartXfer+0xee4>
 8007b1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b1e:	881b      	ldrh	r3, [r3, #0]
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b2a:	b29a      	uxth	r2, r3
 8007b2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b30:	801a      	strh	r2, [r3, #0]
 8007b32:	e3fe      	b.n	8008332 <USB_EPStartXfer+0x16e2>
 8007b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b38:	085b      	lsrs	r3, r3, #1
 8007b3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d004      	beq.n	8007b54 <USB_EPStartXfer+0xf04>
 8007b4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b4e:	3301      	adds	r3, #1
 8007b50:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b58:	881b      	ldrh	r3, [r3, #0]
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	029b      	lsls	r3, r3, #10
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	4313      	orrs	r3, r2
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b6e:	801a      	strh	r2, [r3, #0]
 8007b70:	e3df      	b.n	8008332 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	78db      	ldrb	r3, [r3, #3]
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	f040 8218 	bne.w	8007fb4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	785b      	ldrb	r3, [r3, #1]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f040 809d 	bne.w	8007cd0 <USB_EPStartXfer+0x1080>
 8007b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ba8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007bba:	4413      	add	r3, r2
 8007bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	011a      	lsls	r2, r3, #4
 8007bce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007bd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007bdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007be0:	881b      	ldrh	r3, [r3, #0]
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007bee:	801a      	strh	r2, [r3, #0]
 8007bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	2b3e      	cmp	r3, #62	; 0x3e
 8007bfe:	d92b      	bls.n	8007c58 <USB_EPStartXfer+0x1008>
 8007c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	095b      	lsrs	r3, r3, #5
 8007c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	f003 031f 	and.w	r3, r3, #31
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d104      	bne.n	8007c30 <USB_EPStartXfer+0xfe0>
 8007c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	b29a      	uxth	r2, r3
 8007c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	029b      	lsls	r3, r3, #10
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	4313      	orrs	r3, r2
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c54:	801a      	strh	r2, [r3, #0]
 8007c56:	e070      	b.n	8007d3a <USB_EPStartXfer+0x10ea>
 8007c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10c      	bne.n	8007c82 <USB_EPStartXfer+0x1032>
 8007c68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c6c:	881b      	ldrh	r3, [r3, #0]
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c7e:	801a      	strh	r2, [r3, #0]
 8007c80:	e05b      	b.n	8007d3a <USB_EPStartXfer+0x10ea>
 8007c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	085b      	lsrs	r3, r3, #1
 8007c90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d004      	beq.n	8007cb2 <USB_EPStartXfer+0x1062>
 8007ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cac:	3301      	adds	r3, #1
 8007cae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007cb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007cb6:	881b      	ldrh	r3, [r3, #0]
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	029b      	lsls	r3, r3, #10
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	b29a      	uxth	r2, r3
 8007cc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ccc:	801a      	strh	r2, [r3, #0]
 8007cce:	e034      	b.n	8007d3a <USB_EPStartXfer+0x10ea>
 8007cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	785b      	ldrb	r3, [r3, #1]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d12c      	bne.n	8007d3a <USB_EPStartXfer+0x10ea>
 8007ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ce4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	461a      	mov	r2, r3
 8007d00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007d04:	4413      	add	r3, r2
 8007d06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	011a      	lsls	r2, r3, #4
 8007d18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007d1c:	4413      	add	r3, r2
 8007d1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007d38:	801a      	strh	r2, [r3, #0]
 8007d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	785b      	ldrb	r3, [r3, #1]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f040 809d 	bne.w	8007e94 <USB_EPStartXfer+0x1244>
 8007d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	461a      	mov	r2, r3
 8007d7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d7e:	4413      	add	r3, r2
 8007d80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	011a      	lsls	r2, r3, #4
 8007d92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d96:	4413      	add	r3, r2
 8007d98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007da0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007da4:	881b      	ldrh	r3, [r3, #0]
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007db2:	801a      	strh	r2, [r3, #0]
 8007db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	2b3e      	cmp	r3, #62	; 0x3e
 8007dc2:	d92b      	bls.n	8007e1c <USB_EPStartXfer+0x11cc>
 8007dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	095b      	lsrs	r3, r3, #5
 8007dd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	f003 031f 	and.w	r3, r3, #31
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d104      	bne.n	8007df4 <USB_EPStartXfer+0x11a4>
 8007dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dee:	3b01      	subs	r3, #1
 8007df0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007df4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007df8:	881b      	ldrh	r3, [r3, #0]
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	029b      	lsls	r3, r3, #10
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	4313      	orrs	r3, r2
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e18:	801a      	strh	r2, [r3, #0]
 8007e1a:	e069      	b.n	8007ef0 <USB_EPStartXfer+0x12a0>
 8007e1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10c      	bne.n	8007e46 <USB_EPStartXfer+0x11f6>
 8007e2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e30:	881b      	ldrh	r3, [r3, #0]
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e42:	801a      	strh	r2, [r3, #0]
 8007e44:	e054      	b.n	8007ef0 <USB_EPStartXfer+0x12a0>
 8007e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	085b      	lsrs	r3, r3, #1
 8007e54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	f003 0301 	and.w	r3, r3, #1
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d004      	beq.n	8007e76 <USB_EPStartXfer+0x1226>
 8007e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e70:	3301      	adds	r3, #1
 8007e72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e7a:	881b      	ldrh	r3, [r3, #0]
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	029b      	lsls	r3, r3, #10
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e90:	801a      	strh	r2, [r3, #0]
 8007e92:	e02d      	b.n	8007ef0 <USB_EPStartXfer+0x12a0>
 8007e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	785b      	ldrb	r3, [r3, #1]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d125      	bne.n	8007ef0 <USB_EPStartXfer+0x12a0>
 8007ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ea8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007eba:	4413      	add	r3, r2
 8007ebc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	011a      	lsls	r2, r3, #4
 8007ece:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ed8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007eee:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ef4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	69db      	ldr	r3, [r3, #28]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f000 8218 	beq.w	8008332 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	881b      	ldrh	r3, [r3, #0]
 8007f1e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007f22:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d005      	beq.n	8007f3a <USB_EPStartXfer+0x12ea>
 8007f2e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d10d      	bne.n	8007f56 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007f3a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	f040 81f5 	bne.w	8008332 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007f48:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f040 81ee 	bne.w	8008332 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	881b      	ldrh	r3, [r3, #0]
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f7c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	441a      	add	r2, r3
 8007f9a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007faa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	8013      	strh	r3, [r2, #0]
 8007fb2:	e1be      	b.n	8008332 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	78db      	ldrb	r3, [r3, #3]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	f040 81b4 	bne.w	800832e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	699a      	ldr	r2, [r3, #24]
 8007fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d917      	bls.n	8008012 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	699a      	ldr	r2, [r3, #24]
 8007ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008002:	1ad2      	subs	r2, r2, r3
 8008004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	619a      	str	r2, [r3, #24]
 8008010:	e00e      	b.n	8008030 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008016:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2200      	movs	r2, #0
 800802e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	785b      	ldrb	r3, [r3, #1]
 800803c:	2b00      	cmp	r3, #0
 800803e:	f040 8085 	bne.w	800814c <USB_EPStartXfer+0x14fc>
 8008042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008046:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008054:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800805e:	b29b      	uxth	r3, r3
 8008060:	461a      	mov	r2, r3
 8008062:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008066:	4413      	add	r3, r2
 8008068:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800806c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008070:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	011a      	lsls	r2, r3, #4
 800807a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800807e:	4413      	add	r3, r2
 8008080:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008084:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008088:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800808c:	881b      	ldrh	r3, [r3, #0]
 800808e:	b29b      	uxth	r3, r3
 8008090:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008094:	b29a      	uxth	r2, r3
 8008096:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800809a:	801a      	strh	r2, [r3, #0]
 800809c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080a0:	2b3e      	cmp	r3, #62	; 0x3e
 80080a2:	d923      	bls.n	80080ec <USB_EPStartXfer+0x149c>
 80080a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080a8:	095b      	lsrs	r3, r3, #5
 80080aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80080ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080b2:	f003 031f 	and.w	r3, r3, #31
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d104      	bne.n	80080c4 <USB_EPStartXfer+0x1474>
 80080ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080be:	3b01      	subs	r3, #1
 80080c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80080c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080c8:	881b      	ldrh	r3, [r3, #0]
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	029b      	lsls	r3, r3, #10
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	4313      	orrs	r3, r2
 80080d8:	b29b      	uxth	r3, r3
 80080da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080e8:	801a      	strh	r2, [r3, #0]
 80080ea:	e060      	b.n	80081ae <USB_EPStartXfer+0x155e>
 80080ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10c      	bne.n	800810e <USB_EPStartXfer+0x14be>
 80080f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080f8:	881b      	ldrh	r3, [r3, #0]
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008104:	b29a      	uxth	r2, r3
 8008106:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800810a:	801a      	strh	r2, [r3, #0]
 800810c:	e04f      	b.n	80081ae <USB_EPStartXfer+0x155e>
 800810e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008112:	085b      	lsrs	r3, r3, #1
 8008114:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800811c:	f003 0301 	and.w	r3, r3, #1
 8008120:	2b00      	cmp	r3, #0
 8008122:	d004      	beq.n	800812e <USB_EPStartXfer+0x14de>
 8008124:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008128:	3301      	adds	r3, #1
 800812a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800812e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008132:	881b      	ldrh	r3, [r3, #0]
 8008134:	b29a      	uxth	r2, r3
 8008136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800813a:	b29b      	uxth	r3, r3
 800813c:	029b      	lsls	r3, r3, #10
 800813e:	b29b      	uxth	r3, r3
 8008140:	4313      	orrs	r3, r2
 8008142:	b29a      	uxth	r2, r3
 8008144:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008148:	801a      	strh	r2, [r3, #0]
 800814a:	e030      	b.n	80081ae <USB_EPStartXfer+0x155e>
 800814c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	785b      	ldrb	r3, [r3, #1]
 8008158:	2b01      	cmp	r3, #1
 800815a:	d128      	bne.n	80081ae <USB_EPStartXfer+0x155e>
 800815c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008160:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800816a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800816e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008178:	b29b      	uxth	r3, r3
 800817a:	461a      	mov	r2, r3
 800817c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008180:	4413      	add	r3, r2
 8008182:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800818a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	011a      	lsls	r2, r3, #4
 8008194:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008198:	4413      	add	r3, r2
 800819a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800819e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80081ac:	801a      	strh	r2, [r3, #0]
 80081ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80081bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	785b      	ldrb	r3, [r3, #1]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f040 8085 	bne.w	80082d8 <USB_EPStartXfer+0x1688>
 80081ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80081dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	461a      	mov	r2, r3
 80081ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80081f2:	4413      	add	r3, r2
 80081f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80081f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	011a      	lsls	r2, r3, #4
 8008206:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800820a:	4413      	add	r3, r2
 800820c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008210:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008214:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008218:	881b      	ldrh	r3, [r3, #0]
 800821a:	b29b      	uxth	r3, r3
 800821c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008220:	b29a      	uxth	r2, r3
 8008222:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008226:	801a      	strh	r2, [r3, #0]
 8008228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800822c:	2b3e      	cmp	r3, #62	; 0x3e
 800822e:	d923      	bls.n	8008278 <USB_EPStartXfer+0x1628>
 8008230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008234:	095b      	lsrs	r3, r3, #5
 8008236:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800823a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800823e:	f003 031f 	and.w	r3, r3, #31
 8008242:	2b00      	cmp	r3, #0
 8008244:	d104      	bne.n	8008250 <USB_EPStartXfer+0x1600>
 8008246:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800824a:	3b01      	subs	r3, #1
 800824c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008250:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008254:	881b      	ldrh	r3, [r3, #0]
 8008256:	b29a      	uxth	r2, r3
 8008258:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800825c:	b29b      	uxth	r3, r3
 800825e:	029b      	lsls	r3, r3, #10
 8008260:	b29b      	uxth	r3, r3
 8008262:	4313      	orrs	r3, r2
 8008264:	b29b      	uxth	r3, r3
 8008266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800826a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800826e:	b29a      	uxth	r2, r3
 8008270:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008274:	801a      	strh	r2, [r3, #0]
 8008276:	e05c      	b.n	8008332 <USB_EPStartXfer+0x16e2>
 8008278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10c      	bne.n	800829a <USB_EPStartXfer+0x164a>
 8008280:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008284:	881b      	ldrh	r3, [r3, #0]
 8008286:	b29b      	uxth	r3, r3
 8008288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800828c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008290:	b29a      	uxth	r2, r3
 8008292:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008296:	801a      	strh	r2, [r3, #0]
 8008298:	e04b      	b.n	8008332 <USB_EPStartXfer+0x16e2>
 800829a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800829e:	085b      	lsrs	r3, r3, #1
 80082a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80082a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d004      	beq.n	80082ba <USB_EPStartXfer+0x166a>
 80082b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082b4:	3301      	adds	r3, #1
 80082b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80082ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082be:	881b      	ldrh	r3, [r3, #0]
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	029b      	lsls	r3, r3, #10
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	4313      	orrs	r3, r2
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082d4:	801a      	strh	r2, [r3, #0]
 80082d6:	e02c      	b.n	8008332 <USB_EPStartXfer+0x16e2>
 80082d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	785b      	ldrb	r3, [r3, #1]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d124      	bne.n	8008332 <USB_EPStartXfer+0x16e2>
 80082e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	461a      	mov	r2, r3
 80082fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80082fe:	4413      	add	r3, r2
 8008300:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	011a      	lsls	r2, r3, #4
 8008312:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008316:	4413      	add	r3, r2
 8008318:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800831c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008324:	b29a      	uxth	r2, r3
 8008326:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800832a:	801a      	strh	r2, [r3, #0]
 800832c:	e001      	b.n	8008332 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e03a      	b.n	80083a8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008336:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4413      	add	r3, r2
 800834c:	881b      	ldrh	r3, [r3, #0]
 800834e:	b29b      	uxth	r3, r3
 8008350:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008358:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800835c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008360:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008364:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008368:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800836c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008370:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008378:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008382:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	441a      	add	r2, r3
 800838e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008392:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008396:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800839a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800839e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083b2:	b480      	push	{r7}
 80083b4:	b085      	sub	sp, #20
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
 80083ba:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	785b      	ldrb	r3, [r3, #1]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d020      	beq.n	8008406 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	4413      	add	r3, r2
 80083ce:	881b      	ldrh	r3, [r3, #0]
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083da:	81bb      	strh	r3, [r7, #12]
 80083dc:	89bb      	ldrh	r3, [r7, #12]
 80083de:	f083 0310 	eor.w	r3, r3, #16
 80083e2:	81bb      	strh	r3, [r7, #12]
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	441a      	add	r2, r3
 80083ee:	89bb      	ldrh	r3, [r7, #12]
 80083f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008400:	b29b      	uxth	r3, r3
 8008402:	8013      	strh	r3, [r2, #0]
 8008404:	e01f      	b.n	8008446 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4413      	add	r3, r2
 8008410:	881b      	ldrh	r3, [r3, #0]
 8008412:	b29b      	uxth	r3, r3
 8008414:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800841c:	81fb      	strh	r3, [r7, #14]
 800841e:	89fb      	ldrh	r3, [r7, #14]
 8008420:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008424:	81fb      	strh	r3, [r7, #14]
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	441a      	add	r2, r3
 8008430:	89fb      	ldrh	r3, [r7, #14]
 8008432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800843a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800843e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008442:	b29b      	uxth	r3, r3
 8008444:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3714      	adds	r7, #20
 800844c:	46bd      	mov	sp, r7
 800844e:	bc80      	pop	{r7}
 8008450:	4770      	bx	lr

08008452 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008452:	b480      	push	{r7}
 8008454:	b087      	sub	sp, #28
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	7b1b      	ldrb	r3, [r3, #12]
 8008460:	2b00      	cmp	r3, #0
 8008462:	f040 809d 	bne.w	80085a0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	785b      	ldrb	r3, [r3, #1]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d04c      	beq.n	8008508 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	4413      	add	r3, r2
 8008478:	881b      	ldrh	r3, [r3, #0]
 800847a:	823b      	strh	r3, [r7, #16]
 800847c:	8a3b      	ldrh	r3, [r7, #16]
 800847e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008482:	2b00      	cmp	r3, #0
 8008484:	d01b      	beq.n	80084be <USB_EPClearStall+0x6c>
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	4413      	add	r3, r2
 8008490:	881b      	ldrh	r3, [r3, #0]
 8008492:	b29b      	uxth	r3, r3
 8008494:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800849c:	81fb      	strh	r3, [r7, #14]
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	441a      	add	r2, r3
 80084a8:	89fb      	ldrh	r3, [r7, #14]
 80084aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	78db      	ldrb	r3, [r3, #3]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d06c      	beq.n	80085a0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	4413      	add	r3, r2
 80084d0:	881b      	ldrh	r3, [r3, #0]
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084dc:	81bb      	strh	r3, [r7, #12]
 80084de:	89bb      	ldrh	r3, [r7, #12]
 80084e0:	f083 0320 	eor.w	r3, r3, #32
 80084e4:	81bb      	strh	r3, [r7, #12]
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	441a      	add	r2, r3
 80084f0:	89bb      	ldrh	r3, [r7, #12]
 80084f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008502:	b29b      	uxth	r3, r3
 8008504:	8013      	strh	r3, [r2, #0]
 8008506:	e04b      	b.n	80085a0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	4413      	add	r3, r2
 8008512:	881b      	ldrh	r3, [r3, #0]
 8008514:	82fb      	strh	r3, [r7, #22]
 8008516:	8afb      	ldrh	r3, [r7, #22]
 8008518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800851c:	2b00      	cmp	r3, #0
 800851e:	d01b      	beq.n	8008558 <USB_EPClearStall+0x106>
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4413      	add	r3, r2
 800852a:	881b      	ldrh	r3, [r3, #0]
 800852c:	b29b      	uxth	r3, r3
 800852e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008536:	82bb      	strh	r3, [r7, #20]
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	441a      	add	r2, r3
 8008542:	8abb      	ldrh	r3, [r7, #20]
 8008544:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008548:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800854c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008554:	b29b      	uxth	r3, r3
 8008556:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	4413      	add	r3, r2
 8008562:	881b      	ldrh	r3, [r3, #0]
 8008564:	b29b      	uxth	r3, r3
 8008566:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800856a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800856e:	827b      	strh	r3, [r7, #18]
 8008570:	8a7b      	ldrh	r3, [r7, #18]
 8008572:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008576:	827b      	strh	r3, [r7, #18]
 8008578:	8a7b      	ldrh	r3, [r7, #18]
 800857a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800857e:	827b      	strh	r3, [r7, #18]
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	441a      	add	r2, r3
 800858a:	8a7b      	ldrh	r3, [r7, #18]
 800858c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800859c:	b29b      	uxth	r3, r3
 800859e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	371c      	adds	r7, #28
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bc80      	pop	{r7}
 80085aa:	4770      	bx	lr

080085ac <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	460b      	mov	r3, r1
 80085b6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80085b8:	78fb      	ldrb	r3, [r7, #3]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d103      	bne.n	80085c6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2280      	movs	r2, #128	; 0x80
 80085c2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	370c      	adds	r7, #12
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bc80      	pop	{r7}
 80085d0:	4770      	bx	lr

080085d2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80085d2:	b480      	push	{r7}
 80085d4:	b083      	sub	sp, #12
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bc80      	pop	{r7}
 80085e4:	4770      	bx	lr

080085e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80085e6:	b480      	push	{r7}
 80085e8:	b083      	sub	sp, #12
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bc80      	pop	{r7}
 80085f8:	4770      	bx	lr

080085fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80085fa:	b480      	push	{r7}
 80085fc:	b085      	sub	sp, #20
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008608:	b29b      	uxth	r3, r3
 800860a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800860c:	68fb      	ldr	r3, [r7, #12]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3714      	adds	r7, #20
 8008612:	46bd      	mov	sp, r7
 8008614:	bc80      	pop	{r7}
 8008616:	4770      	bx	lr

08008618 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	bc80      	pop	{r7}
 800862c:	4770      	bx	lr

0800862e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800862e:	b480      	push	{r7}
 8008630:	b08b      	sub	sp, #44	; 0x2c
 8008632:	af00      	add	r7, sp, #0
 8008634:	60f8      	str	r0, [r7, #12]
 8008636:	60b9      	str	r1, [r7, #8]
 8008638:	4611      	mov	r1, r2
 800863a:	461a      	mov	r2, r3
 800863c:	460b      	mov	r3, r1
 800863e:	80fb      	strh	r3, [r7, #6]
 8008640:	4613      	mov	r3, r2
 8008642:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008644:	88bb      	ldrh	r3, [r7, #4]
 8008646:	3301      	adds	r3, #1
 8008648:	085b      	lsrs	r3, r3, #1
 800864a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008654:	88fb      	ldrh	r3, [r7, #6]
 8008656:	005a      	lsls	r2, r3, #1
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	4413      	add	r3, r2
 800865c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008660:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	627b      	str	r3, [r7, #36]	; 0x24
 8008666:	e01e      	b.n	80086a6 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	3301      	adds	r3, #1
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	021b      	lsls	r3, r3, #8
 8008676:	b21a      	sxth	r2, r3
 8008678:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800867c:	4313      	orrs	r3, r2
 800867e:	b21b      	sxth	r3, r3
 8008680:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008682:	6a3b      	ldr	r3, [r7, #32]
 8008684:	8a7a      	ldrh	r2, [r7, #18]
 8008686:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008688:	6a3b      	ldr	r3, [r7, #32]
 800868a:	3302      	adds	r3, #2
 800868c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800868e:	6a3b      	ldr	r3, [r7, #32]
 8008690:	3302      	adds	r3, #2
 8008692:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	3301      	adds	r3, #1
 8008698:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	3301      	adds	r3, #1
 800869e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80086a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a2:	3b01      	subs	r3, #1
 80086a4:	627b      	str	r3, [r7, #36]	; 0x24
 80086a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1dd      	bne.n	8008668 <USB_WritePMA+0x3a>
  }
}
 80086ac:	bf00      	nop
 80086ae:	bf00      	nop
 80086b0:	372c      	adds	r7, #44	; 0x2c
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bc80      	pop	{r7}
 80086b6:	4770      	bx	lr

080086b8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b08b      	sub	sp, #44	; 0x2c
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	4611      	mov	r1, r2
 80086c4:	461a      	mov	r2, r3
 80086c6:	460b      	mov	r3, r1
 80086c8:	80fb      	strh	r3, [r7, #6]
 80086ca:	4613      	mov	r3, r2
 80086cc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80086ce:	88bb      	ldrh	r3, [r7, #4]
 80086d0:	085b      	lsrs	r3, r3, #1
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80086de:	88fb      	ldrh	r3, [r7, #6]
 80086e0:	005a      	lsls	r2, r3, #1
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	4413      	add	r3, r2
 80086e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086ea:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	627b      	str	r3, [r7, #36]	; 0x24
 80086f0:	e01b      	b.n	800872a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80086f2:	6a3b      	ldr	r3, [r7, #32]
 80086f4:	881b      	ldrh	r3, [r3, #0]
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80086fa:	6a3b      	ldr	r3, [r7, #32]
 80086fc:	3302      	adds	r3, #2
 80086fe:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	b2da      	uxtb	r2, r3
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	3301      	adds	r3, #1
 800870c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	0a1b      	lsrs	r3, r3, #8
 8008712:	b2da      	uxtb	r2, r3
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	3301      	adds	r3, #1
 800871c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	3302      	adds	r3, #2
 8008722:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008726:	3b01      	subs	r3, #1
 8008728:	627b      	str	r3, [r7, #36]	; 0x24
 800872a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1e0      	bne.n	80086f2 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008730:	88bb      	ldrh	r3, [r7, #4]
 8008732:	f003 0301 	and.w	r3, r3, #1
 8008736:	b29b      	uxth	r3, r3
 8008738:	2b00      	cmp	r3, #0
 800873a:	d007      	beq.n	800874c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800873c:	6a3b      	ldr	r3, [r7, #32]
 800873e:	881b      	ldrh	r3, [r3, #0]
 8008740:	b29b      	uxth	r3, r3
 8008742:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	b2da      	uxtb	r2, r3
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	701a      	strb	r2, [r3, #0]
  }
}
 800874c:	bf00      	nop
 800874e:	372c      	adds	r7, #44	; 0x2c
 8008750:	46bd      	mov	sp, r7
 8008752:	bc80      	pop	{r7}
 8008754:	4770      	bx	lr

08008756 <USBD_HID_Init>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b082      	sub	sp, #8
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
 800875e:	460b      	mov	r3, r1
 8008760:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008762:	2316      	movs	r3, #22
 8008764:	2203      	movs	r2, #3
 8008766:	2181      	movs	r1, #129	; 0x81
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f001 fc84 	bl	800a076 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008774:	2010      	movs	r0, #16
 8008776:	f001 fd93 	bl	800a2a0 <USBD_static_malloc>
 800877a:	4602      	mov	r2, r0
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008788:	2b00      	cmp	r3, #0
 800878a:	d101      	bne.n	8008790 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 800878c:	2302      	movs	r3, #2
 800878e:	e005      	b.n	800879c <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008796:	2200      	movs	r2, #0
 8008798:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	3708      	adds	r7, #8
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <USBD_HID_DeInit>:
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	460b      	mov	r3, r1
 80087ae:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80087b0:	2181      	movs	r1, #129	; 0x81
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f001 fc85 	bl	800a0c2 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d009      	beq.n	80087dc <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ce:	4618      	mov	r0, r3
 80087d0:	f001 fd72 	bl	800a2b8 <USBD_static_free>
    pdev->pClassData = NULL;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
	...

080087e8 <USBD_HID_Setup>:
 * @param  req: usb requests
 * @retval status
 */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b088      	sub	sp, #32
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087f8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80087fa:	2300      	movs	r3, #0
 80087fc:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 80087fe:	2300      	movs	r3, #0
 8008800:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008802:	2300      	movs	r3, #0
 8008804:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8008806:	2300      	movs	r3, #0
 8008808:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008812:	2b00      	cmp	r3, #0
 8008814:	d045      	beq.n	80088a2 <USBD_HID_Setup+0xba>
 8008816:	2b20      	cmp	r3, #32
 8008818:	f040 80d3 	bne.w	80089c2 <USBD_HID_Setup+0x1da>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	785b      	ldrb	r3, [r3, #1]
 8008820:	3b02      	subs	r3, #2
 8008822:	2b09      	cmp	r3, #9
 8008824:	d835      	bhi.n	8008892 <USBD_HID_Setup+0xaa>
 8008826:	a201      	add	r2, pc, #4	; (adr r2, 800882c <USBD_HID_Setup+0x44>)
 8008828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882c:	08008883 	.word	0x08008883
 8008830:	08008863 	.word	0x08008863
 8008834:	08008893 	.word	0x08008893
 8008838:	08008893 	.word	0x08008893
 800883c:	08008893 	.word	0x08008893
 8008840:	08008893 	.word	0x08008893
 8008844:	08008893 	.word	0x08008893
 8008848:	08008893 	.word	0x08008893
 800884c:	08008871 	.word	0x08008871
 8008850:	08008855 	.word	0x08008855
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	885b      	ldrh	r3, [r3, #2]
 8008858:	b2db      	uxtb	r3, r3
 800885a:	461a      	mov	r2, r3
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	601a      	str	r2, [r3, #0]
      break;
 8008860:	e01e      	b.n	80088a0 <USBD_HID_Setup+0xb8>

    case HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	2201      	movs	r2, #1
 8008866:	4619      	mov	r1, r3
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f001 f944 	bl	8009af6 <USBD_CtlSendData>
      break;
 800886e:	e017      	b.n	80088a0 <USBD_HID_Setup+0xb8>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	885b      	ldrh	r3, [r3, #2]
 8008874:	0a1b      	lsrs	r3, r3, #8
 8008876:	b29b      	uxth	r3, r3
 8008878:	b2db      	uxtb	r3, r3
 800887a:	461a      	mov	r2, r3
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	605a      	str	r2, [r3, #4]
      break;
 8008880:	e00e      	b.n	80088a0 <USBD_HID_Setup+0xb8>

    case HID_REQ_GET_IDLE:
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	3304      	adds	r3, #4
 8008886:	2201      	movs	r2, #1
 8008888:	4619      	mov	r1, r3
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f001 f933 	bl	8009af6 <USBD_CtlSendData>
      break;
 8008890:	e006      	b.n	80088a0 <USBD_HID_Setup+0xb8>

    default:
      USBD_CtlError(pdev, req);
 8008892:	6839      	ldr	r1, [r7, #0]
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f001 f8c4 	bl	8009a22 <USBD_CtlError>
      ret = USBD_FAIL;
 800889a:	2302      	movs	r3, #2
 800889c:	75fb      	strb	r3, [r7, #23]
      break;
 800889e:	bf00      	nop
    }
    break;
 80088a0:	e096      	b.n	80089d0 <USBD_HID_Setup+0x1e8>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	785b      	ldrb	r3, [r3, #1]
 80088a6:	2b0b      	cmp	r3, #11
 80088a8:	f200 8083 	bhi.w	80089b2 <USBD_HID_Setup+0x1ca>
 80088ac:	a201      	add	r2, pc, #4	; (adr r2, 80088b4 <USBD_HID_Setup+0xcc>)
 80088ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b2:	bf00      	nop
 80088b4:	080088e5 	.word	0x080088e5
 80088b8:	080089b3 	.word	0x080089b3
 80088bc:	080089b3 	.word	0x080089b3
 80088c0:	080089b3 	.word	0x080089b3
 80088c4:	080089b3 	.word	0x080089b3
 80088c8:	080089b3 	.word	0x080089b3
 80088cc:	0800890d 	.word	0x0800890d
 80088d0:	080089b3 	.word	0x080089b3
 80088d4:	080089b3 	.word	0x080089b3
 80088d8:	080089b3 	.word	0x080089b3
 80088dc:	08008965 	.word	0x08008965
 80088e0:	0800898d 	.word	0x0800898d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ea:	2b03      	cmp	r3, #3
 80088ec:	d107      	bne.n	80088fe <USBD_HID_Setup+0x116>
      {
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80088ee:	f107 030e 	add.w	r3, r7, #14
 80088f2:	2202      	movs	r2, #2
 80088f4:	4619      	mov	r1, r3
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f001 f8fd 	bl	8009af6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80088fc:	e060      	b.n	80089c0 <USBD_HID_Setup+0x1d8>
        USBD_CtlError(pdev, req);
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f001 f88e 	bl	8009a22 <USBD_CtlError>
        ret = USBD_FAIL;
 8008906:	2302      	movs	r3, #2
 8008908:	75fb      	strb	r3, [r7, #23]
      break;
 800890a:	e059      	b.n	80089c0 <USBD_HID_Setup+0x1d8>

    case USB_REQ_GET_DESCRIPTOR:
      if (req->wValue >> 8 == HID_REPORT_DESC)
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	885b      	ldrh	r3, [r3, #2]
 8008910:	0a1b      	lsrs	r3, r3, #8
 8008912:	b29b      	uxth	r3, r3
 8008914:	2b22      	cmp	r3, #34	; 0x22
 8008916:	d108      	bne.n	800892a <USBD_HID_Setup+0x142>
      {
        len = MIN(HID_KEYBOARD_REPORT_DESC_SIZE, req->wLength);
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	88db      	ldrh	r3, [r3, #6]
 800891c:	2b49      	cmp	r3, #73	; 0x49
 800891e:	bf28      	it	cs
 8008920:	2349      	movcs	r3, #73	; 0x49
 8008922:	83fb      	strh	r3, [r7, #30]
        pbuf = HID_KEYBOARD_ReportDesc;
 8008924:	4b2d      	ldr	r3, [pc, #180]	; (80089dc <USBD_HID_Setup+0x1f4>)
 8008926:	61bb      	str	r3, [r7, #24]
 8008928:	e015      	b.n	8008956 <USBD_HID_Setup+0x16e>
      }
      else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	885b      	ldrh	r3, [r3, #2]
 800892e:	0a1b      	lsrs	r3, r3, #8
 8008930:	b29b      	uxth	r3, r3
 8008932:	2b21      	cmp	r3, #33	; 0x21
 8008934:	d108      	bne.n	8008948 <USBD_HID_Setup+0x160>
      {
        pbuf = USBD_HID_Desc;
 8008936:	4b2a      	ldr	r3, [pc, #168]	; (80089e0 <USBD_HID_Setup+0x1f8>)
 8008938:	61bb      	str	r3, [r7, #24]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	88db      	ldrh	r3, [r3, #6]
 800893e:	2b09      	cmp	r3, #9
 8008940:	bf28      	it	cs
 8008942:	2309      	movcs	r3, #9
 8008944:	83fb      	strh	r3, [r7, #30]
 8008946:	e006      	b.n	8008956 <USBD_HID_Setup+0x16e>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008948:	6839      	ldr	r1, [r7, #0]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f001 f869 	bl	8009a22 <USBD_CtlError>
        ret = USBD_FAIL;
 8008950:	2302      	movs	r3, #2
 8008952:	75fb      	strb	r3, [r7, #23]
        break;
 8008954:	e034      	b.n	80089c0 <USBD_HID_Setup+0x1d8>
      }
      USBD_CtlSendData(pdev, pbuf, len);
 8008956:	8bfb      	ldrh	r3, [r7, #30]
 8008958:	461a      	mov	r2, r3
 800895a:	69b9      	ldr	r1, [r7, #24]
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f001 f8ca 	bl	8009af6 <USBD_CtlSendData>
      break;
 8008962:	e02d      	b.n	80089c0 <USBD_HID_Setup+0x1d8>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800896a:	2b03      	cmp	r3, #3
 800896c:	d107      	bne.n	800897e <USBD_HID_Setup+0x196>
      {
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	3308      	adds	r3, #8
 8008972:	2201      	movs	r2, #1
 8008974:	4619      	mov	r1, r3
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f001 f8bd 	bl	8009af6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800897c:	e020      	b.n	80089c0 <USBD_HID_Setup+0x1d8>
        USBD_CtlError(pdev, req);
 800897e:	6839      	ldr	r1, [r7, #0]
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f001 f84e 	bl	8009a22 <USBD_CtlError>
        ret = USBD_FAIL;
 8008986:	2302      	movs	r3, #2
 8008988:	75fb      	strb	r3, [r7, #23]
      break;
 800898a:	e019      	b.n	80089c0 <USBD_HID_Setup+0x1d8>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008992:	2b03      	cmp	r3, #3
 8008994:	d106      	bne.n	80089a4 <USBD_HID_Setup+0x1bc>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	885b      	ldrh	r3, [r3, #2]
 800899a:	b2db      	uxtb	r3, r3
 800899c:	461a      	mov	r2, r3
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80089a2:	e00d      	b.n	80089c0 <USBD_HID_Setup+0x1d8>
        USBD_CtlError(pdev, req);
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f001 f83b 	bl	8009a22 <USBD_CtlError>
        ret = USBD_FAIL;
 80089ac:	2302      	movs	r3, #2
 80089ae:	75fb      	strb	r3, [r7, #23]
      break;
 80089b0:	e006      	b.n	80089c0 <USBD_HID_Setup+0x1d8>

    default:
      USBD_CtlError(pdev, req);
 80089b2:	6839      	ldr	r1, [r7, #0]
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f001 f834 	bl	8009a22 <USBD_CtlError>
      ret = USBD_FAIL;
 80089ba:	2302      	movs	r3, #2
 80089bc:	75fb      	strb	r3, [r7, #23]
      break;
 80089be:	bf00      	nop
    }
    break;
 80089c0:	e006      	b.n	80089d0 <USBD_HID_Setup+0x1e8>

  default:
    USBD_CtlError(pdev, req);
 80089c2:	6839      	ldr	r1, [r7, #0]
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f001 f82c 	bl	8009a22 <USBD_CtlError>
    ret = USBD_FAIL;
 80089ca:	2302      	movs	r3, #2
 80089cc:	75fb      	strb	r3, [r7, #23]
    break;
 80089ce:	bf00      	nop
  }

  return ret;
 80089d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3720      	adds	r7, #32
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	2000017c 	.word	0x2000017c
 80089e0:	20000164 	.word	0x20000164

080089e4 <USBD_HID_SendReport>:
 * @retval status
 */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b086      	sub	sp, #24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	4613      	mov	r3, r2
 80089f0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089f8:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a00:	2b03      	cmp	r3, #3
 8008a02:	d10c      	bne.n	8008a1e <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	7b1b      	ldrb	r3, [r3, #12]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d108      	bne.n	8008a1e <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8008a12:	88fb      	ldrh	r3, [r7, #6]
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	2181      	movs	r1, #129	; 0x81
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f001 fbfa 	bl	800a212 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3718      	adds	r7, #24
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <USBD_HID_GetFSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2229      	movs	r2, #41	; 0x29
 8008a34:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8008a36:	4b03      	ldr	r3, [pc, #12]	; (8008a44 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bc80      	pop	{r7}
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	200000e0 	.word	0x200000e0

08008a48 <USBD_HID_GetHSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2229      	movs	r2, #41	; 0x29
 8008a54:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8008a56:	4b03      	ldr	r3, [pc, #12]	; (8008a64 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bc80      	pop	{r7}
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	2000010c 	.word	0x2000010c

08008a68 <USBD_HID_GetOtherSpeedCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2229      	movs	r2, #41	; 0x29
 8008a74:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8008a76:	4b03      	ldr	r3, [pc, #12]	; (8008a84 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bc80      	pop	{r7}
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	20000138 	.word	0x20000138

08008a88 <USBD_HID_DataIn>:
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                               uint8_t epnum)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	460b      	mov	r3, r1
 8008a92:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bc80      	pop	{r7}
 8008aa8:	4770      	bx	lr
	...

08008aac <USBD_HID_GetDeviceQualifierDesc>:
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	220a      	movs	r2, #10
 8008ab8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8008aba:	4b03      	ldr	r3, [pc, #12]	; (8008ac8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bc80      	pop	{r7}
 8008ac4:	4770      	bx	lr
 8008ac6:	bf00      	nop
 8008ac8:	20000170 	.word	0x20000170

08008acc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d101      	bne.n	8008ae4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008ae0:	2302      	movs	r3, #2
 8008ae2:	e01a      	b.n	8008b1a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d003      	beq.n	8008af6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2200      	movs	r2, #0
 8008af2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d003      	beq.n	8008b04 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	79fa      	ldrb	r2, [r7, #7]
 8008b10:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008b12:	68f8      	ldr	r0, [r7, #12]
 8008b14:	f001 fa4c 	bl	8009fb0 <USBD_LL_Init>

  return USBD_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008b22:	b480      	push	{r7}
 8008b24:	b085      	sub	sp, #20
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
 8008b2a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d006      	beq.n	8008b44 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	683a      	ldr	r2, [r7, #0]
 8008b3a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	73fb      	strb	r3, [r7, #15]
 8008b42:	e001      	b.n	8008b48 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008b44:	2302      	movs	r3, #2
 8008b46:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3714      	adds	r7, #20
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bc80      	pop	{r7}
 8008b52:	4770      	bx	lr

08008b54 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f001 fa6f 	bl	800a040 <USBD_LL_Start>

  return USBD_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	370c      	adds	r7, #12
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bc80      	pop	{r7}
 8008b7e:	4770      	bx	lr

08008b80 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00c      	beq.n	8008bb4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	78fa      	ldrb	r2, [r7, #3]
 8008ba4:	4611      	mov	r1, r2
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	4798      	blx	r3
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d101      	bne.n	8008bb4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b082      	sub	sp, #8
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	78fa      	ldrb	r2, [r7, #3]
 8008bd4:	4611      	mov	r1, r2
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	4798      	blx	r3

  return USBD_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3708      	adds	r7, #8
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008bf4:	6839      	ldr	r1, [r7, #0]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 fed7 	bl	80099aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008c18:	f003 031f 	and.w	r3, r3, #31
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d016      	beq.n	8008c4e <USBD_LL_SetupStage+0x6a>
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	d81c      	bhi.n	8008c5e <USBD_LL_SetupStage+0x7a>
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d002      	beq.n	8008c2e <USBD_LL_SetupStage+0x4a>
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d008      	beq.n	8008c3e <USBD_LL_SetupStage+0x5a>
 8008c2c:	e017      	b.n	8008c5e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008c34:	4619      	mov	r1, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f9ca 	bl	8008fd0 <USBD_StdDevReq>
      break;
 8008c3c:	e01a      	b.n	8008c74 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008c44:	4619      	mov	r1, r3
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fa2c 	bl	80090a4 <USBD_StdItfReq>
      break;
 8008c4c:	e012      	b.n	8008c74 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008c54:	4619      	mov	r1, r3
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 fa6c 	bl	8009134 <USBD_StdEPReq>
      break;
 8008c5c:	e00a      	b.n	8008c74 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008c64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f001 fa47 	bl	800a100 <USBD_LL_StallEP>
      break;
 8008c72:	bf00      	nop
  }

  return USBD_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b086      	sub	sp, #24
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	60f8      	str	r0, [r7, #12]
 8008c86:	460b      	mov	r3, r1
 8008c88:	607a      	str	r2, [r7, #4]
 8008c8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008c8c:	7afb      	ldrb	r3, [r7, #11]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d14b      	bne.n	8008d2a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008c98:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ca0:	2b03      	cmp	r3, #3
 8008ca2:	d134      	bne.n	8008d0e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	68da      	ldr	r2, [r3, #12]
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	691b      	ldr	r3, [r3, #16]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d919      	bls.n	8008ce4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	68da      	ldr	r2, [r3, #12]
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	1ad2      	subs	r2, r2, r3
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	68da      	ldr	r2, [r3, #12]
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d203      	bcs.n	8008cd2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	e002      	b.n	8008cd8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	461a      	mov	r2, r3
 8008cda:	6879      	ldr	r1, [r7, #4]
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	f000 ff38 	bl	8009b52 <USBD_CtlContinueRx>
 8008ce2:	e038      	b.n	8008d56 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00a      	beq.n	8008d06 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008cf6:	2b03      	cmp	r3, #3
 8008cf8:	d105      	bne.n	8008d06 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008d06:	68f8      	ldr	r0, [r7, #12]
 8008d08:	f000 ff35 	bl	8009b76 <USBD_CtlSendStatus>
 8008d0c:	e023      	b.n	8008d56 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d14:	2b05      	cmp	r3, #5
 8008d16:	d11e      	bne.n	8008d56 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008d20:	2100      	movs	r1, #0
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f001 f9ec 	bl	800a100 <USBD_LL_StallEP>
 8008d28:	e015      	b.n	8008d56 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d30:	699b      	ldr	r3, [r3, #24]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00d      	beq.n	8008d52 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008d3c:	2b03      	cmp	r3, #3
 8008d3e:	d108      	bne.n	8008d52 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	7afa      	ldrb	r2, [r7, #11]
 8008d4a:	4611      	mov	r1, r2
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	4798      	blx	r3
 8008d50:	e001      	b.n	8008d56 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008d52:	2302      	movs	r3, #2
 8008d54:	e000      	b.n	8008d58 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3718      	adds	r7, #24
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b086      	sub	sp, #24
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	460b      	mov	r3, r1
 8008d6a:	607a      	str	r2, [r7, #4]
 8008d6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008d6e:	7afb      	ldrb	r3, [r7, #11]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d17f      	bne.n	8008e74 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	3314      	adds	r3, #20
 8008d78:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	d15c      	bne.n	8008e3e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	68da      	ldr	r2, [r3, #12]
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	691b      	ldr	r3, [r3, #16]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d915      	bls.n	8008dbc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	68da      	ldr	r2, [r3, #12]
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	1ad2      	subs	r2, r2, r3
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	461a      	mov	r2, r3
 8008da6:	6879      	ldr	r1, [r7, #4]
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f000 fec0 	bl	8009b2e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008dae:	2300      	movs	r3, #0
 8008db0:	2200      	movs	r2, #0
 8008db2:	2100      	movs	r1, #0
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f001 fa4f 	bl	800a258 <USBD_LL_PrepareReceive>
 8008dba:	e04e      	b.n	8008e5a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	697a      	ldr	r2, [r7, #20]
 8008dc2:	6912      	ldr	r2, [r2, #16]
 8008dc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008dc8:	fb01 f202 	mul.w	r2, r1, r2
 8008dcc:	1a9b      	subs	r3, r3, r2
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d11c      	bne.n	8008e0c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	689a      	ldr	r2, [r3, #8]
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d316      	bcc.n	8008e0c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	689a      	ldr	r2, [r3, #8]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d20f      	bcs.n	8008e0c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008dec:	2200      	movs	r2, #0
 8008dee:	2100      	movs	r1, #0
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f000 fe9c 	bl	8009b2e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008dfe:	2300      	movs	r3, #0
 8008e00:	2200      	movs	r2, #0
 8008e02:	2100      	movs	r1, #0
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f001 fa27 	bl	800a258 <USBD_LL_PrepareReceive>
 8008e0a:	e026      	b.n	8008e5a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00a      	beq.n	8008e2e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008e1e:	2b03      	cmp	r3, #3
 8008e20:	d105      	bne.n	8008e2e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008e2e:	2180      	movs	r1, #128	; 0x80
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f001 f965 	bl	800a100 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008e36:	68f8      	ldr	r0, [r7, #12]
 8008e38:	f000 feb0 	bl	8009b9c <USBD_CtlReceiveStatus>
 8008e3c:	e00d      	b.n	8008e5a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e44:	2b04      	cmp	r3, #4
 8008e46:	d004      	beq.n	8008e52 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d103      	bne.n	8008e5a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008e52:	2180      	movs	r1, #128	; 0x80
 8008e54:	68f8      	ldr	r0, [r7, #12]
 8008e56:	f001 f953 	bl	800a100 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d11d      	bne.n	8008ea0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f7ff fe81 	bl	8008b6c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008e72:	e015      	b.n	8008ea0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e7a:	695b      	ldr	r3, [r3, #20]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00d      	beq.n	8008e9c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008e86:	2b03      	cmp	r3, #3
 8008e88:	d108      	bne.n	8008e9c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e90:	695b      	ldr	r3, [r3, #20]
 8008e92:	7afa      	ldrb	r2, [r7, #11]
 8008e94:	4611      	mov	r1, r2
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	4798      	blx	r3
 8008e9a:	e001      	b.n	8008ea0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008e9c:	2302      	movs	r3, #2
 8008e9e:	e000      	b.n	8008ea2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3718      	adds	r7, #24
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b082      	sub	sp, #8
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008eb2:	2340      	movs	r3, #64	; 0x40
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f001 f8dc 	bl	800a076 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2240      	movs	r2, #64	; 0x40
 8008eca:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ece:	2340      	movs	r3, #64	; 0x40
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	2180      	movs	r1, #128	; 0x80
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f001 f8ce 	bl	800a076 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2201      	movs	r2, #1
 8008ede:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2240      	movs	r2, #64	; 0x40
 8008ee4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d009      	beq.n	8008f22 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	6852      	ldr	r2, [r2, #4]
 8008f1a:	b2d2      	uxtb	r2, r2
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	4798      	blx	r3
  }

  return USBD_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3708      	adds	r7, #8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	460b      	mov	r3, r1
 8008f36:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	78fa      	ldrb	r2, [r7, #3]
 8008f3c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bc80      	pop	{r7}
 8008f48:	4770      	bx	lr

08008f4a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008f4a:	b480      	push	{r7}
 8008f4c:	b083      	sub	sp, #12
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2204      	movs	r2, #4
 8008f62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bc80      	pop	{r7}
 8008f70:	4770      	bx	lr

08008f72 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008f72:	b480      	push	{r7}
 8008f74:	b083      	sub	sp, #12
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f80:	2b04      	cmp	r3, #4
 8008f82:	d105      	bne.n	8008f90 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	370c      	adds	r7, #12
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bc80      	pop	{r7}
 8008f9a:	4770      	bx	lr

08008f9c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008faa:	2b03      	cmp	r3, #3
 8008fac:	d10b      	bne.n	8008fc6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fb4:	69db      	ldr	r3, [r3, #28]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d005      	beq.n	8008fc6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fc0:	69db      	ldr	r3, [r3, #28]
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3708      	adds	r7, #8
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fe6:	2b40      	cmp	r3, #64	; 0x40
 8008fe8:	d005      	beq.n	8008ff6 <USBD_StdDevReq+0x26>
 8008fea:	2b40      	cmp	r3, #64	; 0x40
 8008fec:	d84f      	bhi.n	800908e <USBD_StdDevReq+0xbe>
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d009      	beq.n	8009006 <USBD_StdDevReq+0x36>
 8008ff2:	2b20      	cmp	r3, #32
 8008ff4:	d14b      	bne.n	800908e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	6839      	ldr	r1, [r7, #0]
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	4798      	blx	r3
      break;
 8009004:	e048      	b.n	8009098 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	785b      	ldrb	r3, [r3, #1]
 800900a:	2b09      	cmp	r3, #9
 800900c:	d839      	bhi.n	8009082 <USBD_StdDevReq+0xb2>
 800900e:	a201      	add	r2, pc, #4	; (adr r2, 8009014 <USBD_StdDevReq+0x44>)
 8009010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009014:	08009065 	.word	0x08009065
 8009018:	08009079 	.word	0x08009079
 800901c:	08009083 	.word	0x08009083
 8009020:	0800906f 	.word	0x0800906f
 8009024:	08009083 	.word	0x08009083
 8009028:	08009047 	.word	0x08009047
 800902c:	0800903d 	.word	0x0800903d
 8009030:	08009083 	.word	0x08009083
 8009034:	0800905b 	.word	0x0800905b
 8009038:	08009051 	.word	0x08009051
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800903c:	6839      	ldr	r1, [r7, #0]
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f9dc 	bl	80093fc <USBD_GetDescriptor>
          break;
 8009044:	e022      	b.n	800908c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009046:	6839      	ldr	r1, [r7, #0]
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 fb3f 	bl	80096cc <USBD_SetAddress>
          break;
 800904e:	e01d      	b.n	800908c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009050:	6839      	ldr	r1, [r7, #0]
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fb7e 	bl	8009754 <USBD_SetConfig>
          break;
 8009058:	e018      	b.n	800908c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800905a:	6839      	ldr	r1, [r7, #0]
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 fc07 	bl	8009870 <USBD_GetConfig>
          break;
 8009062:	e013      	b.n	800908c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009064:	6839      	ldr	r1, [r7, #0]
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fc37 	bl	80098da <USBD_GetStatus>
          break;
 800906c:	e00e      	b.n	800908c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800906e:	6839      	ldr	r1, [r7, #0]
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fc65 	bl	8009940 <USBD_SetFeature>
          break;
 8009076:	e009      	b.n	800908c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009078:	6839      	ldr	r1, [r7, #0]
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 fc74 	bl	8009968 <USBD_ClrFeature>
          break;
 8009080:	e004      	b.n	800908c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009082:	6839      	ldr	r1, [r7, #0]
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 fccc 	bl	8009a22 <USBD_CtlError>
          break;
 800908a:	bf00      	nop
      }
      break;
 800908c:	e004      	b.n	8009098 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800908e:	6839      	ldr	r1, [r7, #0]
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 fcc6 	bl	8009a22 <USBD_CtlError>
      break;
 8009096:	bf00      	nop
  }

  return ret;
 8009098:	7bfb      	ldrb	r3, [r7, #15]
}
 800909a:	4618      	mov	r0, r3
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop

080090a4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090ae:	2300      	movs	r3, #0
 80090b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090ba:	2b40      	cmp	r3, #64	; 0x40
 80090bc:	d005      	beq.n	80090ca <USBD_StdItfReq+0x26>
 80090be:	2b40      	cmp	r3, #64	; 0x40
 80090c0:	d82e      	bhi.n	8009120 <USBD_StdItfReq+0x7c>
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d001      	beq.n	80090ca <USBD_StdItfReq+0x26>
 80090c6:	2b20      	cmp	r3, #32
 80090c8:	d12a      	bne.n	8009120 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090d0:	3b01      	subs	r3, #1
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d81d      	bhi.n	8009112 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	889b      	ldrh	r3, [r3, #4]
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d813      	bhi.n	8009108 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	4798      	blx	r3
 80090ee:	4603      	mov	r3, r0
 80090f0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	88db      	ldrh	r3, [r3, #6]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d110      	bne.n	800911c <USBD_StdItfReq+0x78>
 80090fa:	7bfb      	ldrb	r3, [r7, #15]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d10d      	bne.n	800911c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 fd38 	bl	8009b76 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009106:	e009      	b.n	800911c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009108:	6839      	ldr	r1, [r7, #0]
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 fc89 	bl	8009a22 <USBD_CtlError>
          break;
 8009110:	e004      	b.n	800911c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009112:	6839      	ldr	r1, [r7, #0]
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fc84 	bl	8009a22 <USBD_CtlError>
          break;
 800911a:	e000      	b.n	800911e <USBD_StdItfReq+0x7a>
          break;
 800911c:	bf00      	nop
      }
      break;
 800911e:	e004      	b.n	800912a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009120:	6839      	ldr	r1, [r7, #0]
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 fc7d 	bl	8009a22 <USBD_CtlError>
      break;
 8009128:	bf00      	nop
  }

  return USBD_OK;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800913e:	2300      	movs	r3, #0
 8009140:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	889b      	ldrh	r3, [r3, #4]
 8009146:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009150:	2b40      	cmp	r3, #64	; 0x40
 8009152:	d007      	beq.n	8009164 <USBD_StdEPReq+0x30>
 8009154:	2b40      	cmp	r3, #64	; 0x40
 8009156:	f200 8146 	bhi.w	80093e6 <USBD_StdEPReq+0x2b2>
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00a      	beq.n	8009174 <USBD_StdEPReq+0x40>
 800915e:	2b20      	cmp	r3, #32
 8009160:	f040 8141 	bne.w	80093e6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	6839      	ldr	r1, [r7, #0]
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	4798      	blx	r3
      break;
 8009172:	e13d      	b.n	80093f0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800917c:	2b20      	cmp	r3, #32
 800917e:	d10a      	bne.n	8009196 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	6839      	ldr	r1, [r7, #0]
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	4798      	blx	r3
 800918e:	4603      	mov	r3, r0
 8009190:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009192:	7bfb      	ldrb	r3, [r7, #15]
 8009194:	e12d      	b.n	80093f2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	785b      	ldrb	r3, [r3, #1]
 800919a:	2b03      	cmp	r3, #3
 800919c:	d007      	beq.n	80091ae <USBD_StdEPReq+0x7a>
 800919e:	2b03      	cmp	r3, #3
 80091a0:	f300 811b 	bgt.w	80093da <USBD_StdEPReq+0x2a6>
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d072      	beq.n	800928e <USBD_StdEPReq+0x15a>
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d03a      	beq.n	8009222 <USBD_StdEPReq+0xee>
 80091ac:	e115      	b.n	80093da <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	d002      	beq.n	80091be <USBD_StdEPReq+0x8a>
 80091b8:	2b03      	cmp	r3, #3
 80091ba:	d015      	beq.n	80091e8 <USBD_StdEPReq+0xb4>
 80091bc:	e02b      	b.n	8009216 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091be:	7bbb      	ldrb	r3, [r7, #14]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d00c      	beq.n	80091de <USBD_StdEPReq+0xaa>
 80091c4:	7bbb      	ldrb	r3, [r7, #14]
 80091c6:	2b80      	cmp	r3, #128	; 0x80
 80091c8:	d009      	beq.n	80091de <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80091ca:	7bbb      	ldrb	r3, [r7, #14]
 80091cc:	4619      	mov	r1, r3
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 ff96 	bl	800a100 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80091d4:	2180      	movs	r1, #128	; 0x80
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 ff92 	bl	800a100 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80091dc:	e020      	b.n	8009220 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80091de:	6839      	ldr	r1, [r7, #0]
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 fc1e 	bl	8009a22 <USBD_CtlError>
              break;
 80091e6:	e01b      	b.n	8009220 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	885b      	ldrh	r3, [r3, #2]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d10e      	bne.n	800920e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80091f0:	7bbb      	ldrb	r3, [r7, #14]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00b      	beq.n	800920e <USBD_StdEPReq+0xda>
 80091f6:	7bbb      	ldrb	r3, [r7, #14]
 80091f8:	2b80      	cmp	r3, #128	; 0x80
 80091fa:	d008      	beq.n	800920e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	88db      	ldrh	r3, [r3, #6]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d104      	bne.n	800920e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009204:	7bbb      	ldrb	r3, [r7, #14]
 8009206:	4619      	mov	r1, r3
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 ff79 	bl	800a100 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 fcb1 	bl	8009b76 <USBD_CtlSendStatus>

              break;
 8009214:	e004      	b.n	8009220 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009216:	6839      	ldr	r1, [r7, #0]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 fc02 	bl	8009a22 <USBD_CtlError>
              break;
 800921e:	bf00      	nop
          }
          break;
 8009220:	e0e0      	b.n	80093e4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009228:	2b02      	cmp	r3, #2
 800922a:	d002      	beq.n	8009232 <USBD_StdEPReq+0xfe>
 800922c:	2b03      	cmp	r3, #3
 800922e:	d015      	beq.n	800925c <USBD_StdEPReq+0x128>
 8009230:	e026      	b.n	8009280 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009232:	7bbb      	ldrb	r3, [r7, #14]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00c      	beq.n	8009252 <USBD_StdEPReq+0x11e>
 8009238:	7bbb      	ldrb	r3, [r7, #14]
 800923a:	2b80      	cmp	r3, #128	; 0x80
 800923c:	d009      	beq.n	8009252 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800923e:	7bbb      	ldrb	r3, [r7, #14]
 8009240:	4619      	mov	r1, r3
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 ff5c 	bl	800a100 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009248:	2180      	movs	r1, #128	; 0x80
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 ff58 	bl	800a100 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009250:	e01c      	b.n	800928c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009252:	6839      	ldr	r1, [r7, #0]
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fbe4 	bl	8009a22 <USBD_CtlError>
              break;
 800925a:	e017      	b.n	800928c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	885b      	ldrh	r3, [r3, #2]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d112      	bne.n	800928a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009264:	7bbb      	ldrb	r3, [r7, #14]
 8009266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800926a:	2b00      	cmp	r3, #0
 800926c:	d004      	beq.n	8009278 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800926e:	7bbb      	ldrb	r3, [r7, #14]
 8009270:	4619      	mov	r1, r3
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 ff63 	bl	800a13e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 fc7c 	bl	8009b76 <USBD_CtlSendStatus>
              }
              break;
 800927e:	e004      	b.n	800928a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009280:	6839      	ldr	r1, [r7, #0]
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 fbcd 	bl	8009a22 <USBD_CtlError>
              break;
 8009288:	e000      	b.n	800928c <USBD_StdEPReq+0x158>
              break;
 800928a:	bf00      	nop
          }
          break;
 800928c:	e0aa      	b.n	80093e4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009294:	2b02      	cmp	r3, #2
 8009296:	d002      	beq.n	800929e <USBD_StdEPReq+0x16a>
 8009298:	2b03      	cmp	r3, #3
 800929a:	d032      	beq.n	8009302 <USBD_StdEPReq+0x1ce>
 800929c:	e097      	b.n	80093ce <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800929e:	7bbb      	ldrb	r3, [r7, #14]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d007      	beq.n	80092b4 <USBD_StdEPReq+0x180>
 80092a4:	7bbb      	ldrb	r3, [r7, #14]
 80092a6:	2b80      	cmp	r3, #128	; 0x80
 80092a8:	d004      	beq.n	80092b4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80092aa:	6839      	ldr	r1, [r7, #0]
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 fbb8 	bl	8009a22 <USBD_CtlError>
                break;
 80092b2:	e091      	b.n	80093d8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	da0b      	bge.n	80092d4 <USBD_StdEPReq+0x1a0>
 80092bc:	7bbb      	ldrb	r3, [r7, #14]
 80092be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092c2:	4613      	mov	r3, r2
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	4413      	add	r3, r2
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	3310      	adds	r3, #16
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	4413      	add	r3, r2
 80092d0:	3304      	adds	r3, #4
 80092d2:	e00b      	b.n	80092ec <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80092d4:	7bbb      	ldrb	r3, [r7, #14]
 80092d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092da:	4613      	mov	r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	4413      	add	r3, r2
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	4413      	add	r3, r2
 80092ea:	3304      	adds	r3, #4
 80092ec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	2200      	movs	r2, #0
 80092f2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	2202      	movs	r2, #2
 80092f8:	4619      	mov	r1, r3
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fbfb 	bl	8009af6 <USBD_CtlSendData>
              break;
 8009300:	e06a      	b.n	80093d8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009302:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009306:	2b00      	cmp	r3, #0
 8009308:	da11      	bge.n	800932e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800930a:	7bbb      	ldrb	r3, [r7, #14]
 800930c:	f003 020f 	and.w	r2, r3, #15
 8009310:	6879      	ldr	r1, [r7, #4]
 8009312:	4613      	mov	r3, r2
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	4413      	add	r3, r2
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	440b      	add	r3, r1
 800931c:	3318      	adds	r3, #24
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d117      	bne.n	8009354 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009324:	6839      	ldr	r1, [r7, #0]
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 fb7b 	bl	8009a22 <USBD_CtlError>
                  break;
 800932c:	e054      	b.n	80093d8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800932e:	7bbb      	ldrb	r3, [r7, #14]
 8009330:	f003 020f 	and.w	r2, r3, #15
 8009334:	6879      	ldr	r1, [r7, #4]
 8009336:	4613      	mov	r3, r2
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	4413      	add	r3, r2
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	440b      	add	r3, r1
 8009340:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d104      	bne.n	8009354 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 fb68 	bl	8009a22 <USBD_CtlError>
                  break;
 8009352:	e041      	b.n	80093d8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009354:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009358:	2b00      	cmp	r3, #0
 800935a:	da0b      	bge.n	8009374 <USBD_StdEPReq+0x240>
 800935c:	7bbb      	ldrb	r3, [r7, #14]
 800935e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009362:	4613      	mov	r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	4413      	add	r3, r2
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	3310      	adds	r3, #16
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	4413      	add	r3, r2
 8009370:	3304      	adds	r3, #4
 8009372:	e00b      	b.n	800938c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009374:	7bbb      	ldrb	r3, [r7, #14]
 8009376:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800937a:	4613      	mov	r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	4413      	add	r3, r2
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	4413      	add	r3, r2
 800938a:	3304      	adds	r3, #4
 800938c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800938e:	7bbb      	ldrb	r3, [r7, #14]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d002      	beq.n	800939a <USBD_StdEPReq+0x266>
 8009394:	7bbb      	ldrb	r3, [r7, #14]
 8009396:	2b80      	cmp	r3, #128	; 0x80
 8009398:	d103      	bne.n	80093a2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	2200      	movs	r2, #0
 800939e:	601a      	str	r2, [r3, #0]
 80093a0:	e00e      	b.n	80093c0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80093a2:	7bbb      	ldrb	r3, [r7, #14]
 80093a4:	4619      	mov	r1, r3
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 fee8 	bl	800a17c <USBD_LL_IsStallEP>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d003      	beq.n	80093ba <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	2201      	movs	r2, #1
 80093b6:	601a      	str	r2, [r3, #0]
 80093b8:	e002      	b.n	80093c0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	2200      	movs	r2, #0
 80093be:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	2202      	movs	r2, #2
 80093c4:	4619      	mov	r1, r3
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 fb95 	bl	8009af6 <USBD_CtlSendData>
              break;
 80093cc:	e004      	b.n	80093d8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80093ce:	6839      	ldr	r1, [r7, #0]
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 fb26 	bl	8009a22 <USBD_CtlError>
              break;
 80093d6:	bf00      	nop
          }
          break;
 80093d8:	e004      	b.n	80093e4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80093da:	6839      	ldr	r1, [r7, #0]
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 fb20 	bl	8009a22 <USBD_CtlError>
          break;
 80093e2:	bf00      	nop
      }
      break;
 80093e4:	e004      	b.n	80093f0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80093e6:	6839      	ldr	r1, [r7, #0]
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 fb1a 	bl	8009a22 <USBD_CtlError>
      break;
 80093ee:	bf00      	nop
  }

  return ret;
 80093f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
	...

080093fc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009406:	2300      	movs	r3, #0
 8009408:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800940a:	2300      	movs	r3, #0
 800940c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800940e:	2300      	movs	r3, #0
 8009410:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	885b      	ldrh	r3, [r3, #2]
 8009416:	0a1b      	lsrs	r3, r3, #8
 8009418:	b29b      	uxth	r3, r3
 800941a:	3b01      	subs	r3, #1
 800941c:	2b06      	cmp	r3, #6
 800941e:	f200 8128 	bhi.w	8009672 <USBD_GetDescriptor+0x276>
 8009422:	a201      	add	r2, pc, #4	; (adr r2, 8009428 <USBD_GetDescriptor+0x2c>)
 8009424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009428:	08009445 	.word	0x08009445
 800942c:	0800945d 	.word	0x0800945d
 8009430:	0800949d 	.word	0x0800949d
 8009434:	08009673 	.word	0x08009673
 8009438:	08009673 	.word	0x08009673
 800943c:	08009613 	.word	0x08009613
 8009440:	0800963f 	.word	0x0800963f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	7c12      	ldrb	r2, [r2, #16]
 8009450:	f107 0108 	add.w	r1, r7, #8
 8009454:	4610      	mov	r0, r2
 8009456:	4798      	blx	r3
 8009458:	60f8      	str	r0, [r7, #12]
      break;
 800945a:	e112      	b.n	8009682 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	7c1b      	ldrb	r3, [r3, #16]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d10d      	bne.n	8009480 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800946a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800946c:	f107 0208 	add.w	r2, r7, #8
 8009470:	4610      	mov	r0, r2
 8009472:	4798      	blx	r3
 8009474:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	3301      	adds	r3, #1
 800947a:	2202      	movs	r2, #2
 800947c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800947e:	e100      	b.n	8009682 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009488:	f107 0208 	add.w	r2, r7, #8
 800948c:	4610      	mov	r0, r2
 800948e:	4798      	blx	r3
 8009490:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	3301      	adds	r3, #1
 8009496:	2202      	movs	r2, #2
 8009498:	701a      	strb	r2, [r3, #0]
      break;
 800949a:	e0f2      	b.n	8009682 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	885b      	ldrh	r3, [r3, #2]
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	2b05      	cmp	r3, #5
 80094a4:	f200 80ac 	bhi.w	8009600 <USBD_GetDescriptor+0x204>
 80094a8:	a201      	add	r2, pc, #4	; (adr r2, 80094b0 <USBD_GetDescriptor+0xb4>)
 80094aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ae:	bf00      	nop
 80094b0:	080094c9 	.word	0x080094c9
 80094b4:	080094fd 	.word	0x080094fd
 80094b8:	08009531 	.word	0x08009531
 80094bc:	08009565 	.word	0x08009565
 80094c0:	08009599 	.word	0x08009599
 80094c4:	080095cd 	.word	0x080095cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00b      	beq.n	80094ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	7c12      	ldrb	r2, [r2, #16]
 80094e0:	f107 0108 	add.w	r1, r7, #8
 80094e4:	4610      	mov	r0, r2
 80094e6:	4798      	blx	r3
 80094e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094ea:	e091      	b.n	8009610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 fa97 	bl	8009a22 <USBD_CtlError>
            err++;
 80094f4:	7afb      	ldrb	r3, [r7, #11]
 80094f6:	3301      	adds	r3, #1
 80094f8:	72fb      	strb	r3, [r7, #11]
          break;
 80094fa:	e089      	b.n	8009610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00b      	beq.n	8009520 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	7c12      	ldrb	r2, [r2, #16]
 8009514:	f107 0108 	add.w	r1, r7, #8
 8009518:	4610      	mov	r0, r2
 800951a:	4798      	blx	r3
 800951c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800951e:	e077      	b.n	8009610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009520:	6839      	ldr	r1, [r7, #0]
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fa7d 	bl	8009a22 <USBD_CtlError>
            err++;
 8009528:	7afb      	ldrb	r3, [r7, #11]
 800952a:	3301      	adds	r3, #1
 800952c:	72fb      	strb	r3, [r7, #11]
          break;
 800952e:	e06f      	b.n	8009610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00b      	beq.n	8009554 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	7c12      	ldrb	r2, [r2, #16]
 8009548:	f107 0108 	add.w	r1, r7, #8
 800954c:	4610      	mov	r0, r2
 800954e:	4798      	blx	r3
 8009550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009552:	e05d      	b.n	8009610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009554:	6839      	ldr	r1, [r7, #0]
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fa63 	bl	8009a22 <USBD_CtlError>
            err++;
 800955c:	7afb      	ldrb	r3, [r7, #11]
 800955e:	3301      	adds	r3, #1
 8009560:	72fb      	strb	r3, [r7, #11]
          break;
 8009562:	e055      	b.n	8009610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d00b      	beq.n	8009588 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009576:	691b      	ldr	r3, [r3, #16]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	7c12      	ldrb	r2, [r2, #16]
 800957c:	f107 0108 	add.w	r1, r7, #8
 8009580:	4610      	mov	r0, r2
 8009582:	4798      	blx	r3
 8009584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009586:	e043      	b.n	8009610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009588:	6839      	ldr	r1, [r7, #0]
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 fa49 	bl	8009a22 <USBD_CtlError>
            err++;
 8009590:	7afb      	ldrb	r3, [r7, #11]
 8009592:	3301      	adds	r3, #1
 8009594:	72fb      	strb	r3, [r7, #11]
          break;
 8009596:	e03b      	b.n	8009610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800959e:	695b      	ldr	r3, [r3, #20]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d00b      	beq.n	80095bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80095aa:	695b      	ldr	r3, [r3, #20]
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	7c12      	ldrb	r2, [r2, #16]
 80095b0:	f107 0108 	add.w	r1, r7, #8
 80095b4:	4610      	mov	r0, r2
 80095b6:	4798      	blx	r3
 80095b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095ba:	e029      	b.n	8009610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095bc:	6839      	ldr	r1, [r7, #0]
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 fa2f 	bl	8009a22 <USBD_CtlError>
            err++;
 80095c4:	7afb      	ldrb	r3, [r7, #11]
 80095c6:	3301      	adds	r3, #1
 80095c8:	72fb      	strb	r3, [r7, #11]
          break;
 80095ca:	e021      	b.n	8009610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80095d2:	699b      	ldr	r3, [r3, #24]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00b      	beq.n	80095f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	7c12      	ldrb	r2, [r2, #16]
 80095e4:	f107 0108 	add.w	r1, r7, #8
 80095e8:	4610      	mov	r0, r2
 80095ea:	4798      	blx	r3
 80095ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095ee:	e00f      	b.n	8009610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095f0:	6839      	ldr	r1, [r7, #0]
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 fa15 	bl	8009a22 <USBD_CtlError>
            err++;
 80095f8:	7afb      	ldrb	r3, [r7, #11]
 80095fa:	3301      	adds	r3, #1
 80095fc:	72fb      	strb	r3, [r7, #11]
          break;
 80095fe:	e007      	b.n	8009610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009600:	6839      	ldr	r1, [r7, #0]
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fa0d 	bl	8009a22 <USBD_CtlError>
          err++;
 8009608:	7afb      	ldrb	r3, [r7, #11]
 800960a:	3301      	adds	r3, #1
 800960c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800960e:	e038      	b.n	8009682 <USBD_GetDescriptor+0x286>
 8009610:	e037      	b.n	8009682 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	7c1b      	ldrb	r3, [r3, #16]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d109      	bne.n	800962e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009622:	f107 0208 	add.w	r2, r7, #8
 8009626:	4610      	mov	r0, r2
 8009628:	4798      	blx	r3
 800962a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800962c:	e029      	b.n	8009682 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800962e:	6839      	ldr	r1, [r7, #0]
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 f9f6 	bl	8009a22 <USBD_CtlError>
        err++;
 8009636:	7afb      	ldrb	r3, [r7, #11]
 8009638:	3301      	adds	r3, #1
 800963a:	72fb      	strb	r3, [r7, #11]
      break;
 800963c:	e021      	b.n	8009682 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	7c1b      	ldrb	r3, [r3, #16]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d10d      	bne.n	8009662 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800964c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800964e:	f107 0208 	add.w	r2, r7, #8
 8009652:	4610      	mov	r0, r2
 8009654:	4798      	blx	r3
 8009656:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	3301      	adds	r3, #1
 800965c:	2207      	movs	r2, #7
 800965e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009660:	e00f      	b.n	8009682 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009662:	6839      	ldr	r1, [r7, #0]
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 f9dc 	bl	8009a22 <USBD_CtlError>
        err++;
 800966a:	7afb      	ldrb	r3, [r7, #11]
 800966c:	3301      	adds	r3, #1
 800966e:	72fb      	strb	r3, [r7, #11]
      break;
 8009670:	e007      	b.n	8009682 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009672:	6839      	ldr	r1, [r7, #0]
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 f9d4 	bl	8009a22 <USBD_CtlError>
      err++;
 800967a:	7afb      	ldrb	r3, [r7, #11]
 800967c:	3301      	adds	r3, #1
 800967e:	72fb      	strb	r3, [r7, #11]
      break;
 8009680:	bf00      	nop
  }

  if (err != 0U)
 8009682:	7afb      	ldrb	r3, [r7, #11]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d11c      	bne.n	80096c2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009688:	893b      	ldrh	r3, [r7, #8]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d011      	beq.n	80096b2 <USBD_GetDescriptor+0x2b6>
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	88db      	ldrh	r3, [r3, #6]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d00d      	beq.n	80096b2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	88da      	ldrh	r2, [r3, #6]
 800969a:	893b      	ldrh	r3, [r7, #8]
 800969c:	4293      	cmp	r3, r2
 800969e:	bf28      	it	cs
 80096a0:	4613      	movcs	r3, r2
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80096a6:	893b      	ldrh	r3, [r7, #8]
 80096a8:	461a      	mov	r2, r3
 80096aa:	68f9      	ldr	r1, [r7, #12]
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 fa22 	bl	8009af6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	88db      	ldrh	r3, [r3, #6]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d104      	bne.n	80096c4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 fa5b 	bl	8009b76 <USBD_CtlSendStatus>
 80096c0:	e000      	b.n	80096c4 <USBD_GetDescriptor+0x2c8>
    return;
 80096c2:	bf00      	nop
    }
  }
}
 80096c4:	3710      	adds	r7, #16
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop

080096cc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	889b      	ldrh	r3, [r3, #4]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d130      	bne.n	8009740 <USBD_SetAddress+0x74>
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	88db      	ldrh	r3, [r3, #6]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d12c      	bne.n	8009740 <USBD_SetAddress+0x74>
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	885b      	ldrh	r3, [r3, #2]
 80096ea:	2b7f      	cmp	r3, #127	; 0x7f
 80096ec:	d828      	bhi.n	8009740 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	885b      	ldrh	r3, [r3, #2]
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009700:	2b03      	cmp	r3, #3
 8009702:	d104      	bne.n	800970e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009704:	6839      	ldr	r1, [r7, #0]
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 f98b 	bl	8009a22 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800970c:	e01d      	b.n	800974a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	7bfa      	ldrb	r2, [r7, #15]
 8009712:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009716:	7bfb      	ldrb	r3, [r7, #15]
 8009718:	4619      	mov	r1, r3
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 fd5a 	bl	800a1d4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fa28 	bl	8009b76 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009726:	7bfb      	ldrb	r3, [r7, #15]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d004      	beq.n	8009736 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2202      	movs	r2, #2
 8009730:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009734:	e009      	b.n	800974a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2201      	movs	r2, #1
 800973a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800973e:	e004      	b.n	800974a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009740:	6839      	ldr	r1, [r7, #0]
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f96d 	bl	8009a22 <USBD_CtlError>
  }
}
 8009748:	bf00      	nop
 800974a:	bf00      	nop
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
	...

08009754 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	885b      	ldrh	r3, [r3, #2]
 8009762:	b2da      	uxtb	r2, r3
 8009764:	4b41      	ldr	r3, [pc, #260]	; (800986c <USBD_SetConfig+0x118>)
 8009766:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009768:	4b40      	ldr	r3, [pc, #256]	; (800986c <USBD_SetConfig+0x118>)
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	2b01      	cmp	r3, #1
 800976e:	d904      	bls.n	800977a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009770:	6839      	ldr	r1, [r7, #0]
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 f955 	bl	8009a22 <USBD_CtlError>
 8009778:	e075      	b.n	8009866 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009780:	2b02      	cmp	r3, #2
 8009782:	d002      	beq.n	800978a <USBD_SetConfig+0x36>
 8009784:	2b03      	cmp	r3, #3
 8009786:	d023      	beq.n	80097d0 <USBD_SetConfig+0x7c>
 8009788:	e062      	b.n	8009850 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800978a:	4b38      	ldr	r3, [pc, #224]	; (800986c <USBD_SetConfig+0x118>)
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d01a      	beq.n	80097c8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009792:	4b36      	ldr	r3, [pc, #216]	; (800986c <USBD_SetConfig+0x118>)
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	461a      	mov	r2, r3
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2203      	movs	r2, #3
 80097a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80097a4:	4b31      	ldr	r3, [pc, #196]	; (800986c <USBD_SetConfig+0x118>)
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	4619      	mov	r1, r3
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f7ff f9e8 	bl	8008b80 <USBD_SetClassConfig>
 80097b0:	4603      	mov	r3, r0
 80097b2:	2b02      	cmp	r3, #2
 80097b4:	d104      	bne.n	80097c0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80097b6:	6839      	ldr	r1, [r7, #0]
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 f932 	bl	8009a22 <USBD_CtlError>
            return;
 80097be:	e052      	b.n	8009866 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 f9d8 	bl	8009b76 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80097c6:	e04e      	b.n	8009866 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 f9d4 	bl	8009b76 <USBD_CtlSendStatus>
        break;
 80097ce:	e04a      	b.n	8009866 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80097d0:	4b26      	ldr	r3, [pc, #152]	; (800986c <USBD_SetConfig+0x118>)
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d112      	bne.n	80097fe <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2202      	movs	r2, #2
 80097dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80097e0:	4b22      	ldr	r3, [pc, #136]	; (800986c <USBD_SetConfig+0x118>)
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	461a      	mov	r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80097ea:	4b20      	ldr	r3, [pc, #128]	; (800986c <USBD_SetConfig+0x118>)
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	4619      	mov	r1, r3
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f7ff f9e4 	bl	8008bbe <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 f9bd 	bl	8009b76 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80097fc:	e033      	b.n	8009866 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80097fe:	4b1b      	ldr	r3, [pc, #108]	; (800986c <USBD_SetConfig+0x118>)
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	461a      	mov	r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	429a      	cmp	r2, r3
 800980a:	d01d      	beq.n	8009848 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	b2db      	uxtb	r3, r3
 8009812:	4619      	mov	r1, r3
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f7ff f9d2 	bl	8008bbe <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800981a:	4b14      	ldr	r3, [pc, #80]	; (800986c <USBD_SetConfig+0x118>)
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	461a      	mov	r2, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009824:	4b11      	ldr	r3, [pc, #68]	; (800986c <USBD_SetConfig+0x118>)
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	4619      	mov	r1, r3
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f7ff f9a8 	bl	8008b80 <USBD_SetClassConfig>
 8009830:	4603      	mov	r3, r0
 8009832:	2b02      	cmp	r3, #2
 8009834:	d104      	bne.n	8009840 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009836:	6839      	ldr	r1, [r7, #0]
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 f8f2 	bl	8009a22 <USBD_CtlError>
            return;
 800983e:	e012      	b.n	8009866 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 f998 	bl	8009b76 <USBD_CtlSendStatus>
        break;
 8009846:	e00e      	b.n	8009866 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 f994 	bl	8009b76 <USBD_CtlSendStatus>
        break;
 800984e:	e00a      	b.n	8009866 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009850:	6839      	ldr	r1, [r7, #0]
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 f8e5 	bl	8009a22 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009858:	4b04      	ldr	r3, [pc, #16]	; (800986c <USBD_SetConfig+0x118>)
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	4619      	mov	r1, r3
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f7ff f9ad 	bl	8008bbe <USBD_ClrClassConfig>
        break;
 8009864:	bf00      	nop
    }
  }
}
 8009866:	3708      	adds	r7, #8
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	2000b198 	.word	0x2000b198

08009870 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	88db      	ldrh	r3, [r3, #6]
 800987e:	2b01      	cmp	r3, #1
 8009880:	d004      	beq.n	800988c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009882:	6839      	ldr	r1, [r7, #0]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 f8cc 	bl	8009a22 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800988a:	e022      	b.n	80098d2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009892:	2b02      	cmp	r3, #2
 8009894:	dc02      	bgt.n	800989c <USBD_GetConfig+0x2c>
 8009896:	2b00      	cmp	r3, #0
 8009898:	dc03      	bgt.n	80098a2 <USBD_GetConfig+0x32>
 800989a:	e015      	b.n	80098c8 <USBD_GetConfig+0x58>
 800989c:	2b03      	cmp	r3, #3
 800989e:	d00b      	beq.n	80098b8 <USBD_GetConfig+0x48>
 80098a0:	e012      	b.n	80098c8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	3308      	adds	r3, #8
 80098ac:	2201      	movs	r2, #1
 80098ae:	4619      	mov	r1, r3
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 f920 	bl	8009af6 <USBD_CtlSendData>
        break;
 80098b6:	e00c      	b.n	80098d2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	3304      	adds	r3, #4
 80098bc:	2201      	movs	r2, #1
 80098be:	4619      	mov	r1, r3
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 f918 	bl	8009af6 <USBD_CtlSendData>
        break;
 80098c6:	e004      	b.n	80098d2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80098c8:	6839      	ldr	r1, [r7, #0]
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 f8a9 	bl	8009a22 <USBD_CtlError>
        break;
 80098d0:	bf00      	nop
}
 80098d2:	bf00      	nop
 80098d4:	3708      	adds	r7, #8
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b082      	sub	sp, #8
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
 80098e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098ea:	3b01      	subs	r3, #1
 80098ec:	2b02      	cmp	r3, #2
 80098ee:	d81e      	bhi.n	800992e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	88db      	ldrh	r3, [r3, #6]
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d004      	beq.n	8009902 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80098f8:	6839      	ldr	r1, [r7, #0]
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 f891 	bl	8009a22 <USBD_CtlError>
        break;
 8009900:	e01a      	b.n	8009938 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2201      	movs	r2, #1
 8009906:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800990e:	2b00      	cmp	r3, #0
 8009910:	d005      	beq.n	800991e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	68db      	ldr	r3, [r3, #12]
 8009916:	f043 0202 	orr.w	r2, r3, #2
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	330c      	adds	r3, #12
 8009922:	2202      	movs	r2, #2
 8009924:	4619      	mov	r1, r3
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 f8e5 	bl	8009af6 <USBD_CtlSendData>
      break;
 800992c:	e004      	b.n	8009938 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800992e:	6839      	ldr	r1, [r7, #0]
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 f876 	bl	8009a22 <USBD_CtlError>
      break;
 8009936:	bf00      	nop
  }
}
 8009938:	bf00      	nop
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	885b      	ldrh	r3, [r3, #2]
 800994e:	2b01      	cmp	r3, #1
 8009950:	d106      	bne.n	8009960 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2201      	movs	r2, #1
 8009956:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 f90b 	bl	8009b76 <USBD_CtlSendStatus>
  }
}
 8009960:	bf00      	nop
 8009962:	3708      	adds	r7, #8
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009978:	3b01      	subs	r3, #1
 800997a:	2b02      	cmp	r3, #2
 800997c:	d80b      	bhi.n	8009996 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	885b      	ldrh	r3, [r3, #2]
 8009982:	2b01      	cmp	r3, #1
 8009984:	d10c      	bne.n	80099a0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 f8f1 	bl	8009b76 <USBD_CtlSendStatus>
      }
      break;
 8009994:	e004      	b.n	80099a0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009996:	6839      	ldr	r1, [r7, #0]
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 f842 	bl	8009a22 <USBD_CtlError>
      break;
 800999e:	e000      	b.n	80099a2 <USBD_ClrFeature+0x3a>
      break;
 80099a0:	bf00      	nop
  }
}
 80099a2:	bf00      	nop
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80099aa:	b480      	push	{r7}
 80099ac:	b083      	sub	sp, #12
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
 80099b2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	781a      	ldrb	r2, [r3, #0]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	785a      	ldrb	r2, [r3, #1]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	3302      	adds	r3, #2
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	b29a      	uxth	r2, r3
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	3303      	adds	r3, #3
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	021b      	lsls	r3, r3, #8
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	4413      	add	r3, r2
 80099da:	b29a      	uxth	r2, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	3304      	adds	r3, #4
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	3305      	adds	r3, #5
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	021b      	lsls	r3, r3, #8
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	4413      	add	r3, r2
 80099f6:	b29a      	uxth	r2, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	3306      	adds	r3, #6
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	b29a      	uxth	r2, r3
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	3307      	adds	r3, #7
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	021b      	lsls	r3, r3, #8
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	4413      	add	r3, r2
 8009a12:	b29a      	uxth	r2, r3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	80da      	strh	r2, [r3, #6]

}
 8009a18:	bf00      	nop
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bc80      	pop	{r7}
 8009a20:	4770      	bx	lr

08009a22 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b082      	sub	sp, #8
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
 8009a2a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009a2c:	2180      	movs	r1, #128	; 0x80
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 fb66 	bl	800a100 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009a34:	2100      	movs	r1, #0
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 fb62 	bl	800a100 <USBD_LL_StallEP>
}
 8009a3c:	bf00      	nop
 8009a3e:	3708      	adds	r7, #8
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b086      	sub	sp, #24
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009a50:	2300      	movs	r3, #0
 8009a52:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d032      	beq.n	8009ac0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	f000 f834 	bl	8009ac8 <USBD_GetLen>
 8009a60:	4603      	mov	r3, r0
 8009a62:	3301      	adds	r3, #1
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	005b      	lsls	r3, r3, #1
 8009a68:	b29a      	uxth	r2, r3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009a6e:	7dfb      	ldrb	r3, [r7, #23]
 8009a70:	1c5a      	adds	r2, r3, #1
 8009a72:	75fa      	strb	r2, [r7, #23]
 8009a74:	461a      	mov	r2, r3
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	4413      	add	r3, r2
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	7812      	ldrb	r2, [r2, #0]
 8009a7e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009a80:	7dfb      	ldrb	r3, [r7, #23]
 8009a82:	1c5a      	adds	r2, r3, #1
 8009a84:	75fa      	strb	r2, [r7, #23]
 8009a86:	461a      	mov	r2, r3
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	2203      	movs	r2, #3
 8009a8e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009a90:	e012      	b.n	8009ab8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	1c5a      	adds	r2, r3, #1
 8009a96:	60fa      	str	r2, [r7, #12]
 8009a98:	7dfa      	ldrb	r2, [r7, #23]
 8009a9a:	1c51      	adds	r1, r2, #1
 8009a9c:	75f9      	strb	r1, [r7, #23]
 8009a9e:	4611      	mov	r1, r2
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	440a      	add	r2, r1
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009aa8:	7dfb      	ldrb	r3, [r7, #23]
 8009aaa:	1c5a      	adds	r2, r3, #1
 8009aac:	75fa      	strb	r2, [r7, #23]
 8009aae:	461a      	mov	r2, r3
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d1e8      	bne.n	8009a92 <USBD_GetString+0x4e>
    }
  }
}
 8009ac0:	bf00      	nop
 8009ac2:	3718      	adds	r7, #24
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009ad4:	e005      	b.n	8009ae2 <USBD_GetLen+0x1a>
  {
    len++;
 8009ad6:	7bfb      	ldrb	r3, [r7, #15]
 8009ad8:	3301      	adds	r3, #1
 8009ada:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1f5      	bne.n	8009ad6 <USBD_GetLen+0xe>
  }

  return len;
 8009aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3714      	adds	r7, #20
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bc80      	pop	{r7}
 8009af4:	4770      	bx	lr

08009af6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b084      	sub	sp, #16
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	60f8      	str	r0, [r7, #12]
 8009afe:	60b9      	str	r1, [r7, #8]
 8009b00:	4613      	mov	r3, r2
 8009b02:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2202      	movs	r2, #2
 8009b08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009b0c:	88fa      	ldrh	r2, [r7, #6]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009b12:	88fa      	ldrh	r2, [r7, #6]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009b18:	88fb      	ldrh	r3, [r7, #6]
 8009b1a:	68ba      	ldr	r2, [r7, #8]
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f000 fb77 	bl	800a212 <USBD_LL_Transmit>

  return USBD_OK;
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3710      	adds	r7, #16
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b084      	sub	sp, #16
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	60f8      	str	r0, [r7, #12]
 8009b36:	60b9      	str	r1, [r7, #8]
 8009b38:	4613      	mov	r3, r2
 8009b3a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009b3c:	88fb      	ldrh	r3, [r7, #6]
 8009b3e:	68ba      	ldr	r2, [r7, #8]
 8009b40:	2100      	movs	r1, #0
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	f000 fb65 	bl	800a212 <USBD_LL_Transmit>

  return USBD_OK;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b084      	sub	sp, #16
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	60f8      	str	r0, [r7, #12]
 8009b5a:	60b9      	str	r1, [r7, #8]
 8009b5c:	4613      	mov	r3, r2
 8009b5e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009b60:	88fb      	ldrh	r3, [r7, #6]
 8009b62:	68ba      	ldr	r2, [r7, #8]
 8009b64:	2100      	movs	r1, #0
 8009b66:	68f8      	ldr	r0, [r7, #12]
 8009b68:	f000 fb76 	bl	800a258 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b6c:	2300      	movs	r3, #0
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}

08009b76 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b082      	sub	sp, #8
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2204      	movs	r2, #4
 8009b82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009b86:	2300      	movs	r3, #0
 8009b88:	2200      	movs	r2, #0
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fb40 	bl	800a212 <USBD_LL_Transmit>

  return USBD_OK;
 8009b92:	2300      	movs	r3, #0
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2205      	movs	r2, #5
 8009ba8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009bac:	2300      	movs	r3, #0
 8009bae:	2200      	movs	r2, #0
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 fb50 	bl	800a258 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009bb8:	2300      	movs	r3, #0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3708      	adds	r7, #8
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
	...

08009bc4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009bc8:	2200      	movs	r2, #0
 8009bca:	490e      	ldr	r1, [pc, #56]	; (8009c04 <MX_USB_DEVICE_Init+0x40>)
 8009bcc:	480e      	ldr	r0, [pc, #56]	; (8009c08 <MX_USB_DEVICE_Init+0x44>)
 8009bce:	f7fe ff7d 	bl	8008acc <USBD_Init>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d001      	beq.n	8009bdc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009bd8:	f7f7 f966 	bl	8000ea8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009bdc:	490b      	ldr	r1, [pc, #44]	; (8009c0c <MX_USB_DEVICE_Init+0x48>)
 8009bde:	480a      	ldr	r0, [pc, #40]	; (8009c08 <MX_USB_DEVICE_Init+0x44>)
 8009be0:	f7fe ff9f 	bl	8008b22 <USBD_RegisterClass>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d001      	beq.n	8009bee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009bea:	f7f7 f95d 	bl	8000ea8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009bee:	4806      	ldr	r0, [pc, #24]	; (8009c08 <MX_USB_DEVICE_Init+0x44>)
 8009bf0:	f7fe ffb0 	bl	8008b54 <USBD_Start>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d001      	beq.n	8009bfe <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8009bfa:	f7f7 f955 	bl	8000ea8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009bfe:	bf00      	nop
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	200001c8 	.word	0x200001c8
 8009c08:	2000b19c 	.word	0x2000b19c
 8009c0c:	200000a8 	.word	0x200000a8

08009c10 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	4603      	mov	r3, r0
 8009c18:	6039      	str	r1, [r7, #0]
 8009c1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	2212      	movs	r2, #18
 8009c20:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009c22:	4b03      	ldr	r3, [pc, #12]	; (8009c30 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bc80      	pop	{r7}
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop
 8009c30:	200001e4 	.word	0x200001e4

08009c34 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	6039      	str	r1, [r7, #0]
 8009c3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	2204      	movs	r2, #4
 8009c44:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009c46:	4b03      	ldr	r3, [pc, #12]	; (8009c54 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bc80      	pop	{r7}
 8009c50:	4770      	bx	lr
 8009c52:	bf00      	nop
 8009c54:	200001f8 	.word	0x200001f8

08009c58 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	4603      	mov	r3, r0
 8009c60:	6039      	str	r1, [r7, #0]
 8009c62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c64:	79fb      	ldrb	r3, [r7, #7]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d105      	bne.n	8009c76 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c6a:	683a      	ldr	r2, [r7, #0]
 8009c6c:	4907      	ldr	r1, [pc, #28]	; (8009c8c <USBD_FS_ProductStrDescriptor+0x34>)
 8009c6e:	4808      	ldr	r0, [pc, #32]	; (8009c90 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c70:	f7ff fee8 	bl	8009a44 <USBD_GetString>
 8009c74:	e004      	b.n	8009c80 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c76:	683a      	ldr	r2, [r7, #0]
 8009c78:	4904      	ldr	r1, [pc, #16]	; (8009c8c <USBD_FS_ProductStrDescriptor+0x34>)
 8009c7a:	4805      	ldr	r0, [pc, #20]	; (8009c90 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c7c:	f7ff fee2 	bl	8009a44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c80:	4b02      	ldr	r3, [pc, #8]	; (8009c8c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3708      	adds	r7, #8
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	2000b460 	.word	0x2000b460
 8009c90:	0800a3a8 	.word	0x0800a3a8

08009c94 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	6039      	str	r1, [r7, #0]
 8009c9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009ca0:	683a      	ldr	r2, [r7, #0]
 8009ca2:	4904      	ldr	r1, [pc, #16]	; (8009cb4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009ca4:	4804      	ldr	r0, [pc, #16]	; (8009cb8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009ca6:	f7ff fecd 	bl	8009a44 <USBD_GetString>
  return USBD_StrDesc;
 8009caa:	4b02      	ldr	r3, [pc, #8]	; (8009cb4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3708      	adds	r7, #8
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	2000b460 	.word	0x2000b460
 8009cb8:	0800a3c0 	.word	0x0800a3c0

08009cbc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	6039      	str	r1, [r7, #0]
 8009cc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	221a      	movs	r2, #26
 8009ccc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009cce:	f000 f843 	bl	8009d58 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009cd2:	4b02      	ldr	r3, [pc, #8]	; (8009cdc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3708      	adds	r7, #8
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	200001fc 	.word	0x200001fc

08009ce0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	6039      	str	r1, [r7, #0]
 8009cea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009cec:	79fb      	ldrb	r3, [r7, #7]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d105      	bne.n	8009cfe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009cf2:	683a      	ldr	r2, [r7, #0]
 8009cf4:	4907      	ldr	r1, [pc, #28]	; (8009d14 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009cf6:	4808      	ldr	r0, [pc, #32]	; (8009d18 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009cf8:	f7ff fea4 	bl	8009a44 <USBD_GetString>
 8009cfc:	e004      	b.n	8009d08 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009cfe:	683a      	ldr	r2, [r7, #0]
 8009d00:	4904      	ldr	r1, [pc, #16]	; (8009d14 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009d02:	4805      	ldr	r0, [pc, #20]	; (8009d18 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d04:	f7ff fe9e 	bl	8009a44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d08:	4b02      	ldr	r3, [pc, #8]	; (8009d14 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3708      	adds	r7, #8
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	2000b460 	.word	0x2000b460
 8009d18:	0800a3d4 	.word	0x0800a3d4

08009d1c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	4603      	mov	r3, r0
 8009d24:	6039      	str	r1, [r7, #0]
 8009d26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d28:	79fb      	ldrb	r3, [r7, #7]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d105      	bne.n	8009d3a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d2e:	683a      	ldr	r2, [r7, #0]
 8009d30:	4907      	ldr	r1, [pc, #28]	; (8009d50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d32:	4808      	ldr	r0, [pc, #32]	; (8009d54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d34:	f7ff fe86 	bl	8009a44 <USBD_GetString>
 8009d38:	e004      	b.n	8009d44 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d3a:	683a      	ldr	r2, [r7, #0]
 8009d3c:	4904      	ldr	r1, [pc, #16]	; (8009d50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d3e:	4805      	ldr	r0, [pc, #20]	; (8009d54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d40:	f7ff fe80 	bl	8009a44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d44:	4b02      	ldr	r3, [pc, #8]	; (8009d50 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3708      	adds	r7, #8
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	2000b460 	.word	0x2000b460
 8009d54:	0800a3e0 	.word	0x0800a3e0

08009d58 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009d5e:	4b0f      	ldr	r3, [pc, #60]	; (8009d9c <Get_SerialNum+0x44>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009d64:	4b0e      	ldr	r3, [pc, #56]	; (8009da0 <Get_SerialNum+0x48>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009d6a:	4b0e      	ldr	r3, [pc, #56]	; (8009da4 <Get_SerialNum+0x4c>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009d70:	68fa      	ldr	r2, [r7, #12]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4413      	add	r3, r2
 8009d76:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d009      	beq.n	8009d92 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009d7e:	2208      	movs	r2, #8
 8009d80:	4909      	ldr	r1, [pc, #36]	; (8009da8 <Get_SerialNum+0x50>)
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f000 f814 	bl	8009db0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d88:	2204      	movs	r2, #4
 8009d8a:	4908      	ldr	r1, [pc, #32]	; (8009dac <Get_SerialNum+0x54>)
 8009d8c:	68b8      	ldr	r0, [r7, #8]
 8009d8e:	f000 f80f 	bl	8009db0 <IntToUnicode>
  }
}
 8009d92:	bf00      	nop
 8009d94:	3710      	adds	r7, #16
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	1ffff7e8 	.word	0x1ffff7e8
 8009da0:	1ffff7ec 	.word	0x1ffff7ec
 8009da4:	1ffff7f0 	.word	0x1ffff7f0
 8009da8:	200001fe 	.word	0x200001fe
 8009dac:	2000020e 	.word	0x2000020e

08009db0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b087      	sub	sp, #28
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	4613      	mov	r3, r2
 8009dbc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	75fb      	strb	r3, [r7, #23]
 8009dc6:	e027      	b.n	8009e18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	0f1b      	lsrs	r3, r3, #28
 8009dcc:	2b09      	cmp	r3, #9
 8009dce:	d80b      	bhi.n	8009de8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	0f1b      	lsrs	r3, r3, #28
 8009dd4:	b2da      	uxtb	r2, r3
 8009dd6:	7dfb      	ldrb	r3, [r7, #23]
 8009dd8:	005b      	lsls	r3, r3, #1
 8009dda:	4619      	mov	r1, r3
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	440b      	add	r3, r1
 8009de0:	3230      	adds	r2, #48	; 0x30
 8009de2:	b2d2      	uxtb	r2, r2
 8009de4:	701a      	strb	r2, [r3, #0]
 8009de6:	e00a      	b.n	8009dfe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	0f1b      	lsrs	r3, r3, #28
 8009dec:	b2da      	uxtb	r2, r3
 8009dee:	7dfb      	ldrb	r3, [r7, #23]
 8009df0:	005b      	lsls	r3, r3, #1
 8009df2:	4619      	mov	r1, r3
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	440b      	add	r3, r1
 8009df8:	3237      	adds	r2, #55	; 0x37
 8009dfa:	b2d2      	uxtb	r2, r2
 8009dfc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	011b      	lsls	r3, r3, #4
 8009e02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009e04:	7dfb      	ldrb	r3, [r7, #23]
 8009e06:	005b      	lsls	r3, r3, #1
 8009e08:	3301      	adds	r3, #1
 8009e0a:	68ba      	ldr	r2, [r7, #8]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	2200      	movs	r2, #0
 8009e10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009e12:	7dfb      	ldrb	r3, [r7, #23]
 8009e14:	3301      	adds	r3, #1
 8009e16:	75fb      	strb	r3, [r7, #23]
 8009e18:	7dfa      	ldrb	r2, [r7, #23]
 8009e1a:	79fb      	ldrb	r3, [r7, #7]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d3d3      	bcc.n	8009dc8 <IntToUnicode+0x18>
  }
}
 8009e20:	bf00      	nop
 8009e22:	bf00      	nop
 8009e24:	371c      	adds	r7, #28
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bc80      	pop	{r7}
 8009e2a:	4770      	bx	lr

08009e2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a0d      	ldr	r2, [pc, #52]	; (8009e70 <HAL_PCD_MspInit+0x44>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d113      	bne.n	8009e66 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009e3e:	4b0d      	ldr	r3, [pc, #52]	; (8009e74 <HAL_PCD_MspInit+0x48>)
 8009e40:	69db      	ldr	r3, [r3, #28]
 8009e42:	4a0c      	ldr	r2, [pc, #48]	; (8009e74 <HAL_PCD_MspInit+0x48>)
 8009e44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009e48:	61d3      	str	r3, [r2, #28]
 8009e4a:	4b0a      	ldr	r3, [pc, #40]	; (8009e74 <HAL_PCD_MspInit+0x48>)
 8009e4c:	69db      	ldr	r3, [r3, #28]
 8009e4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e52:	60fb      	str	r3, [r7, #12]
 8009e54:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009e56:	2200      	movs	r2, #0
 8009e58:	2100      	movs	r1, #0
 8009e5a:	2014      	movs	r0, #20
 8009e5c:	f7f7 ffb1 	bl	8001dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009e60:	2014      	movs	r0, #20
 8009e62:	f7f7 ffca 	bl	8001dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009e66:	bf00      	nop
 8009e68:	3710      	adds	r7, #16
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	40005c00 	.word	0x40005c00
 8009e74:	40021000 	.word	0x40021000

08009e78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	4610      	mov	r0, r2
 8009e90:	f7fe fea8 	bl	8008be4 <USBD_LL_SetupStage>
}
 8009e94:	bf00      	nop
 8009e96:	3708      	adds	r7, #8
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8009eae:	78fa      	ldrb	r2, [r7, #3]
 8009eb0:	6879      	ldr	r1, [r7, #4]
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	4413      	add	r3, r2
 8009eb8:	00db      	lsls	r3, r3, #3
 8009eba:	440b      	add	r3, r1
 8009ebc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	78fb      	ldrb	r3, [r7, #3]
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	f7fe feda 	bl	8008c7e <USBD_LL_DataOutStage>
}
 8009eca:	bf00      	nop
 8009ecc:	3708      	adds	r7, #8
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b082      	sub	sp, #8
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	460b      	mov	r3, r1
 8009edc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8009ee4:	78fa      	ldrb	r2, [r7, #3]
 8009ee6:	6879      	ldr	r1, [r7, #4]
 8009ee8:	4613      	mov	r3, r2
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	4413      	add	r3, r2
 8009eee:	00db      	lsls	r3, r3, #3
 8009ef0:	440b      	add	r3, r1
 8009ef2:	333c      	adds	r3, #60	; 0x3c
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	78fb      	ldrb	r3, [r7, #3]
 8009ef8:	4619      	mov	r1, r3
 8009efa:	f7fe ff31 	bl	8008d60 <USBD_LL_DataInStage>
}
 8009efe:	bf00      	nop
 8009f00:	3708      	adds	r7, #8
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b082      	sub	sp, #8
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7ff f841 	bl	8008f9c <USBD_LL_SOF>
}
 8009f1a:	bf00      	nop
 8009f1c:	3708      	adds	r7, #8
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b084      	sub	sp, #16
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	689b      	ldr	r3, [r3, #8]
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d001      	beq.n	8009f3a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009f36:	f7f6 ffb7 	bl	8000ea8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009f40:	7bfa      	ldrb	r2, [r7, #15]
 8009f42:	4611      	mov	r1, r2
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7fe fff1 	bl	8008f2c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7fe ffaa 	bl	8008eaa <USBD_LL_Reset>
}
 8009f56:	bf00      	nop
 8009f58:	3710      	adds	r7, #16
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
	...

08009f60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7fe ffeb 	bl	8008f4a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	699b      	ldr	r3, [r3, #24]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d005      	beq.n	8009f88 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f7c:	4b04      	ldr	r3, [pc, #16]	; (8009f90 <HAL_PCD_SuspendCallback+0x30>)
 8009f7e:	691b      	ldr	r3, [r3, #16]
 8009f80:	4a03      	ldr	r2, [pc, #12]	; (8009f90 <HAL_PCD_SuspendCallback+0x30>)
 8009f82:	f043 0306 	orr.w	r3, r3, #6
 8009f86:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009f88:	bf00      	nop
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	e000ed00 	.word	0xe000ed00

08009f94 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7fe ffe5 	bl	8008f72 <USBD_LL_Resume>
}
 8009fa8:	bf00      	nop
 8009faa:	3708      	adds	r7, #8
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009fb8:	4a1f      	ldr	r2, [pc, #124]	; (800a038 <USBD_LL_Init+0x88>)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4a1d      	ldr	r2, [pc, #116]	; (800a038 <USBD_LL_Init+0x88>)
 8009fc4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009fc8:	4b1b      	ldr	r3, [pc, #108]	; (800a038 <USBD_LL_Init+0x88>)
 8009fca:	4a1c      	ldr	r2, [pc, #112]	; (800a03c <USBD_LL_Init+0x8c>)
 8009fcc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009fce:	4b1a      	ldr	r3, [pc, #104]	; (800a038 <USBD_LL_Init+0x88>)
 8009fd0:	2208      	movs	r2, #8
 8009fd2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009fd4:	4b18      	ldr	r3, [pc, #96]	; (800a038 <USBD_LL_Init+0x88>)
 8009fd6:	2202      	movs	r2, #2
 8009fd8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009fda:	4b17      	ldr	r3, [pc, #92]	; (800a038 <USBD_LL_Init+0x88>)
 8009fdc:	2200      	movs	r2, #0
 8009fde:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009fe0:	4b15      	ldr	r3, [pc, #84]	; (800a038 <USBD_LL_Init+0x88>)
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009fe6:	4b14      	ldr	r3, [pc, #80]	; (800a038 <USBD_LL_Init+0x88>)
 8009fe8:	2200      	movs	r2, #0
 8009fea:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009fec:	4812      	ldr	r0, [pc, #72]	; (800a038 <USBD_LL_Init+0x88>)
 8009fee:	f7f8 fc22 	bl	8002836 <HAL_PCD_Init>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d001      	beq.n	8009ffc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009ff8:	f7f6 ff56 	bl	8000ea8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a002:	2318      	movs	r3, #24
 800a004:	2200      	movs	r2, #0
 800a006:	2100      	movs	r1, #0
 800a008:	f7fa f92a 	bl	8004260 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a012:	2358      	movs	r3, #88	; 0x58
 800a014:	2200      	movs	r2, #0
 800a016:	2180      	movs	r1, #128	; 0x80
 800a018:	f7fa f922 	bl	8004260 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a022:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a026:	2200      	movs	r2, #0
 800a028:	2181      	movs	r1, #129	; 0x81
 800a02a:	f7fa f919 	bl	8004260 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800a02e:	2300      	movs	r3, #0
}
 800a030:	4618      	mov	r0, r3
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	2000b660 	.word	0x2000b660
 800a03c:	40005c00 	.word	0x40005c00

0800a040 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a048:	2300      	movs	r3, #0
 800a04a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a04c:	2300      	movs	r3, #0
 800a04e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a056:	4618      	mov	r0, r3
 800a058:	f7f8 fcec 	bl	8002a34 <HAL_PCD_Start>
 800a05c:	4603      	mov	r3, r0
 800a05e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a060:	7bfb      	ldrb	r3, [r7, #15]
 800a062:	4618      	mov	r0, r3
 800a064:	f000 f93c 	bl	800a2e0 <USBD_Get_USB_Status>
 800a068:	4603      	mov	r3, r0
 800a06a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a06c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b084      	sub	sp, #16
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	4608      	mov	r0, r1
 800a080:	4611      	mov	r1, r2
 800a082:	461a      	mov	r2, r3
 800a084:	4603      	mov	r3, r0
 800a086:	70fb      	strb	r3, [r7, #3]
 800a088:	460b      	mov	r3, r1
 800a08a:	70bb      	strb	r3, [r7, #2]
 800a08c:	4613      	mov	r3, r2
 800a08e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a090:	2300      	movs	r3, #0
 800a092:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a094:	2300      	movs	r3, #0
 800a096:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a09e:	78bb      	ldrb	r3, [r7, #2]
 800a0a0:	883a      	ldrh	r2, [r7, #0]
 800a0a2:	78f9      	ldrb	r1, [r7, #3]
 800a0a4:	f7f8 fe41 	bl	8002d2a <HAL_PCD_EP_Open>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0ac:	7bfb      	ldrb	r3, [r7, #15]
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f000 f916 	bl	800a2e0 <USBD_Get_USB_Status>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b084      	sub	sp, #16
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0dc:	78fa      	ldrb	r2, [r7, #3]
 800a0de:	4611      	mov	r1, r2
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f7f8 fe7f 	bl	8002de4 <HAL_PCD_EP_Close>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0ea:	7bfb      	ldrb	r3, [r7, #15]
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f000 f8f7 	bl	800a2e0 <USBD_Get_USB_Status>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3710      	adds	r7, #16
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	460b      	mov	r3, r1
 800a10a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a10c:	2300      	movs	r3, #0
 800a10e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a110:	2300      	movs	r3, #0
 800a112:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a11a:	78fa      	ldrb	r2, [r7, #3]
 800a11c:	4611      	mov	r1, r2
 800a11e:	4618      	mov	r0, r3
 800a120:	f7f8 ff10 	bl	8002f44 <HAL_PCD_EP_SetStall>
 800a124:	4603      	mov	r3, r0
 800a126:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a128:	7bfb      	ldrb	r3, [r7, #15]
 800a12a:	4618      	mov	r0, r3
 800a12c:	f000 f8d8 	bl	800a2e0 <USBD_Get_USB_Status>
 800a130:	4603      	mov	r3, r0
 800a132:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a134:	7bbb      	ldrb	r3, [r7, #14]
}
 800a136:	4618      	mov	r0, r3
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a13e:	b580      	push	{r7, lr}
 800a140:	b084      	sub	sp, #16
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
 800a146:	460b      	mov	r3, r1
 800a148:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a14a:	2300      	movs	r3, #0
 800a14c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a14e:	2300      	movs	r3, #0
 800a150:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a158:	78fa      	ldrb	r2, [r7, #3]
 800a15a:	4611      	mov	r1, r2
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7f8 ff51 	bl	8003004 <HAL_PCD_EP_ClrStall>
 800a162:	4603      	mov	r3, r0
 800a164:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a166:	7bfb      	ldrb	r3, [r7, #15]
 800a168:	4618      	mov	r0, r3
 800a16a:	f000 f8b9 	bl	800a2e0 <USBD_Get_USB_Status>
 800a16e:	4603      	mov	r3, r0
 800a170:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a172:	7bbb      	ldrb	r3, [r7, #14]
}
 800a174:	4618      	mov	r0, r3
 800a176:	3710      	adds	r7, #16
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b085      	sub	sp, #20
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	460b      	mov	r3, r1
 800a186:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a18e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a190:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a194:	2b00      	cmp	r3, #0
 800a196:	da0c      	bge.n	800a1b2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a198:	78fb      	ldrb	r3, [r7, #3]
 800a19a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a19e:	68f9      	ldr	r1, [r7, #12]
 800a1a0:	1c5a      	adds	r2, r3, #1
 800a1a2:	4613      	mov	r3, r2
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	4413      	add	r3, r2
 800a1a8:	00db      	lsls	r3, r3, #3
 800a1aa:	440b      	add	r3, r1
 800a1ac:	3302      	adds	r3, #2
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	e00b      	b.n	800a1ca <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a1b2:	78fb      	ldrb	r3, [r7, #3]
 800a1b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1b8:	68f9      	ldr	r1, [r7, #12]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4413      	add	r3, r2
 800a1c0:	00db      	lsls	r3, r3, #3
 800a1c2:	440b      	add	r3, r1
 800a1c4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a1c8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3714      	adds	r7, #20
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bc80      	pop	{r7}
 800a1d2:	4770      	bx	lr

0800a1d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	460b      	mov	r3, r1
 800a1de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1ee:	78fa      	ldrb	r2, [r7, #3]
 800a1f0:	4611      	mov	r1, r2
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7f8 fd74 	bl	8002ce0 <HAL_PCD_SetAddress>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1fc:	7bfb      	ldrb	r3, [r7, #15]
 800a1fe:	4618      	mov	r0, r3
 800a200:	f000 f86e 	bl	800a2e0 <USBD_Get_USB_Status>
 800a204:	4603      	mov	r3, r0
 800a206:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a208:	7bbb      	ldrb	r3, [r7, #14]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3710      	adds	r7, #16
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}

0800a212 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a212:	b580      	push	{r7, lr}
 800a214:	b086      	sub	sp, #24
 800a216:	af00      	add	r7, sp, #0
 800a218:	60f8      	str	r0, [r7, #12]
 800a21a:	607a      	str	r2, [r7, #4]
 800a21c:	461a      	mov	r2, r3
 800a21e:	460b      	mov	r3, r1
 800a220:	72fb      	strb	r3, [r7, #11]
 800a222:	4613      	mov	r3, r2
 800a224:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a226:	2300      	movs	r3, #0
 800a228:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a22a:	2300      	movs	r3, #0
 800a22c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a234:	893b      	ldrh	r3, [r7, #8]
 800a236:	7af9      	ldrb	r1, [r7, #11]
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	f7f8 fe4c 	bl	8002ed6 <HAL_PCD_EP_Transmit>
 800a23e:	4603      	mov	r3, r0
 800a240:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a242:	7dfb      	ldrb	r3, [r7, #23]
 800a244:	4618      	mov	r0, r3
 800a246:	f000 f84b 	bl	800a2e0 <USBD_Get_USB_Status>
 800a24a:	4603      	mov	r3, r0
 800a24c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a24e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a250:	4618      	mov	r0, r3
 800a252:	3718      	adds	r7, #24
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b086      	sub	sp, #24
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	607a      	str	r2, [r7, #4]
 800a262:	461a      	mov	r2, r3
 800a264:	460b      	mov	r3, r1
 800a266:	72fb      	strb	r3, [r7, #11]
 800a268:	4613      	mov	r3, r2
 800a26a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a26c:	2300      	movs	r3, #0
 800a26e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a270:	2300      	movs	r3, #0
 800a272:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a27a:	893b      	ldrh	r3, [r7, #8]
 800a27c:	7af9      	ldrb	r1, [r7, #11]
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	f7f8 fdf8 	bl	8002e74 <HAL_PCD_EP_Receive>
 800a284:	4603      	mov	r3, r0
 800a286:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a288:	7dfb      	ldrb	r3, [r7, #23]
 800a28a:	4618      	mov	r0, r3
 800a28c:	f000 f828 	bl	800a2e0 <USBD_Get_USB_Status>
 800a290:	4603      	mov	r3, r0
 800a292:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a294:	7dbb      	ldrb	r3, [r7, #22]
}
 800a296:	4618      	mov	r0, r3
 800a298:	3718      	adds	r7, #24
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
	...

0800a2a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b083      	sub	sp, #12
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a2a8:	4b02      	ldr	r3, [pc, #8]	; (800a2b4 <USBD_static_malloc+0x14>)
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	370c      	adds	r7, #12
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bc80      	pop	{r7}
 800a2b2:	4770      	bx	lr
 800a2b4:	2000b950 	.word	0x2000b950

0800a2b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]

}
 800a2c0:	bf00      	nop
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bc80      	pop	{r7}
 800a2c8:	4770      	bx	lr

0800a2ca <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2ca:	b480      	push	{r7}
 800a2cc:	b083      	sub	sp, #12
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a2d6:	bf00      	nop
 800a2d8:	370c      	adds	r7, #12
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bc80      	pop	{r7}
 800a2de:	4770      	bx	lr

0800a2e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b085      	sub	sp, #20
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a2ee:	79fb      	ldrb	r3, [r7, #7]
 800a2f0:	2b03      	cmp	r3, #3
 800a2f2:	d817      	bhi.n	800a324 <USBD_Get_USB_Status+0x44>
 800a2f4:	a201      	add	r2, pc, #4	; (adr r2, 800a2fc <USBD_Get_USB_Status+0x1c>)
 800a2f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2fa:	bf00      	nop
 800a2fc:	0800a30d 	.word	0x0800a30d
 800a300:	0800a313 	.word	0x0800a313
 800a304:	0800a319 	.word	0x0800a319
 800a308:	0800a31f 	.word	0x0800a31f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a30c:	2300      	movs	r3, #0
 800a30e:	73fb      	strb	r3, [r7, #15]
    break;
 800a310:	e00b      	b.n	800a32a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a312:	2302      	movs	r3, #2
 800a314:	73fb      	strb	r3, [r7, #15]
    break;
 800a316:	e008      	b.n	800a32a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a318:	2301      	movs	r3, #1
 800a31a:	73fb      	strb	r3, [r7, #15]
    break;
 800a31c:	e005      	b.n	800a32a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a31e:	2302      	movs	r3, #2
 800a320:	73fb      	strb	r3, [r7, #15]
    break;
 800a322:	e002      	b.n	800a32a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a324:	2302      	movs	r3, #2
 800a326:	73fb      	strb	r3, [r7, #15]
    break;
 800a328:	bf00      	nop
  }
  return usb_status;
 800a32a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3714      	adds	r7, #20
 800a330:	46bd      	mov	sp, r7
 800a332:	bc80      	pop	{r7}
 800a334:	4770      	bx	lr
 800a336:	bf00      	nop

0800a338 <__libc_init_array>:
 800a338:	b570      	push	{r4, r5, r6, lr}
 800a33a:	2600      	movs	r6, #0
 800a33c:	4d0c      	ldr	r5, [pc, #48]	; (800a370 <__libc_init_array+0x38>)
 800a33e:	4c0d      	ldr	r4, [pc, #52]	; (800a374 <__libc_init_array+0x3c>)
 800a340:	1b64      	subs	r4, r4, r5
 800a342:	10a4      	asrs	r4, r4, #2
 800a344:	42a6      	cmp	r6, r4
 800a346:	d109      	bne.n	800a35c <__libc_init_array+0x24>
 800a348:	f000 f822 	bl	800a390 <_init>
 800a34c:	2600      	movs	r6, #0
 800a34e:	4d0a      	ldr	r5, [pc, #40]	; (800a378 <__libc_init_array+0x40>)
 800a350:	4c0a      	ldr	r4, [pc, #40]	; (800a37c <__libc_init_array+0x44>)
 800a352:	1b64      	subs	r4, r4, r5
 800a354:	10a4      	asrs	r4, r4, #2
 800a356:	42a6      	cmp	r6, r4
 800a358:	d105      	bne.n	800a366 <__libc_init_array+0x2e>
 800a35a:	bd70      	pop	{r4, r5, r6, pc}
 800a35c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a360:	4798      	blx	r3
 800a362:	3601      	adds	r6, #1
 800a364:	e7ee      	b.n	800a344 <__libc_init_array+0xc>
 800a366:	f855 3b04 	ldr.w	r3, [r5], #4
 800a36a:	4798      	blx	r3
 800a36c:	3601      	adds	r6, #1
 800a36e:	e7f2      	b.n	800a356 <__libc_init_array+0x1e>
 800a370:	0800aa88 	.word	0x0800aa88
 800a374:	0800aa88 	.word	0x0800aa88
 800a378:	0800aa88 	.word	0x0800aa88
 800a37c:	0800aa8c 	.word	0x0800aa8c

0800a380 <memset>:
 800a380:	4603      	mov	r3, r0
 800a382:	4402      	add	r2, r0
 800a384:	4293      	cmp	r3, r2
 800a386:	d100      	bne.n	800a38a <memset+0xa>
 800a388:	4770      	bx	lr
 800a38a:	f803 1b01 	strb.w	r1, [r3], #1
 800a38e:	e7f9      	b.n	800a384 <memset+0x4>

0800a390 <_init>:
 800a390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a392:	bf00      	nop
 800a394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a396:	bc08      	pop	{r3}
 800a398:	469e      	mov	lr, r3
 800a39a:	4770      	bx	lr

0800a39c <_fini>:
 800a39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a39e:	bf00      	nop
 800a3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3a2:	bc08      	pop	{r3}
 800a3a4:	469e      	mov	lr, r3
 800a3a6:	4770      	bx	lr
